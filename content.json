{"pages":[{"title":"about","text":"我是王雨，hello world","link":"/about/index.html"},{"title":"Blogwy&#39;s Starred Repositories","text":"Repository Stars Paliverse/DualSenseX 83⭐ YunYouJun/web-resume 131⭐ wemap/rollup-plugin-arraybuffer 1⭐ zxbu/webdav-aliyundriver 2113⭐ Helpsoftware/fanqiang 897⭐ eastlakeside/awesome-productivity-cn 1949⭐ bradtraversy/50projects50days 9383⭐ artf/grapesjs 14511⭐ geekxh/hello-algorithm 28774⭐ Momo707577045/m3u8-downloader 1193⭐ public-api-lists/public-api-lists 3606⭐ strapi/strapi 40166⭐ TaleLin/lin-cms-vue 2283⭐ Sandop/NuxtPC 369⭐ zhangyuanwei/node-images 1405⭐ pdf2htmlEX/pdf2htmlEX 638⭐ llh911001/mostly-adequate-guide-chinese 2074⭐ typlog/china-indie-podcasts 754⭐ coolwanglu/pdf2htmlEX 9340⭐ programthink/zhao 8765⭐ yihong0618/GitHubPoster 511⭐ SocialSisterYi/bilibili-API-collect 3897⭐ nocodb/nocodb 18612⭐ hwanz/SS-SSR-V2ray 290⭐ Anankke/SSPanel-Uim 6117⭐ gjTool/pdfh5 519⭐ bigfangfang/IBMVPS 369⭐ GitSquared/edex-ui 33848⭐ jwasham/coding-interview-university 194453⭐ cube-js/cube.js 11139⭐ SteamTools-Team/SteamTools 4026⭐ unlock-music/unlock-music 9387⭐ EricJMarti/inventory-hunter 1010⭐ szimek/sharedrop 5067⭐ fanchangyong/deershare 345⭐ muguruzawang/jd_maotai_seckill 1280⭐ TryGhost/Ghost 38747⭐ byoungd/English-level-up-tips-for-Chinese 21047⭐ Ryujinx/Ryujinx 9868⭐ sindresorhus/got 10226⭐ rhysd/electron-about-window 360⭐ staven630/nuxt-config 64⭐ JackonYang/list-of-wechat-mini-program-list 496⭐ phlinhng/v2ray-tcp-tls-web 616⭐ Ovilia/lipstick 2361⭐ tostercx/GTAO_Booster_PoC 2753⭐ cuiocean/ZY-Player 10179⭐ quasarframework/quasar 19565⭐ ykfe/imove 3094⭐ andyzys/jd_seckill 782⭐ staven630/vue-cli4-config 2484⭐ ant-design/ant-design 74821⭐ ChenYFan/PS_Online 7⭐ lexrus/Huahui 149⭐ themesberg/neumorphism-ui-bootstrap 618⭐ qier222/YesPlayMusic 11535⭐ SigureMo/bilili 594⭐ ArchiveBox/ArchiveBox 11903⭐ gibbed/SteamAchievementManager 2567⭐ nklayman/vue-cli-plugin-electron-builder 3415⭐ bigdongdongCLUB/hello-world 748⭐ wechaty/wechaty 11133⭐ jiupinjia/SkyAR 1770⭐ MustangYM/WeChatExtension-ForMac 18856⭐ vitozyf/lucky-draw 1103⭐ RayWangQvQ/BiliBiliTool 3129⭐ bigdongdongCLUB/welcome 535⭐ missing-semester-cn/missing-semester-cn.github.io 2788⭐ OBKoro1/autoCommit 252⭐ camtheperson/get-my-ps5 350⭐ HeiSir2014/M3U8-Downloader 838⭐ puppeteer/puppeteer 73720⭐ microsoft/playwright 27887⭐ tal-tech/electron-playground 1135⭐ sebhildebrandt/systeminformation 1730⭐ Marak/faker.js 33650⭐ SaltyLeo/Post-Pages-to-IPFS 101⭐ baidu/amis 8205⭐ iptv-org/iptv 40655⭐ ffmpegwasm/ffmpeg.wasm 6164⭐ adam-golab/react-developer-roadmap 16510⭐ Hsury/Bilibili-Toolkit 956⭐ StavinLi/Workflow 491⭐ blogwy/Wedding-invitation 19⭐ vitejs/vite 32413⭐ guoanfamily/houseloan 17⭐ PanDownloadServer/Server 8776⭐ blackjack4494/youtube-dlc 1210⭐ zhaoolee/OnlineToolsBook 1911⭐ getsentry/onpremise 4304⭐ a597873885/webfunny_monitor 3264⭐ josdejong/jsoneditor 8992⭐ mqttjs/MQTT.js 6615⭐ anuraghazra/github-readme-stats 31668⭐ xtermjs/xterm.js 11250⭐ mscdex/ssh2 4578⭐ octalmage/robotjs 10496⭐ tauri-apps/tauri 23307⭐ xyjoey/fxxkmakeding 1260⭐ taoyuan/sernum 1⭐ chenshenhai/deno_note 663⭐ wkentaro/labelme 7340⭐ EYHN/hexo-helper-live2d 3594⭐ PantsuDango/Dango-Translator 3229⭐ fogleman/Minecraft 4700⭐ Molunerfinn/PicGo 14563⭐ wk989898/deno-vue-module 4⭐ yuzu-emu/yuzu 16377⭐ Kr328/ClashForAndroid 9378⭐ 2dust/v2rayNG 11708⭐ Qv2ray/Qv2ray 12522⭐ jiangxufeng/v2rayL 2637⭐ anmoljagetia/Flatabulous 3725⭐ V2RaySSR/Trojan 564⭐ woniuzfb/iptv 588⭐ naptha/tesseract.js 24849⭐ soldair/node-qrcode 5144⭐ bannedbook/fanqiang 22451⭐ chiakge/Linux-NetSpeed 3028⭐ baowenbo/DAIN 6916⭐ nilaoda/N_m3u8DL-CLI 5932⭐ wuhan2020/wuhan2020 6193⭐ chokcoco/magicCss 1336⭐ addlew/my_iptv 462⭐ ryanmcdermott/clean-code-javascript 58544⭐ helloxz/ccaa 817⭐ skyline75489/what-happens-when-zh_CN 6526⭐ kelseyhightower/nocode 49066⭐ Tencent/Hippy 6076⭐ ConardLi/30-seconds-of-code-Zh-CN 330⭐ systemjs/systemjs 11758⭐ zhongsp/TypeScript 5150⭐ chinese-poetry/chinese-poetry 34230⭐ phodal/microfrontends 2651⭐ NLRX-WJC/Learn-Vue-Source-Code 2599⭐ sdras/cssgridgenerator 3865⭐ woai3c/Front-end-basic-knowledge 657⭐ brilam/remove-bg 657⭐ public-apis/public-apis 163404⭐ n0shake/Public-APIs 17399⭐ superman66/vue-axios-github 2616⭐ sherlock-project/sherlock 27265⭐ kon9chunkit/GitHub-Chinese-Top-Charts 38818⭐ iammapping/wedding 2893⭐ yyhsong/iDataV 3699⭐ zxlie/FeHelper 3757⭐ poetries/FE-Interview-Questions 1814⭐ evil-huawei/evil-huawei 7792⭐ wulabing/Xray_onekey 6784⭐ qingshuisiyuan/electron-ssr-backup 5230⭐ yisainan/web-interview 1622⭐ TGSAN/CMWTAT_Digital_Edition 6176⭐ jgraph/drawio 25873⭐ menzi11/BullshitGenerator 15129⭐ veracrypt/VeraCrypt 3515⭐ JosefNemec/Playnite 3405⭐ blogwy/BilibiliVideoDownload 558⭐ nslog11/Gitter 3484⭐ chokcoco/iCSS 11116⭐ rover95/morse-encrypt 418⭐ adrai/flowchart.js 7626⭐ bilibili-helper/bilibili-helper-o 3668⭐ unbug/codelf 11822⭐ wandergis/coordtransform 3437⭐ qufei1993/Nodejs-Roadmap 2182⭐ ziishaned/learn-regex 38981⭐ nondanee/UnblockNeteaseMusic 15232⭐ imagemin/imagemin 4890⭐ mapwzju/vue-form-param-check 6⭐ givanz/VvvebJs 4474⭐ mengxiong10/vue2-datepicker 1290⭐ guyueyingmu/avbook 8016⭐ 1995parham/github-do-not-ban-us 11973⭐ automagica/automagica 2595⭐ chrislgarry/Apollo-11 51881⭐ 0xHJK/music-dl 2583⭐ ffffffff0x/Digital-Privacy 3387⭐ iqiqiya/iqiqiya-API 1012⭐ Ji4n1ng/OpenInTerminal 3965⭐ serhii-londar/open-source-mac-os-apps 28314⭐ D0n9X1n/hexo-blog-encrypt 641⭐ zhaoolee/ChineseBQB 9242⭐ papercss/papercss 3465⭐ haizlin/fe-interview 19061⭐ Remix-Design/RemixIcon 3759⭐ sonnyp/aria2.js 498⭐ ksky521/nodeppt 9508⭐ EtherDream/jsproxy 8485⭐ dcloudio/uni-app 33723⭐ lindell/JsBarcode 4118⭐ Ice-Hazymoon/MikuTools 2908⭐ MinhasKamal/DownGit 1059⭐ ZhuPeng/mp-githubtrending 200⭐ bestofjs/javascript-risingstars 482⭐ ZSAIm/iqiyi-parser 852⭐ jayZOU/skeleton 548⭐ pock/pock 9487⭐ ehang-io/nps 18608⭐ benhowdle89/grade 3668⭐ ngosang/trackerslist 30720⭐ jackfrued/Python-100-Days 109264⭐ azl397985856/leetcode 44487⭐ muaz-khan/RecordRTC 4895⭐ deepfakes/faceswap 38577⭐ openbilibili/go-common 9182⭐ shimohq/chinese-programmer-wrong-pronunciation 14570⭐ Kr1s77/Python-crawler-tutorial-starts-from-zero 3671⭐ freeCodeCamp/freeCodeCamp 333425⭐ Advanced-Frontend/Daily-Interview-Question 24198⭐ formulahendry/955.WLB 27363⭐ Kr1s77/awesome-python-login-model 13786⭐ 996icu/996.ICU 258938⭐ JohnCoates/Aerial 19483⭐ serratus/quaggaJS 4398⭐ gruhn/vue-qrcode-reader 1412⭐ 184455/vue-team-develop-document 25⭐ vadimdemedes/gifi 1025⭐ zhaoolee/ChromeAppHeroes 18856⭐ kamikat/bilibili-playurl 16⭐ kamikat/bilibili-get 172⭐ bWhirring/-node-slider-verify 46⭐ the1812/Bilibili-Evolved 9056⭐ canfoo/vue2.0-taopiaopiao 1166⭐ 1c7/Crash-Course-Computer-Science-Chinese 7943⭐ Henryhaohao/Bilibili_video_download 1972⭐ o2team/guide 453⭐ CodeTips/BaiduNetdiskPlugin-macOS 8642⭐ WuGuanChao/wechat-layout 5⭐ imgcook/imgcook 1391⭐ bjw1234/v_resume 29⭐ doramart/DoraCMS 3138⭐ AfanSama/easy-canvas 117⭐ 233boy/v2ray 14746⭐ electron/electron 98227⭐ FQrabbit/SSTap-Rule 4799⭐ alienzhou/frontend-tech-list 2893⭐ mzz2017/musicman 128⭐ magicdawn/yun-playlist-downloader 266⭐ CarGuo/gsy_github_app_flutter 12753⭐ kujian/30-seconds-of-css 547⭐ flutterchina/flutter-in-action 8647⭐ browserslist/browserslist 9678⭐ catofmrlu/MacApps 734⭐ qianguyihao/Mac 1582⭐ stephentian/33-js-concepts 12132⭐ Solido/awesome-flutter 37699⭐ CarGuo/GSYGithubAppWeex 730⭐ dxcweb/high-speed-downloader 7617⭐ produck/svg-captcha 1365⭐ clientIO/joint 3470⭐ jaywcjlove/awesome-mac 45653⭐ jayZOU/watch 48⭐ leizongmin/js-xss 4226⭐ yatyricky/core-values-encoder-crx 31⭐ sym233/core-values-encoder 1980⭐ didi/mand-mobile 3155⭐ goldbergyoni/nodebestpractices 71276⭐ fa-ge/NativeShare 796⭐ TerryZ/v-uploader 219⭐ l-hammer/You-need-to-know-css 3581⭐ ascoders/weekly 15543⭐ 521xueweihan/HelloGitHub 47286⭐ joggerplus/awesome-weex 1542⭐ yujinjin/vue-number-keyboard 42⭐ hilongjw/safari-reaper-demo 34⭐ animate-css/animate.css 72394⭐ AweiLoveAndroid/The-pit-of-the-Android-Studio 308⭐ xtyxtyx/sorry 6232⭐ Blankj/awesome-comment 1243⭐ qwerty472123/wxappUnpacker 4483⭐ justadudewhohacks/face-api.js 12958⭐ shafferjohn/bilibili-search 27⭐ esterTion/BiliBili_crc2mid 46⭐ ecomfe/echarts-for-weixin 5360⭐ xiaolin3303/wx-charts 4597⭐ weilanwl/ColorUI 10782⭐ dannnney/weapp-event 192⭐ unmagic/wechat-im 1394⭐ csbun/thal 653⭐ weexteam/A-pack-tool-for-Apache-Weex 621⭐ NewNewKing/SmallRomance 719⭐ trekhleb/javascript-algorithms 121815⭐ chenshenhai/koa2-note 4675⭐ shakenetwork/VipVideoResolution 120⭐ websockets/ws 17096⭐ socketio/socket.io 54530⭐ trheyi/xpmjs 178⭐ cloudreve/Cloudreve 10690⭐ charCR2/vue_reader 79⭐ youyingxiang/yxx_admin 59⭐ EastWorld/wechat-app-mall 15096⭐ tumobi/nideshop-mini-program 7088⭐ justjavac/awesome-wechat-weapp 36190⭐ liriliri/eruda 11215⭐ jaweii/Vue-Layout 2962⭐ youzan/vant-weapp 15213⭐ zwwill/yanxuan-weex-demo 3054⭐ shenghy/SmileVue 445⭐ lensh/vue-qq 875⭐ MetinSeylan/Vue-Socket.io 3672⭐ PanJiaChen/vue-element-admin 71142⭐ denoland/deno 78183⭐ auth0/node-jsonwebtoken 14506⭐ ElemeFE/v-charts 6455⭐ proxyee-down-org/proxyee-down 25361⭐ XiqingLiu/VideoServer 201⭐ demopark/sequelize-docs-Zh-CN 2724⭐ icindy/wxParse 7612⭐ zce/api-proxy 473⭐ miaozhang9/wecharCodejar 462⭐ Meituan-Dianping/mpvue 20353⭐ jgthms/bulma 44361⭐ cnodejs/nodeclub 9124⭐ allenking1028/ss 1011⭐ EngineGirl/enginegirl.github.io 21⭐ 1c7/chinese-independent-developer 17090⭐ DDFE/DDFE-blog 3856⭐ zhusaidong/HolidayApi 45⭐ markedjs/marked 26029⭐ lavas-project/lavas 1970⭐ PowerDos/MarkdownToHtml 12⭐ vuejs/awesome-vue 62502⭐ bhnddowinf/vuejs2-learn 1501⭐ SpiderClub/haipproxy 4919⭐ sail-sail/ejsExcel 642⭐ jkchao/vue-loading 455⭐ MatteoGabriele/vue-progressive-image 695⭐ jaweii/Vueg—-page-transition-plugin 1037⭐ evrone/postcss-px-to-viewport 1912⭐ h2y/Shadowrocket-ADBlock-Rules 12005⭐ h5bp/Front-end-Developer-Interview-Questions 50634⭐ markyun/My-blog 11313⭐ hrwhisper/baiduShare 541⭐ xiaoshun007/12306Python 499⭐ emilwallner/Screenshot-to-code 13497⭐ laravel-china/php-the-right-way 1503⭐ pandolia/qqbot 3636⭐ moveondo/FullStack-NodeVue 86⭐ webtorrent/webtorrent 24746⭐ amfe/lib-flexible 11662⭐ justjavac/free-programming-books-zh_CN 83281⭐ EZLippi/practical-programming-books 3833⭐ yidao620c/python3-cookbook 9539⭐ sixu05202004/pythontutorial3 321⭐ shinima/temme 263⭐ chenhuiYj/ec-do 970⭐ node-webot/wechat 4970⭐ answershuto/learnVue 11313⭐ zdhxiong/mdui 3291⭐ phachon/html-templates 394⭐ exacity/deeplearningbook-chinese 31716⭐ MorvanZhou/tutorials 9451⭐ bailicangdu/vue2-happyfri 8913⭐ alsotang/node-lessons 16302⭐ nodejscn/node-api-cn 1325⭐ gonjay/YoukuVideo 16⭐ fython/BilibiliAPIDocs 2015⭐ liulangnan/aui 979⭐ webmodules/jsonp 1895⭐ axios/axios 88334⭐ bda-research/node-crawler 5995⭐ typicode/json-server 56738⭐ mongs/1707 2⭐ weserv/images 913⭐ mongs/skill-map 1⭐ vuejs/vue 188975⭐ pagekit/vue-resource 10085⭐ mmmwhy/some_code 800⭐ listen1/listen1 3610⭐ mengkunsoft/MKOnlineMusicPlayer 1779⭐ metowolf/Meting 1410⭐ Binaryify/NeteaseCloudMusicApi 21523⭐ torvalds/linux 119248⭐ timdream/wordcloud2.js 1865⭐ voronianski/jquery.avgrund.js 1789⭐ tuupola/lazyload 8579⭐ alvarotrigo/fullPage.js 32712⭐ jquery-validation/jquery-validation 10119⭐","link":"/starred/index.html"},{"title":"Awesome List","text":"安卓软件GO谷歌安卓器 v4.8.6: https://wong-1251253615.cos.ap-shanghai.myqcloud.com/software/com.goplaycn.googleinstall_4.8.6_486.apk Youtube_v16.17.36: https://wong-1251253615.cos.ap-shanghai.myqcloud.com/software/YouTube_v16.17.36_apkpure.com.apk Netflix_v7.102.0: https://wong-1251253615.cos.ap-shanghai.myqcloud.com/software/Netflix_v7.102.0%20build%2012%2035461_apkpure.com.apk Telegram_v7.7.2: https://wong-1251253615.cos.ap-shanghai.myqcloud.com/software/Telegram_v7.7.2_apkpure.com.apk Twitter_v8.92.0: https://wong-1251253615.cos.ap-shanghai.myqcloud.com/software/Twitter_v8.92.0-release.00_apkpure.com.apk Instagram_v187.0.0.32.120: https://wong-1251253615.cos.ap-shanghai.myqcloud.com/software/Instagram_v187.0.0.32.120_apkpure.com.apk PlayStation App_v21.3.1: https://wong-1251253615.cos.ap-shanghai.myqcloud.com/software/PlayStation%20App_v21.3.1_apkpure.com.apk Shadowsocks_v5.2.2: https://wong-1251253615.cos.ap-shanghai.myqcloud.com/software/Shadowsocks_v5.2.2_apkpure.com.apk ShadowsockR SSR_v2.9.3: https://wong-1251253615.cos.ap-shanghai.myqcloud.com/software/ShadowsockR%20SSR_v2.9.3_apkpure.com.apk v2rayNG_v1.2.10: https://wong-1251253615.cos.ap-shanghai.myqcloud.com/software/v2rayNG_v1.2.10_apkpure.com.apk Clash For Android_v2.3.21: https://wong-1251253615.cos.ap-shanghai.myqcloud.com/software/Clash%20For%20Android_v2.3.21.apk bilibili-高画质无广告追星动漫都在这(国际版): https://wong-1251253615.cos.ap-shanghai.myqcloud.com/software/bilibili%20%E9%AB%98%E7%95%AB%E8%B3%AA%E7%84%A1%E5%BB%A3%E5%91%8A%E8%BF%BD%E6%98%9F%E5%8B%95%E6%BC%AB%E9%83%BD%E5%9C%A8%E9%80%99_v3.1.0_apkpure.com.apk 网站收藏夹Codeblog/website 廖雪峰个人博客 - 技术大牛博客 阮一峰的网络日志 - 技术大佬博客 为前端工程师准备的 Flutter 入门指南 AlloyDesigner - 把UI给的设计图直接嵌入到页面进行开发 代码在线运行 智图图片压缩 - 有webp格式 图片瀑布流插件 30秒css JSON格式化 吾爱破解论坛 - 国内最大的软件安全与病毒分析论坛 变量命名神器 程序员导航 图片隐写加密解密 零宽字符加密 10分钟学会前端工程化 婚礼大屏互动，微信请柬一站式解决方案 大屏数据可视化模版 FeHelper–Web前端助手 开源在线画流程图 Document Vue.js MDN ES6入门 - 阮大神的ES6入门(不只是ES6，还有ES7/8) 微信小程序开发文档 Flutter官方文档 Flutter实战 jquery文档 Resource/Demo JQuery插件库1 JQuery插件库2 iconfont freebiesbug - 免费的设计资源 Mock数据 manypixels - 免费插画无版权 skill JS奇淫巧技：防抖函数与节流函数 Cordova 常用命令及插件 cordova-plugin-whitelist 协议白名单配置整理 vue 实战各种小技巧 微信小程序动画中如何将rpx转化px 微信公众平台接口调试工具 library/repositories ZSAIm/iqiyi-parser - 解析下载爱奇艺、哔哩哔哩、腾讯视频 jayZOU/skeleton - 绘制小程序骨架屏 cnlh/nps - 一款轻量级、功能强大的内网穿透代理服务器。 benhowdle89/grade - 这个库可以获取图像的2种主色并生成互补渐变的背景。类似于豆瓣APP中电影详情页的背景色。 ngosang/trackerslist - 公共的BT服务器trackers列表 jackfrued/Python-100-Days - Python - 100天从新手到大师 azl397985856/leetcode - 用js解leetcode题目 deepfakes/faceswap - 大名鼎鼎的AI换脸技术 shimohq/chinese-programmer-wrong-pronunciation - 中国程序员容易发音错误的单词 Advanced-Frontend/Daily-Interview-Question - 每天一道大厂前端面试题 CriseLYJ/awesome-python-login-model - Python模拟登录案例 serratus/quaggaJS - JS识别条形码库 gruhn/vue-qrcode-reader - Vue识别二维码库 184455/vue-team-develop-document - Vue 移动端团队协作开发规范文档 zhaoolee/ChromeAppHeroes - chrome插件推荐 前端规范文档 doramart/DoraCMS - DoraCMS是基于Nodejs+express+mongodb编写的一套内容管理系统，结构简单，较目前一些开源的cms，doracms易于拓展，特别适合前端开发工程师做二次开发。 kujian/30-seconds-of-css - 30秒CSS中文版 您可以在30秒或更短的时间内了解的有用的CSS代码片段。 flutterchina/flutter-in-action - 《Flutter实战》电子书 stephentian/33-js-concepts - 每个 JavaScript 工程师都应懂的33个概念 lemonce/svg-captcha - node生成svg验证码 leizongmin/js-xss - 根据白名单过滤 HTML(防止 XSS 攻击) dt-fe/weekly - 前端精读周刊 521xueweihan/HelloGitHub - 一个分享 GitHub 上有趣、入门级的开源项目。 AweiLoveAndroid/The-pit-of-the-Android-Studio - 老卢全面总结Android Studio的填坑指南 xtyxtyx/sorry - 在线制作sorry 为所欲为的gif qwerty472123/wxappUnpacker - Wechat App(微信小程序,.wxapkg)解包及相关文件(.wxss,.json,.wxs,.wxml)还原工具 justadudewhohacks/face-api.js - node版面部识别基于tensorflow.js weilanwl/ColorUI - 鲜亮的高饱和色彩，专注视觉的小程序组件库 unmagic/wechat-im - 微信小程序即时通讯模板，使用WebSocket通信 ecomfe/echarts-for-weixin - ECharts 的微信小程序版本 xiaolin3303/wx-charts - 微信小程序图表库 csbun/thal - 译文：Puppeteer 与 Chrome Headless —— 从入门到爬虫 chenshenhai/koa2-note - Koa2进阶学习笔记已完结 cloudreve/Cloudreve - 支持多家云存储的云盘系统 EastWorld/wechat-app-mall - 微信小程序商城，微信小程序微店 tumobi/nideshop-mini-program - NideShop：基于Node.js+MySQL开发的开源微信小程序商城（微信小程序） justjavac/awesome-wechat-weapp - 微信小程序开发资源汇总 youzan/vant-weapp - 轻量、可靠的小程序 UI 组件库 auth0/node-jsonwebtoken - JsonWebToken implementation for node.js ElemeFE/v-charts - 基于 Vue2.0 和 ECharts 封装的图表组件 demopark/sequelize-docs-Zh-CN - Sequelize 文档的中文版本 zce/douban-api-proxy - 一个豆瓣 API 的反向代理配置，旨在解决豆瓣屏蔽小程序请求问题 zce/douban-api-docs - 豆瓣 API 文档 1c7/chinese-independent-developer - 中国独立开发者项目列表 – 分享大家都在做什么 EntertainmentVideo Bilibili Youtube rarbg全球最大影视BT种子库 影视导航 Game 育碧中国 origin steam 3dm IGGGAMES Tools pandownload - 最火的第三方不限速百度云客户端(下载的东西过多会被百度官方限速) pandownload网页版 速盘 - 免费版和上面的类似，收费版超赞，不贵3元/50GB Motrix - 可以下载百度云 FTP HTTP 种子 磁力，有Win/Linux/Mac版 迅雷全版本 IDM 磁力资源搜索助手 - 提取码: 2xs2 cloudconvert - 在线格式转换 ilovepdf - 在线PDF文件转换 在线生成拟人化头像 龙轩导航 - 好用的导航网站 在线代码运行工具 musicman - 免费音乐下载web版 会声会影2018 - 会声会影2018破解版简中 Pock - MBP的Touch Bar显示Dock栏 Aerial - MAC OS动态屏保(超好看) Chrome Extensions JSON Formatter - JSON格式化 Set Character Encoding - 设置网页编码 Tampermonkey - 游猴 Wappalyzer - 查看网站技术栈 划词翻译 捕捉网页截图 Vue.js devtools - Vue开发工具 下面内容来自阮一峰老师 实用信息 免费软件 免费电子书 免费音乐 免费照片","link":"/list/index.html"}],"posts":[{"title":"斐讯K2 22.4.6.3版 后台页面直刷breed【此版本已经不能降级了】","text":"准备工作 可以审查元素的浏览器（chrome firefox 360 等等） 路由器wan口有网线，且有网 确定自己的路由器固件版本是22.4.6.3 具体方法 进入路由器后台管理页面 点击右上角重启按钮，选择定时重启 展开下拉列表 把鼠标移到05处，并右击选择查看元素（千万不要点击05，浏览器不同“查看元素”可能叫法不一样） 找到05在代码中的位置以后，将”05”修改成为”05 | wget http://breed.hackpascal.net/breed-mt7620-phicomm-psg1208.bin&quot; 之后，鼠标移动到黑框外的空白处点击鼠标左键，结束编辑。 然后，在定时处选择05，点击保存。 重复第2步–第6步，在第5步将”05”修改成”05 | mtd unlock Bootloader” 重复第2步–第6步，在第5步将“05”修改成“05 | mtd -r write breed-mt7620-phicomm-psg1208.bin Bootloader”，点击保存后路由器会重启，如果没有请检查前面的步骤。 拔除K2上Wan口的网线，路由器断电，持续按住路由器上的reset按钮，接通路由器电源，3秒后松开reset按钮。 在浏览器中输入192.168.1.1即可进入breed控制台","link":"/2017/01/30/2017-01-30/"},{"title":"斐讯K2具体刷机方法及固件分享","text":"刷机准备 已经成功刷入breed控制台，没有刷的看这里，点击这里 事先下载好要刷的固件，因为进breed刷机时候是没网的 刷机方法 进breed控制台，具体方法：拔掉wan口网线–路由器断电3秒或以上–按住复位键不松手–接通电源–等待5秒后松开复位键–在浏览器输入192.168.1.1（注：进入breed后路由器的灯可能变色莫慌正常） 点击固件更新–选择固件，点击刷入即可。 插上wan口网线，进入固件后台设置相关事项 固件分享多拨+翻墙K2 潘多拉固件R4.4定制版 智能QOS+去广告+智能SS+智能多拨 byLean(本人学校实测20m联通宽度最多可以5拨网速达到100m而且很稳定，宽带多拨主要是看人品QAQ) 下载地址：https://pan.baidu.com/s/1eRGvnrk 密码: q72j 原帖地址：http://www.right.com.cn/forum/thread-198473-1-1.html 多拨pandorabox【已更新】2017年1月3日稳定版 下载地址：http://downloads.pandorabox.com.cn/pandorabox-16-10-stable/targets/ralink/mt7620/PandoraBox-ralink-mt7620-phicomm-k2-2017-01-03-git-6c24a7a-squashfs-sysupgrade.bin 原帖地址：http://www.right.com.cn/forum/thread-197786-1-1.html 翻墙改华硕[N14U N54U]5G 2G的7620老毛子Padavan固件 下载地址：https://eyun.baidu.com/s/3kV0JV19 原帖地址：http://www.right.com.cn/forum/thread-161324-1-1.html 官方去后门K2-22.4.5.39 精简版、加入 ADBYBY 下载地址：http://pan.baidu.com/s/1jIBEoAi 原帖地址：http://www.right.com.cn/forum/thread-199506-1-1.html","link":"/2017/02/11/2017-02-11/"},{"title":"不用软件查看网页星号密码方法","text":"现在的浏览器基本都有保存密码的功能，久而久之我们便忘了密码了。可是有的时候需要在另外的设备登陆这些服务就必须知道密码，我们只能看的那些*干着急，然后直接改密码。有什么方法可以查看星号密码呢？下面我教大家一种不用软件直接在网页上查看密码的方法。 其实，就是很简单的前端知识而已，原理就是更改input标签type值，把原来的password值改成text就OK了！ 第一步我们以哔哩哔哩为例，当然这不是我的密码，呵呵！ 第二步我使用的是chrome浏览器，推荐大家使用chrome或者火狐。首先，按F12进入开发者模式。点击寻找元素按钮（上图红框） 第三步选中密码这个元素并点击，在右侧代码区找到相对应的代码（红框区），找到type值 第四步把type值“password”替换为“text”回车确认，这时候你就会发现，星号密码就变成明文了。 说明","link":"/2017/04/27/2017-04-27/"},{"title":"【教程】浏览器插件+IDM 实现破解百度云限速---至04.28依然有效","text":"适用浏览器此插件适用与所有chrome内核的浏览器，但是依然推荐大家使用chrome浏览器。 IDM去哪下载看我以前的博文，里面有。http://www.blogwy.com/70.html 怎么使用把crx后缀的插件拖入chrome浏览器的扩展程序界面就安装好了，在浏览器地址栏输入：chrome://extensions/ 即可进入扩展程序界面。安装好重启浏览器，进入百度云随便下载一个文件自动启动IDM满速下载！！！ 下载链接: http://pan.baidu.com/s/1bPxbjw 密码: i89e","link":"/2017/04/28/2017-04-28/"},{"title":"npm 常用命令","text":"npm install moduleNames：安装Node模块 npm install moduleNames –save：安装Node模块并添加依赖（写入到package.json）会在当前目录下安装包，版本信息也会添加到依赖中，会安装到dependencies选项中 npm install moduleNames –save-dev 开发阶段使用的依赖包，会安装到devDependencies选项中 npm install moduleNames -g 全局安装 npm list：查看当前目录下已安装的node包 npm list moduleNames: 查看模块版本 npm update moduleName：更新node模块 npm uninstall moudleName：卸载node模块 npm init: 初始化 npm ls: 查看所有模块 初始化工程后会生成package.json 12345678910111213141516{ &quot;name&quot;: &quot;npm&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;description&quot;: &quot;&quot;, &quot;main&quot;: &quot;index.js&quot;,//入口文件 &quot;dependencies&quot;: { //项目依赖包 &quot;_jquery@3.2.1@jquery&quot;: &quot;^3.2.1&quot;, &quot;jquery&quot;: &quot;^3.2.1&quot; }, &quot;devDependencies&quot;: {},//开发阶段依赖的包 &quot;scripts&quot;: { //命令 &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot; }, &quot;author&quot;: &quot;&quot;, &quot;license&quot;: &quot;ISC&quot;}","link":"/2017/09/15/2017-09-15/"},{"title":"[转]常见的三大加密算法介绍","text":"加密，是以某种特殊的算法改变原有的信息数据，使得未授权的用户即使获得了已加密的信息，但因不知解密的方法，仍然无法了解信息的内容。加密建立在对信息进行数学编码和解码的基础上。加密类型分为两种，对称加密与非对称加密，对称加密双方采用共同密钥，（当然这个密钥是需要对外保密的），这里讲一下非对称加密，这种加密方式存在两个密钥，密钥– 一种是公共密钥（正如其名，这是一个可以公开的密钥值），一种是私人密钥（对外保密）。 您发送信息给我们时，使用公共密钥加密信息。 一旦我们收到您的加密信息，我们则使用私人密钥破译信息密码（被我们的公钥加密的信息，只有我们的唯一的私钥可以解密，这样，就在技术上保证了这封信只有我们才能解读——因为别人没有我们的私钥）。 使用私人密钥加密的信息只能使用公共密钥解密（这一功能应用与数字签名领域，我的私钥加密的数据，只有我的公钥可以解读，具体内容参考数字签名的信息）反之亦然，以确保您的信息安全。 MD5MD5的全称是Message-Digest Algorithm 5，在90年代初由MIT的计算机科学实验室和RSA Data Security Inc发明，经MD2、MD3和MD4发展而来。MD5将任意长度的“字节串”变换成一个128bit的大整数，并且它是一个不可逆的字符串变换算法，换句话说就是，即使你看到源程序和算法描述，也无法将一个MD5的值变换回原始的字符串，从数学原理上说，是因为原始的字符串有无穷多个，这有点象不存在反函数的数学函数。 MD5的典型应用是对一段Message(字节串)产生fingerprint(指纹)，以防止被“篡改”。举个例子，你将一段话写在一个叫 readme.txt文件中，并对这个readme.txt产生一个MD5的值并记录在案，然后你可以传播这个文件给别人，别人如果修改了文件中的任何内容，你对这个文件重新计算MD5时就会发现。如果再有一个第三方的认证机构，用MD5还可以防止文件作者的“抵赖”，这就是所谓的数字签名应用。 MD5还广泛用于加密和解密技术上，在很多操作系统中，用户的密码是以MD5值（或类似的其它算法）的方式保存的， 用户Login的时候，系统是把用户输入的密码计算成MD5值，然后再去和系统中保存的MD5值进行比较，而系统并不“知道”用户的密码是什么。在一些初始化处理后，MD5以512位分组来处理输入文本，每一分组又划分为16个32位子分组。算法的输出由四个32位分组组成，将它们级联形成一个128位散列值。 首先填充消息使其长度恰好为一个比512位的倍数仅小64位的数。填充方法是附一个1在消息后面，后接所要求的多个0，然后在其后附上64位的消息长度（填充前）。这两步的作用是使消息长度恰好是512位的整数倍（算法的其余部分要求如此），同时确保不同的消息在填充后不相同。四个32位变量初始化为：A=0x01234567B=0x89abcdefC=0xfedcba98D=0x76543210它们称为链接变量（chainingvariable）接着进行算法的主循环，循环的次数是消息中512位消息分组的数目。将上面四个变量复制到别外的变量中：A到a，B到b，C到c，D到d。主循环有四轮（MD4只有三轮），每轮很相拟。第一轮进行16次操作。每次操作对a，b，c和d中的其中三个作一次非线性函数运算，然后将所得结果加上第四个变量，文本的一个子分组和一个常数。再将所得结果向右环移一个不定的数，并加上a，b，c或d中之一。最后用该结果取代a，b，c或d中之一。以一下是每次操作中用到的四个非线性函数（每轮一个）。F(X,Y,Z)=(X&amp;Y)|((X)&amp;Z)G(X,Y,Z)=(X&amp;Z)|(Y&amp;(Z))H(X,Y,Z)=X^Y^ZI(X,Y,Z)=Y^(X|(Z))(&amp;是与,|是或,是非,^是异或)这些函数是这样设计的：如果X、Y和Z的对应位是独立和均匀的，那么结果的每一位也应是独立和均匀的。函数F是按逐位方式操作：如果X，那么Y，否则Z。函数H是逐位奇偶操作符。设Mj表示消息的第j个子分组（从0到15），&lt;&lt;&lt;s表示循环左移s位，则四种操作为：FF(a,b,c,d,Mj,s,ti)表示a=b+((a+(F(b,c,d)+Mj+ti)&lt;&lt;&lt;s)GG(a,b,c,d,Mj,s,ti)表示a=b+((a+(G(b,c,d)+Mj+ti)&lt;&lt;&lt;s)HH(a,b,c,d,Mj,s,ti)表示a=b+((a+(H(b,c,d)+Mj+ti)&lt;&lt;&lt;s)II(a,b,c,d,Mj,s,ti)表示a=b+((a+(I(b,c,d)+Mj+ti)&lt;&lt;&lt;s)这四轮（64步）是：第一轮FF(a,b,c,d,M0,7,0xd76aa478)FF(d,a,b,c,M1,12,0xe8c7b756)FF(c,d,a,b,M2,17,0x242070db)FF(b,c,d,a,M3,22,0xc1bdceee)FF(a,b,c,d,M4,7,0xf57c0faf)FF(d,a,b,c,M5,12,0x4787c62a)FF(c,d,a,b,M6,17,0xa8304613)FF(b,c,d,a,M7,22,0xfd469501)FF(a,b,c,d,M8,7,0x698098d8)FF(d,a,b,c,M9,12,0x8b44f7af)FF(c,d,a,b,M10,17,0xffff5bb1)FF(b,c,d,a,M11,22,0x895cd7be)FF(a,b,c,d,M12,7,0x6b901122)FF(d,a,b,c,M13,12,0xfd987193)FF(c,d,a,b,M14,17,0xa679438e)FF(b,c,d,a,M15,22,0x49b40821)第二轮GG(a,b,c,d,M1,5,0xf61e2562)GG(d,a,b,c,M6,9,0xc040b340)GG(c,d,a,b,M11,14,0x265e5a51)GG(b,c,d,a,M0,20,0xe9b6c7aa)GG(a,b,c,d,M5,5,0xd62f105d)GG(d,a,b,c,M10,9,0x02441453)GG(c,d,a,b,M15,14,0xd8a1e681)GG(b,c,d,a,M4,20,0xe7d3fbc8)GG(a,b,c,d,M9,5,0x21e1cde6)GG(d,a,b,c,M14,9,0xc33707d6)GG(c,d,a,b,M3,14,0xf4d50d87)GG(b,c,d,a,M8,20,0x455a14ed)GG(a,b,c,d,M13,5,0xa9e3e905)GG(d,a,b,c,M2,9,0xfcefa3f8)GG(c,d,a,b,M7,14,0x676f02d9)GG(b,c,d,a,M12,20,0x8d2a4c8a)第三轮HH(a,b,c,d,M5,4,0xfffa3942)HH(d,a,b,c,M8,11,0x8771f681)HH(c,d,a,b,M11,16,0x6d9d6122)HH(b,c,d,a,M14,23,0xfde5380c)HH(a,b,c,d,M1,4,0xa4beea44)HH(d,a,b,c,M4,11,0x4bdecfa9)HH(c,d,a,b,M7,16,0xf6bb4b60)HH(b,c,d,a,M10,23,0xbebfbc70)HH(a,b,c,d,M13,4,0x289b7ec6)HH(d,a,b,c,M0,11,0xeaa127fa)HH(c,d,a,b,M3,16,0xd4ef3085)HH(b,c,d,a,M6,23,0x04881d05)HH(a,b,c,d,M9,4,0xd9d4d039)HH(d,a,b,c,M12,11,0xe6db99e5)HH(c,d,a,b,M15,16,0x1fa27cf8)HH(b,c,d,a,M2,23,0xc4ac5665)第四轮II(a,b,c,d,M0,6,0xf4292244)II(d,a,b,c,M7,10,0x432aff97)II(c,d,a,b,M14,15,0xab9423a7)II(b,c,d,a,M5,21,0xfc93a039)II(a,b,c,d,M12,6,0x655b59c3)II(d,a,b,c,M3,10,0x8f0ccc92)II(c,d,a,b,M10,15,0xffeff47d)II(b,c,d,a,M1,21,0x85845dd1)II(a,b,c,d,M8,6,0x6fa87e4f)II(d,a,b,c,M15,10,0xfe2ce6e0)II(c,d,a,b,M6,15,0xa3014314)II(b,c,d,a,M13,21,0x4e0811a1)II(a,b,c,d,M4,6,0xf7537e82)II(d,a,b,c,M11,10,0xbd3af235)II(c,d,a,b,M2,15,0x2ad7d2bb)II(b,c,d,a,M9,21,0xeb86d391)常数ti可以如下选择：在第i步中，ti是4294967296*abs(sin(i))的整数部分,i的单位是弧度。(2的32次方)所有这些完成之后，将A，B，C，D分别加上a，b，c，d。然后用下一分组数据继续运行算法，最后的输出是A，B，C和D的级联。MD5的安全性&lt;/s)&lt;/s)&lt;/s)&lt;/s)&lt;/s表示循环左移s位，则四种操作为：MD5相对MD4所作的改进：1.增加了第四轮.2.每一步均有唯一的加法常数.3.为减弱第二轮中函数G的对称性从(X&amp;Y)|(X&amp;Z)|(Y&amp;Z)变为(X&amp;Z)|(Y&amp;(~Z))4.第一步加上了上一步的结果,这将引起更快的雪崩效应.5.改变了第二轮和第三轮中访问消息子分组的次序,使其更不相似.6.近似优化了每一轮中的循环左移位移量以实现更快的雪崩效应.各轮的位移量互不相同.2.加密算法之DES算法 DES算法美国国家标准局1973年开始研究除国防部外的其它部门的计算机系统的数据加密标准，于1973年5月15日和1974年8月27日先后两次向公众发出了征求加密算法的公告。加密算法要达到的目的（通常称为DES密码算法要求）主要为以下四点：☆提供高质量的数据保护，防止数据未经授权的泄露和未被察觉的修改； ☆具有相当高的复杂性，使得破译的开销超过可能获得的利益，同时又要便于理解和掌握； ☆DES密码体制的安全性应该不依赖于算法的保密，其安全性仅以加密密钥的保密为基础； ☆实现经济，运行有效，并且适用于多种完全不同的应用。 1977年1月，美国政府颁布：采纳IBM公司设计的方案作为非机密数据的正式数据加密标准（DES?DataEncryptionStandard）。 目前在国内，随着三金工程尤其是金卡工程的启动，DES算法在POS、ATM、磁卡及智能卡（IC卡）、加油站、高速公路收费站等领域被广泛应用，以此来实现关键数据的保密，如信用卡持卡人的PIN的加密传输，IC卡与POS间的双向认证、金融交易数据包的MAC校验等，均用到DES算法。DES算法的入口参数有三个：Key、Data、Mode。其中Key为8个字节共64位，是DES算法的工作密钥；Data也为8个字节64位，是要被加密或被解密的数据；Mode为DES的工作方式，有两种：加密或解密。DES算法是这样工作的：如Mode为加密，则用Key去把数据Data进行加密，生成Data的密码形式（64位）作为DES的输出结果；如Mode为解密，则用Key去把密码形式的数据Data解密，还原为Data的明码形式（64位）作为DES的输出结果。在通信网络的两端，双方约定一致的Key，在通信的源点用Key对核心数据进行DES加密，然后以密码形式在公共通信网（如电话网）中传输到通信网络的终点，数据到达目的地后，用同样的Key对密码数据进行解密，便再现了明码形式的核心数据。这样，便保证了核心数据（如PIN、MAC等）在公共通信网中传输的安全性和可靠性。通过定期在通信网络的源端和目的端同时改用新的Key，便能更进一步提高数据的保密性，这正是现在金融交易网络的流行做法。DES算法详述DES算法把64位的明文输入块变为64位的密文输出块，它所使用的密钥也是64位，整个算法的主流程图如下：其功能是把输入的64位数据块按位重新组合，并把输出分为L0、R0两部分，每部分各长32位，其置换规则见下表：58,50,12,34,26,18,10,2,60,52,44,36,28,20,12,4,62,54,46,38,30,22,14,6,64,56,48,40,32,24,16,8,57,49,41,33,25,17,9,1,59,51,43,35,27,19,11,3,61,53,45,37,29,21,13,5,63,55,47,39,31,23,15,7,即将输入的第58位换到第一位，第50位换到第2位，…，依此类推，最后一位是原来的第7位。L0、R0则是换位输出后的两部分，L0是输出的左32位，R0是右32位，例：设置换前的输入值为D1D2D3……D64，则经过初始置换后的结果为：L0=D58D50…D8；R0=D57D49…D7。经过16次迭代运算后。得到L16、R16，将此作为输入，进行逆置换，即得到密文输出。逆置换正好是初始置的逆运算，例如，第1位经过初始置换后，处于第40位，而通过逆置换，又将第40位换回到第1位，其逆置换规则如下表所示：40,8,48,16,56,24,64,32,39,7,47,15,55,23,63,31,38,6,46,14,54,22,62,30,37,5,45,13,53,21,61,29,36,4,44,12,52,20,60,28,35,3,43,11,51,19,59,27,34,2,42,10,50,18,5826,33,1,41,9,49,17,57,25,放大换位表32,1,2,3,4,5,4,5,6,7,8,9,8,9,10,11,12,13,12,13,14,15,16,17,16,17,18,19,20,21,20,21,22,23,24,25,24,25,26,27,28,29,28,29,30,31,32,1,单纯换位表16,7,20,21,29,12,28,17,1,15,23,26,5,18,31,10,2,8,24,14,32,27,3,9,19,13,30,6,22,11,4,25,在f(Ri,Ki)算法描述图中，S1,S2…S8为选择函数，其功能是把6bit数据变为4bit数据。下面给出选择函数Si(i=1,2……的功能表：选择函数SiS1:14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7,0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8,4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0,15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13,S2:15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10,3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5,0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15,13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9,S3:10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8,13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1,13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7,1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12,S4:7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15,13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9,10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4,3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14,S5:2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9,14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6,4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14,11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3,S6:12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11,10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8,9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6,4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13,S7:4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1,13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6,1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2,6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12,S8:13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7,1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2,7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8,2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11,在此以S1为例说明其功能，我们可以看到：在S1中，共有4行数据，命名为0，1、2、3行；每行有16列，命名为0、1、2、3，……，14、15列。现设输入为：D＝D1D2D3D4D5D6令：列＝D2D3D4D5行＝D1D6然后在S1表中查得对应的数，以4位二进制表示，此即为选择函数S1的输出。下面给出子密钥Ki(48bit)的生成算法从子密钥Ki的生成算法描述图中我们可以看到：初始Key值为64位，但DES算法规定，其中第8、16、……64位是奇偶校验位，不参与DES运算。故Key实际可用位数便只有56位。即：经过缩小选择换位表1的变换后，Key的位数由64位变成了56位，此56位分为C0、D0两部分，各28位，然后分别进行第1次循环左移，得到C1、D1，将C1（28位）、D1（28位）合并得到56位，再经过缩小选择换位2，从而便得到了密钥K0（48位）。依此类推，便可得到K1、K2、……、K15，不过需要注意的是，16次循环左移对应的左移位数要依据下述规则进行：循环左移位数1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1以上介绍了DES算法的加密过程。DES算法的解密过程是一样的，区别仅仅在于第一次迭代时用子密钥K15，第二次K14、……，最后一次用K0，算法本身并没有任何变化。 二、DES算法理论图解 DES的算法是对称的，既可用于加密又可用于解密。下图是它的算法粗框图。其具体运算过程有如下七步。＜缺：找到补上＞ 三、DES算法的应用误区 DES算法具有极高安全性，到目前为止，除了用穷举搜索法对DES算法进行攻击外，还没有发现更有效的办法。而56位长的密钥的穷举空间为256，这意味着如果一台计算机的速度是每一秒种检测一百万个密钥，则它搜索完全部密钥就需要将近2285年的时间，可见，这是难以实现的，当然，随着科学技术的发展，当出现超高速计算机后，我们可考虑把DES密钥的长度再增长一些，以此来达到更高的保密程度。由上述DES算法介绍我们可以看到：DES算法中只用到64位密钥中的其中56位，而第8、16、24、……64位8个位并未参与DES运算，这一点，向我们提出了一个应用上的要求，即DES的安全性是基于除了8，16，24，……64位外的其余56位的组合变化256才得以保证的。因此，在实际应用中，我们应避开使用第8，16，24，……64位作为有效数据位，而使用其它的56位作为有效数据位，才能保证DES算法安全可靠地发挥作用。如果不了解这一点，把密钥Key的8，16，24，……64位作为有效数据使用，将不能保证DES加密数据的安全性，对运用DES来达到保密作用的系统产生数据被破译的危险，这正是DES算法在应用上的误区，留下了被人攻击、被人破译的极大隐患。 3.加密算法之RSA算法 它是第一个既能用于数据加密也能用于数字签名的算法。它易于理解和操作，也很流行。算法的名字以发明者的名字命名：RonRivest,AdiShamir和LeonardAdleman。但RSA的安全性一直未能得到理论上的证明。它经历了各种攻击，至今未被完全攻破。 RSA算法首先,找出三个数,p,q,r,其中p,q是两个相异的质数,r是与(p-1)(q-1)互质的数……p,q,r这三个数便是privatekey 接著,找出m,使得rm==1mod(p-1)(q-1)…..这个m一定存在,因为r与(p-1)(q-1)互质,用辗转相除法就可以得到了…..再来,计算n=pq…….m,n这两个数便是publickey 编码过程是,若资料为a,将其看成是一个大整数,假设a&lt;n….如果a&gt;=n的话,就将a表成s进位(s&lt;=n,通常取s=2^t),则每一位数均小於n,然後分段编码……接下来,计算b==a^mmodn,(0&lt;=b&lt;n),b就是编码後的资料……&lt;/n),&lt;/n….解码的过程是,计算c==b^rmodpq(0&lt;=c&lt;pq),於是乎,解码完毕……等会会证明c和a其实是相等的&lt;/pq),如果第三者进行窃听时,他会得到几个数:m,n(=pq),b……他如果要解码的话,必须想办法得到r……所以,他必须先对n作质因数分解………要防止他分解,最有效的方法是找两个非常的大质数p,q,使第三者作因数分解时发生困难……… &lt;定理&gt;若p,q是相异质数,rm==1mod(p-1)(q-1),a是任意一个正整数,b==a^mmodpq,c==b^rmodpq,则c==amodpq 证明的过程,会用到费马小定理,叙述如下:m是任一质数,n是任一整数,则n^m==nmodm(换另一句话说,如果n和m互质,则n^(m-1)==1modm)运用一些基本的群论的知识,就可以很容易地证出费马小定理的…….. &lt;证明&gt;因为rm==1mod(p-1)(q-1),所以rm=k(p-1)(q-1)+1,其中k是整数因为在modulo中是preserve乘法的(x==ymodzandu==vmodz=&gt;xu==yvmodz),所以,c==b^r==(a^m)^r==a^(rm)==a^(k(p-1)(q-1)+1)modpq 1.如果a不是p的倍数,也不是q的倍数时,则a^(p-1)==1modp(费马小定理)=&gt;a^(k(p-1)(q-1))==1modpa^(q-1)==1modq(费马小定理)=&gt;a^(k(p-1)(q-1))==1modq所以p,q均能整除a^(k(p-1)(q-1))-1=&gt;pq|a^(k(p-1)(q-1))-1即a^(k(p-1)(q-1))==1modpq=&gt;c==a^(k(p-1)(q-1)+1)==amodpq 2.如果a是p的倍数,但不是q的倍数时,则a^(q-1)==1modq(费马小定理)=&gt;a^(k(p-1)(q-1))==1modq=&gt;c==a^(k(p-1)(q-1)+1)==amodq=&gt;q|c-a因p|a=&gt;c==a^(k(p-1)(q-1)+1)==0modp=&gt;p|c-a所以,pq|c-a=&gt;c==amodpq 3.如果a是q的倍数,但不是p的倍数时,证明同上 4.如果a同时是p和q的倍数时,则pq|a=&gt;c==a^(k(p-1)(q-1)+1)==0modpq=&gt;pq|c-a=&gt;c==amodpqQ.E.D. 这个定理说明a经过编码为b再经过解码为c时,a==cmodn(n=pq)….但我们在做编码解码时,限制0&lt;=a&lt;n,0&lt;=c&lt;n,所以这就是说a等於c,所以这个过程确实能做到编码解码的功能…..&lt;/n,0&lt;=c&lt;n,二、RSA的安全性 RSA的安全性依赖于大数分解，但是否等同于大数分解一直未能得到理论上的证明，因为没有证明破解RSA就一定需要作大数分解。假设存在一种无须分解大数的算法，那它肯定可以修改成为大数分解算法。目前，RSA的一些变种算法已被证明等价于大数分解。不管怎样，分解n是最显然的攻击方法。现在，人们已能分解多个十进制位的大素数。因此，模数n必须选大一些，因具体适用情况而定。 三、RSA的速度 由于进行的都是大数计算，使得RSA最快的情况也比DES慢上倍，无论是软件还是硬件实现。速度一直是RSA的缺陷。一般来说只用于少量数据加密。 四、RSA的选择密文攻击 RSA在选择密文攻击面前很脆弱。一般攻击者是将某一信息作一下伪装(Blind)，让拥有私钥的实体签署。然后，经过计算就可得到它所想要的信息。实际上，攻击利用的都是同一个弱点，即存在这样一个事实：乘幂保留了输入的乘法结构： (XM)^d=X^d*M^dmodn 前面已经提到，这个固有的问题来自于公钥密码系统的最有用的特征–每个人都能使用公钥。但从算法上无法解决这一问题，主要措施有两条：一条是采用好的公钥协议，保证工作过程中实体不对其他实体任意产生的信息解密，不对自己一无所知的信息签名；另一条是决不对陌生人送来的随机文档签名，签名时首先使用One-WayHashFunction对文档作HASH处理，或同时使用不同的签名算法。在中提到了几种不同类型的攻击方法。 五、RSA的公共模数攻击 若系统中共有一个模数，只是不同的人拥有不同的e和d，系统将是危险的。最普遍的情况是同一信息用不同的公钥加密，这些公钥共模而且互质，那末该信息无需私钥就可得到恢复。设P为信息明文，两个加密密钥为e1和e2，公共模数是n，则： C1=P^e1modn C2=P^e2modn 密码分析者知道n、e1、e2、C1和C2，就能得到P。 因为e1和e2互质，故用Euclidean算法能找到r和s，满足： re1+se2=1 假设r为负数，需再用Euclidean算法计算C1^(-1)，则 (C1^(-1))^(-r)*C2^s=Pmodn 另外，还有其它几种利用公共模数攻击的方法。总之，如果知道给定模数的一对e和d，一是有利于攻击者分解模数，一是有利于攻击者计算出其它成对的e’和d’，而无需分解模数。解决办法只有一个，那就是不要共享模数n。 RSA的小指数攻击。有一种提高RSA速度的建议是使公钥e取较小的值，这样会使加密变得易于实现，速度有所提高。但这样作是不安全的，对付办法就是e和d都取较大的值。 RSA算法是第一个能同时用于加密和数字签名的算法，也易于理解和操作。RSA是被研究得最广泛的公钥算法，从提出到现在已近二十年，经历了各种攻击的考验，逐渐为人们接受，普遍认为是目前最优秀的公钥方案之一。RSA的安全性依赖于大数的因子分解，但并没有从理论上证明破译RSA的难度与大数分解难度等价。即RSA的重大缺陷是无法从理论上把握它的保密性能如何，而且密码学界多数人士倾向于因子分解不是NPC问题。RSA的缺点主要有：A)产生密钥很麻烦，受到素数产生技术的限制，因而难以做到一次一密。B)分组长度太大，为保证安全性，n至少也要600bits以上，使运算代价很高，尤其是速度较慢，较对称密码算法慢几个数量级；且随着大数分解技术的发展，这个长度还在增加，不利于数据格式的标准化。目前，SET(SecureElectronicTransaction)协议中要求CA采用比特长的密钥，其他实体使用比特的密钥。","link":"/2017/09/17/2017-09-17/"},{"title":"WDCP安装 备份&#x2F;恢复网站 配置SSL加密协议 经验分享","text":"我原来服务器用的是WDCP 2.x版本，遇到一个很棘手的问题，一直解决不了。然后我就准备有时间重装一下WDCP，正好WDCP更新到了3.2 支持免费SSL，居然是一键创建。没有比这更简单的事情了！虽然我原来用的是阿里云的免费SSL证书，但是配置起来还是没一键配置来的快啊！ 重装服务器我原来用的是centos 6.5 64bit ，现在重装成 7.2 64bit。在阿里云ecs实例点击–更多–更换系统盘（必须先停止服务器才可以点击）然后选择系统就OK了。 安装WDCP 3.2源码安装(ssh登录服务器,执行如下操作即可,需root用户身份安装) 12345wget http://dl.wdlinux.cn/lanmp_laster.tar.gztar zxvf lanmp_laster.tar.gzsh lanmp.sh 注意：服务器系统一定要纯净的，会提示装的具体环境服务，按自己的需求安装，不知道的话选all 安装完后,默认的后台管理地址如下http://ip:8080用户名:admin 默认密码:wdlinux.cnmysql默认的管理用户名:root 默认密码:wdlinux.cn 如果有其他问题请上wdcp论坛：http://www.wdlinux.cn/bbs/index.php 备份/恢复 网站和数据库备份先说说备份吧，在备份数据库时候强烈推荐在wdcp后台备份一遍，然后在phpmyadmin后台也备份一遍。因为我在恢复数据库时候出现了用在wdcp后台gz格式备份文件恢复失败的情况。然后用在phpmyadmin后台备份的sql文件恢复成功。 wdcp后台备份数据库点击 mysql管理–数据库列表 选项，然后在相应数据库哪项点击备份 phpmyadmin后台备份数据库 点击 mysql管理–phpmyadmin ，然后输入相应的数据库用户名密码登录 点击自定义–选择 添加 DROP TABLE 确保导出sql格式，点击执行 备份网站文件在网站列表选项，点击相应网站哪一项的备份选项。备份文件在/www/backup/ 恢复网站文件恢复事先建立好网站，然后把上一步备份的网站文件解压到具体目录。（很简单，不具体说了） 数据库恢复建立空数据库，然后在phpmyadmin界面点击导入sql文件即可。如果失败可以在wdcp面板试试。（也可以试试gz格式的数据文件，本人导入失败） 导入后如果出现数据库连接失败，可以尝试一下方法： 重启服务器，重启web服务 确定网站文件里面的数据库配置文件里面的数据库信息（数据库名 数据库用户名 密码）与现在恢复的数据库保存一样。 如果是wordpress，可以在phpmyadmin面板找到wp-options表 修复它。 如果是wordpress，在网站根目录找到wp-config.php文件，在里面加上下面这句：define(‘WP_ALLOW_REPAIR’, true); 配置SSL一键配置，简单的一逼！ 在你要配置的网站哪项，点击 C 。有时候会没反应，刷新一下，知道出现创建成功！ 注意： 1.这个创建要连接海外服务器，时间稍微会久一点，不同的线路带宽也会不一样 2.letsencrypt证书有效期为3个月，快到三个月时，再在后台点击创建一次就可以 3.确保服务器开放443端口，系统设置里面开通443，防火墙放行443","link":"/2017/09/19/2017-09-19/"},{"title":"博客绑定域名成功","text":"成功绑定域名wangyu.link,以后可以直接访问wangyu.link 购买一个域名 在你的博客项目文件夹source下面创建一个名字为 CHAME 的文件，没有后缀名都是大写。 打开这个文件，在里面写入你的域名，不带http://和www，也不要有任何所见换行空格。 hexo g hexo d 进入你的域名解析界面 添加两个记录类型为CNAME的记录，主机记录分别是www和@，记录值都是 你的github用户名.github.io 等待解析生效就好了。","link":"/2017/09/23/2017-09-23/"},{"title":"MUI - datepicker（时间选择器）","text":"html12&lt;button class=&quot;mui-btn&quot; onclick=&quot;showdate()&quot;&gt;显示日期&lt;/button&gt;&lt;button class=&quot;mui-btn&quot; onclick=&quot;showtime()&quot;&gt;显示时间&lt;/button&gt; js12345678910111213141516171819202122232425262728293031323334353637383940414243function showdate(){ var dDate = new Date(); dDate.setFullYear(2017,8,22); var minDate = new Date(); minDate.setFullYear(1990,0,1); var maxDate = new Date(); maxDate.setFullYear(2050,11,31); plus.nativeUI.pickDate( function(e){ var d = e.date; mui.toast('你选择的时间是：' + d.getFullYear() + '-' + (d.getMonth()+1) + '-' + d.getDate()); }, function(e){ mui.toast('没有选择'); }, { title : '请选择日期', date : dDate, minDate : minDate, maxDate : maxDate });}function showtime(){ var myDate = new Date(); var hou = myDate.getHours(); var minu = myDate.getMinutes(); var dTime = new Date(); dTime.setHours(hou,minu); plus.nativeUI.pickTime( function(e){ var d = e.date; mui.toast('您选择的时间是：'+d.getHours()+':'+d.getMinutes()); }, function(e){ mui.toast('没有选择') }, { title : '请选择时间', is24Hour : 'true', time : dTime } );} 注意1234plus.nativeUI.pickTime/pickDate(函数1,函数2，对象)函数1：成功（选择）后返回的结果函数2：失败（没有选择）后返回的结果对象：弹出的ui界面具体配置项","link":"/2017/09/25/2017-09-25/"},{"title":"[转]前端资源汇总(框架&#x2F;效果库&#x2F;插件&#x2F;网站&#x2F;工具&#x2F;素材等)","text":"JavaScript框架/库 velocity：很全面的JavaScript动画库 vivus：可以动态描绘 SVG 的 JS 库, 支持多种动画 Web Animation：Javascript 实现的 Web Animation API scrollReveal.js：使元素以非常酷帅的方式进入画布 (Viewpoint) snabbt.js：一个利用 Javascript 和 CSS transform 的 animation 库 transit：jquery实现的css动画 matter-js：2D 物理效果引擎，碰撞、弹跳等 parallax：一个用于响应智能手机 orientation 的库 focusable：是页面上一个元素高亮的库，关灯效果 sensor.js：在智能移动设备浏览器上，通过HTML5的api使用移动设备的功能。定位、运动、倾斜等 animatable：仅仅依靠 border-width 和 background-position 实现的各种动态效果 Bounce.js：漂亮的css3动画库 GreenSock：基于svg，很强大的动画效果，High-performance HTML5 animations that work in all major browsers. dynamics.js：弹性物理效果 slick：功能异常强大的一个图片滑动切换效果库 swipe：非常轻量级的一个图片滑动切换效果库, 性能良好, 尤其是对手机的支持, 压缩后的大小约 5kb swiper：用于实现浏览器上的滑动切换效果，支持硬件加速 Owl：多种图片轮播效果，多选项的 flickity：轮播图效果，左右有显示一半的图片 icheck：一款漂亮的 Checkbox 插件 iscroll：高性能的滚动(scroll)处理库，功能强大，支持各种事件，不依赖任何的库，且插件丰富, 大众点评的手机端列表滚动就是用这个库处理的 Slideout.js：一个非常美观的侧滑菜单 sweetalert：一个非常美观的用于替换浏览器默认 alert 的库 Sortable：现代浏览器上用于实现元素拖拽排序的功能，支持 Meteor, AngularJS, React，不依赖 jQuery echarts：百度图表 metrics-graphics：基于 D3 的图表库，简洁、高效，Mozilla 出品 c3：基于 D3 的图表库 Summernote：WYSIWYG 富文本编辑器 awesomplete：非常轻型的一个自动补全 JS 库, 没有任何依赖, 配置简单, 美观。 basket.js：基于 LocalStorage 的资源加载器，可以用来缓存 script 和 css, 手机端使用速度快于浏览器直接缓存 mobile-angular-ui：基于angularjs和bootstarp的web app开发框架 moment.js：轻量级的Javascript日期处理类库 Datatables：jquery表格插件，它是一个高度灵活的工具，可以将任何HTML表格添加高级的交互功能。 artDialog：经典的网页对话框组件 sliphover：不同方向的hover动画 js插件 jQuery全屏滚动插件fullPage.js演示 另一款实现一步滚动的开源库，使用人数众多，可实现各种狂拽酷炫掉渣天的前端效果 jQuery 的一个插件, 用于实现大背景(视频、图片)效果 页面上内嵌图片的放大缩小效果，类似于 Medium 中的效果 jQuery 倒计时插件 Spectrum：Js实现的颜色选择器 (Colorpicker) 简洁美观的进度条，扁平化 功能强大的图片延迟加载工具，可以首先加载一个低质量的图片，然后再加载高质量的图片 jQuery 的一个插件，可以用来实现瀑布流的效果 jQuery 插件，用来生成二维码 一个可以检测设备类型的工具，可以让我们根据不同的设备来为其定制响应的 Javascript 和 CSS 滚动加载，滚动到最下到自动加载， Paul Irish 大神之作 单页应用中一个用于处理导航栏的库 多种轮播图上下切换按钮效果 jQuery 插件，用于绑定热键 css框架/库 normalize.css：一个用于重置浏览器内置样式的库 type.css：中文网页重设与排版：一致化浏览器排版效果，构建最适合中文阅读的网页排版 网易nec：更好的css样式解决方案 Pure：雅虎出品样式框架，恩，可以阅读参考 Flat UI：Bootstrap 的一款主题，简洁美观 foundation：另一款前端模版框架，类似于 Bootstrap Animate.css：css动画效果 movejs：基于 CSS3 的前端动画框架 Hover.css：基于 CSS3 的各种 鼠标悬停(hover)特效 css3 generator：css3新特新介绍 three.js：3D动画效果库 singlediv：仅用一个div就画出图标 icono：一款用纯 CSS3 实现的图标库 css3lib：CSS3 UI 库，腾讯团队出品，多种css3特效库 最强9种css3圆形按钮hover鼠标经过动画效果 多种按钮悬停效果 load-awesome：很棒的一套loading效果 网站 caniuse：查看html5和css3浏览器的支持情况 html5test：测试浏览器对html5的支持情况 css3test：测试浏览器对css3的支持情况 libscore：统计网站和js使用排行 开源中国在线工具 在线工具，做最专业的工具网站 阿里测：网站性能测试分析 PageSpeed：谷歌家的网页性能工具 iTest：iTest爱测试前端测试服务，多浏览器测试 微信调试工具 百度字体编辑器 Awwwards：一家筛选评比互联网上最佳网站设计开发的网站 alloyteam：腾讯全端 AlloyTeam 团队 Blog awesome：awesome 汇总，github上超全面资源集合 awesome-resources 免费的编程中文书籍索引：Github上面的免费的计算机编程类中文书籍 谷歌的前端性能优化文章列表 Placeholders.js：为不支持的 HTML5 的浏览器提供 Placeholder 支持 相片或作品展示的一个模板，简单好看 免费的html5响应式模板 html5简洁的模板 bootstrap响应式模板，有好多款 黑白简洁的响应式模板","link":"/2017/09/28/2017-09-28/"},{"title":"哔哩哔哩分类数据api接口分享jsonp&#x2F;json","text":"最近正在做一个仿bilibili app的前端项目，用的是h5+，需要数据。所以就试着抓了一下bilibili的api，结果还真抓到了。现在分享出来给有用的人。 json: https://api.bilibili.com/archive_rank/getarchiverankbypartion?callback=jQuery17208614768484119808_1506153543997&amp;type=jsonp&amp;tid=95&amp;pn=1&amp;_=1506153545368 jsonp: https://api.bilibili.com/archive_rank/getarchiverankbypartion?jsonp=jsonp&amp;tid=124&amp;pn=1 tid=分类 95：数码 98：机械 122：技术 pn=1页数 具体所有分类tid请看下面，f12开发者模式","link":"/2017/10/04/2017-10-04/"},{"title":"网易云音乐的简单抓包过程，获取音乐的真实下载地址","text":"闲来无事，经常听用网易云听歌，然后就想抓一下真实下载地址。我是用chrome浏览器开发者模式抓包的。 用chrome浏览器打开网易云音乐首页http://music.163.com 按f12打开开发者模式，并切换至network 点击手机按钮，并刷新网页，网站就会从pc版变成web版 点击搜索，输入你想下载的歌曲并回车确定 在右边会出现一个url为get的网络请求（一开始我以为是请求，点开才发现是post） 点开preview里面就有搜索结果的详细数据，json格式（web版是上拉加载每次加载20个数据，每次加载一次都会有一次url为get的网络请求） 点击你想下载的歌曲，让它正常播放然后会出现一个名为url的网络请求 点开preview里面就有搜索结果的详细数据，里面就有真实的url下载地址","link":"/2017/10/05/2017-10-05/"},{"title":"利用浏览器抓包获取百度网盘真实下载链接","text":"注：至发文日此方法一直可用。获取到的下载链接可以复制到任意下载软件下载，推荐用idm等国外下载软件，实测迅雷速度不怎么样。不管是多大的文件都可以获取到！ 第一步打开浏览器，我用chrome做的演示，登录百度云 第二步按F12打开开发者模式，切换至network选项。选择你要下载的文件，点击下载。 第三步在右侧找到一个已download开头的url，找不到可以直接搜索。点击previve，展开数据，dlink:””,引号里面就是下载链接 第四步复制链接到迅雷可以下载","link":"/2017/10/21/2017-10-21/"},{"title":"mongodb下载 配置 可视化","text":"mongodb下载https://www.mongodb.com/download-center#community mongodb配置 在电脑磁盘下新建mongodb文件夹，建议在非系统盘下操作。然后在mongodb文件夹里面按照下面的结构建立相关目录和文件 123456–mongodb—-data——db—-log——mongodb.log–mongo.cfg 用编辑器打开mongo.cfg，写入下面两行 12dbpath=D:\\mongodb\\data\\dblogpath=D:\\mongodb\\log\\mongodb.log 已管理员的身份打开cmd，并进入mongodb的安装目录bin下 运行下面命令 1mongod --config D:\\mongodb\\mongo.config --install --serviceName &quot;MongoDB&quot; --journal 在bin目录下运行下面命令 1net start MongoDB mongodb可视化安装robo 3t，下载链接：https://robomongo.org/download","link":"/2017/11/02/2017-11-02/"},{"title":"2种方法解决网页被iframe调用的问题","text":"第一种是JS12345678910//改成你的域名，格式就是那种if (document.referrer.indexOf('www.blogwy.com')&gt;-1){ //内容可写可不写 自己具体情况具体分析 document.write('');}else{ //不是指定域名的，一律弹出一个对话框，然后跳转到百度。。也可以修改为自己的一个网页 alert('不要盗用！'); document.location='http://www.baidu.com';} 第二种是PHP123456789101112131415&lt;?phperror_reporting(0);//这里改写成上自己使用到这个播放页的域名，防止别人盗用$domain_list = array(&quot;localhost&quot;, &quot;www.blogwy.com&quot;);$referer = $_SERVER[&quot;HTTP_REFERER&quot;];$refererhost = parse_url($referer);$host = strtolower($refererhost['host']);if(in_array($host, $domain_list)) { //可修改为自己的代码 echo '允许访问';}else { //可修改为自己的代码 die ('拒绝访问');}?&gt;","link":"/2017/01/01/2017-01-01/"},{"title":"关于 can&#39;t set headers after they are sent 错误解析","text":"错误描述这个错误翻译过来是在headers发送过以后不能再次发送。意思是发送了两次headers，所以会报错。 然后通过我的不懈努力，终于找到了问题所在。 解析在处理HTTP请求时，服务器会先输出响应头，然后再输出主体内容，而一旦输出过一次响应头比如执行过 res.writeHead() 或 res.write() 或 res.end()，你再尝试通过 res.setHeader() 或 res.writeHead() 来设置响应头时，就会报这个错误。 有些方法比如 res.redirect() 会调用 res.writeHead() 说明：express中的 res.header() 相当于 res.writeHead() ，res.send() 相当于 res.write()","link":"/2017/11/24/2017-11-24/"},{"title":"node 图片验证码库","text":"验证码演示有库不用是傻逼，这个库有三组图片分别是red gray green ，其中red里面只是数字，不建议使用，剩下两个有字母和数字。 下面是一个老外写的例子，我就是直接参考它写的代码的。https://github.com/liangzeng/validat-num-demo 代码123456789101112var PW = require(&quot;png-word&quot;);var pw = PW(PW.GRAY); //这里可以选GRAY PNGWord REDvar r = require(&quot;random-word&quot;)(&quot;abcdefghijklmnopqrst0123456789&quot;);const validat = (req, res) =&gt; { var numtxt = req.session.validat_num = r.random(4); pw.createPNG(numtxt,function(pngnum){ res.send(pngnum); })}module.exports = validat 123456&lt;div class=&quot;remember&quot;&gt; &lt;label for=&quot;remember-me&quot;&gt; &lt;img src=&quot;/admin/validat&quot; /&gt; &lt;/label&gt; &lt;input name=&quot;validat&quot; type=&quot;text&quot; /&gt;&lt;/div&gt; 注意 需要 png-word random-word 这两个库 本人是在express下使用的，除了图片样式不咋地，贼好用 只是一个简单的数字加字母验证码，如果要反爬虫就直接用第三方验证码服务吧","link":"/2017/11/29/2017-11-29/"},{"title":"node.js爬虫练习 爬取数据存储到mongodb","text":"youkumovie(优酷电影目录) 本人的node.js爬虫练习，大神无视，一直更新，爬虫爬到数据存储到数据库中。数据库为mongodb。总共30页，每3秒爬一次，到目前为止亲测没有被封ip，本人第一次写爬虫，大家多多包涵！ 用到的库1234&quot;cheerio&quot;: &quot;^1.0.0-rc.2&quot;,&quot;mongodb&quot;: &quot;^2.2.33&quot;,&quot;request&quot;: &quot;^2.83.0&quot;,&quot;request-promise&quot;: &quot;^4.2.2&quot; 代码1234567891011121314151617181920212223242526272829303132333435363738let rp = require('request-promise');let cheerio = require('cheerio');let MongoClient = require('mongodb').MongoClient, assert = require('assert');// 测试爬虫let index = 1;function main(){ if (index &gt; 30){ clearInterval(timer); console.log(&quot;恭喜你，数据已经全部爬取完毕！&quot;) return; } rp('http://list.youku.com/category/show/c_96_s_1_d_1_p_' + index + '.html') .then(function (res) { // Process html... let $ = cheerio.load(res) let data = $('.title a').toArray() for (let i = 0; i &lt; data.length; i++) { let videotitle = $('.title a').eq(i).attr('title'); let videolink = 'http:' + $('.title a').eq(i).attr('href'); let videoimg = $('.p-thumb img').eq(i).attr('src'); let videostate = $('.status').eq(i).text(); let url = 'mongodb://localhost:27017/test'; MongoClient.connect(url, function(err, db) { db.collection('video').insertMany([{videotitle:videotitle},{videolink:videolink},{videoimg:videoimg},{videostate:videostate}]) }); console.log(videotitle + '--数据已插入') } }) .catch(function (err) { // Crawling failed... console.log(err) }); index++}var timer = setInterval(main, 3000);","link":"/2017/11/03/2017-11-03/"},{"title":"入门Vuex","text":"State获取State中的值的三种方法 直接在模板里面写 1&lt;p&gt;{{ $store.state.count }}&lt;/p&gt; 通过计算属性 12345computed: { count(){ return this.$store.state.count }} 通过mapstate 1computed: mapState(['count']) Mutations 直接写在模板里面(不传值) 1&lt;button @click=&quot;$store.commit('add')&quot;&gt;+&lt;/button&gt; 通过mapmutations(推荐,传值不传值都可以使用) 12345678const mutations = { add(state){ state.count++; }, reduce(state,n){ state.count-=n; }} 123methods: { ...mapMutations(['reduce','add'])} 12&lt;button @click=&quot;add()&quot;&gt;+&lt;/button&gt;&lt;button @click=&quot;reduce(5)&quot;&gt;-&lt;/button&gt; getters 一般写法 123const getters = { count : state =&gt; state.count+=100} 123456computed: { ...mapState(['count']), count(){ return this.$store.getters.count }} 简写 123const getters = { count : state =&gt; state.count+=100} 1234computed: { ...mapState(['count']), ...mapGetters(['count']) } actions123methods: { ...mapActions(['addAction','reduceAction'])} 12&lt;button @click=&quot;addAction&quot;&gt;+&lt;/button&gt;&lt;button @click=&quot;reduceAction&quot;&gt;-&lt;/button&gt; 123456789101112const actions = { addAction({commit}){ commit('add'); setTimeout(()=&gt;{commit('reduce',3)},2000); console.log('我比reduce提前执行'); }, reduceAction(context){ context.commit('reduce',5); setTimeout(()=&gt;{context.commit('add')},2000); console.log('我比reduce提前执行'); }}","link":"/2017/12/07/2017-12-07/"},{"title":"PHP学习 -- 全局变量和局部变量","text":"全局变量PHP的全局变量和JS里面的全局变量不一样，JS里面的全局变量是那都可以访问到，PHP里的全局变量只有函数内部访问不到 12345678&lt;?php$a = 1;function main(){ echo $a; // 错误，函数内部访问不到全局变量}?&gt; 局部变量只作用于函数里面 123456789&lt;?php$a = 1;function main(){ $b = 3; echo $b; // b是在函数内部定义，可以访问}?&gt; 超全局变量哪都可以访问 注：全局变量都储存在$GLOBALS下 通过$GLOBALS[‘变量名’]访问 局部作用域访问全局变量使用$GLOBALS来访问全局变量123456789&lt;?php$a = 1;function main(){ $b = 3; echo $b,$GLOBALS['a']; // 因为$GLOBALS是超全局变量，所有的全局变量都储存在$GLOBALS下面，所以可以访问}?&gt; 使用global关键字123456789$a = 1;function main(){ global $a; echo $a; $a = 5; // 修改的还是一个变量 修改后a = 5;}main();echo $a;// 运行结果为 1 5 原理：在函数内部和外部，对同一个变量名使用一块内存地址保存数据，从而实现共同拥有 如果外部（全局）存在同名变量，直接指向外部变量的内存地址。 如果外部（全局）没有则先创建全局同名变量，再指向。","link":"/2018/01/11/2018-01-11/"},{"title":"PHP学习 -- 数组相关的函数","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101&lt;?php// 数组相关的函数// 1. 排序函数$arr = array(3,2,9,6,4,1,0);echo '&lt;pre&gt;';sort($arr); // 按照值顺序排 不保留下标 重排// asort($arr); // 按照值顺序排 保留下标// ksort($arr); // 按照键顺序排// krsort($arr); // 按照键逆序排//shuffle($arr);print_r($arr);&lt;!-- more --&gt;shuffle($arr); // 随机排序print_r($arr);// 2. 指针函数echo '&lt;hr&gt;';$arr1 = array('wnagyu',15,'hui',5,9,3,1);echo current($arr1),'&lt;br&gt;'; // 查看当前指针echo key($arr1),'&lt;br&gt;'; // 查看当前keyecho next($arr1),next($arr1),'&lt;br&gt;'; // 移动指针到下一个echo prev($arr1),'&lt;br&gt;'; // 移动指针到上一个echo key($arr1),'&lt;br&gt;';echo '&lt;pre&gt;';print_r($arr1);echo '&lt;hr&gt;';echo end($arr1),'&lt;br&gt;'; // 重置指针 返回最后一个值echo reset($arr1),'&lt;br&gt;'; // 重置指针 返回第一个值// 3. 其他函数// array_push() 往数组中加入一个元素 （数组后面）// array_pop() 从数组中取出一个元素 （数组后面）// array_shift() 从数组中取出一个元素 （数组前面）// array_unshift() 往数组中加入一个元素 （数组前面）$arr2 = array('tg',5,'po',1,3,9,12,56);// 模拟数据结构// 栈 先进后出array_push($arr2,45);echo '&lt;pre&gt;';print_r($arr2);array_pop($arr2);echo '&lt;pre&gt;';print_r($arr2);// 队列 先进先出// array_push() 后进 array_shift() 先出// array_unshift() 前进 array_pop() 后出$arr3 = [1,3,6,9,15,8];echo '&lt;pre&gt;';print_r(array_reverse($arr3)); // 反转数组var_dump(in_array(1,$arr3)); // 查找值是否存在于数组中，返回true/falsevar_dump(in_array(123,$arr3));print_r(array_keys($arr3)); // 返回下标 数组print_r(array_values($arr3));// 返回值 数组","link":"/2018/01/12/2018-01-12/"},{"title":"PHP学习 -- 两种方法实现斐波那契数列","text":"什么是斐波那契数列斐波那契数列的定义者，是意大利数学家列昂纳多·斐波那契（Leonardo Fibonacci），生于公元1170年，卒于1250年，籍贯是比萨。他被人称作“比萨的列昂纳多”。1202年，他撰写了《算盘全书》（Liber Abacci）一书。他是第一个研究了印度和阿拉伯数学理论的欧洲人。他的父亲被比萨的一家商业团体聘任为外交领事，派驻地点相当于今日的阿尔及利亚地区，列昂纳多因此得以在一个阿拉伯老师的指导下研究数学。他还曾在埃及、叙利亚、希腊、西西里和普罗旺斯等地研究数学。 斐波那契数列指的是这样一个数列1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233，377，610，987，1597，2584，4181，6765，10946，17711，28657，46368…… 这个数列从第3项开始，每一项都等于前两项之和。 递推算法123456789function my_recursive($des){ if($des == 1 || $des == 2) return 1; $f[1] = 1; $f[2] = 1; for($i = 3;$i &lt;= $des;$i++){ $f[$i] = $f[$i-1] + $f[$i-2]; } return $f[$des];} 递归算法123456function recursive($n){ // 递归出口 if($n == 1 || $n == 2) return 1; // 递归点 return recursive($n-1) + recursive($n-2);}","link":"/2018/01/13/2018-01-13/"},{"title":"PHP学习 -- 数组排序算法","text":"本文涉及到 冒泡算法 选择排序 快速排序 归并排序 顺序查找 二分/折半查找lt;?php// 数组排序算法// 冒泡算法 两个数字比较 较大的数字放到右边$arr = array(9,5,6,1,89,6,6,1,2,3,6);for($j = 0,$len = count($arr);$j &lt; $len;$j++){for($i =0,$len =count($arr);$i &lt; $len-1-$j;$i++){if($arr[$i] &gt; $arr[$i+1]){$temp = $arr[$i];$arr[$i] = $arr[$i+1];$arr[$i+1] = $temp;}}}echo '&lt;pre&gt;';print_r($arr);echo '&lt;hr&gt;';// 选择排序$arr1 = array(5,6,2,3,1,0);for($i = 0,$len = count($arr1);$i &lt; $len;$i++){// 假定一个最小的$min = $i;// 用假定最小的和剩余其他的比较for($j = $i+1;$j &lt; $len;$j++){// 当前比较的元素 &lt; 假定的，把当前的下标赋值给minif($arr1[$j] &lt; $arr1[$min]){$min = $j;}}// 交换真正的最小值if($min != $i){$temp = $arr1[$i];$arr1[$i] = $arr1[$min];$arr1[$min] = $temp;}}echo '&lt;pre&gt;';print_r($arr);echo '&lt;hr&gt;';// 快速排序$arr2 = [5,6,1,2,3,0];function quick_sort($arr2){// 递归出口 数组长度&lt;=1时候就已经排好了$len = count($arr2);if($len &lt;=1) return $arr2;// 存放数组$left = $right = array();for($i =1;$i &lt; $len;$i++){// 一般情况下把第一个元素当作比较元素，比它小的放到left里面，大的放到right里面if($arr2[$i] &lt; $arr2[0]){$left[] = $arr2[$i];}else{$right[] = $arr2[$i];}}// 递归点$left = quick_sort($left);$right = quick_sort($right);returnarray_merge($left,array($arr2[0]),$right);}echo '&lt;pre&gt;';print_r(quick_sort($arr2));echo '&lt;hr&gt;';// 归并排序// 二路归并 必须是两个有序数组// $arr4 = [1,3,5];// $arr5 = [2,3];// // 创建一个空数组用于存放归并空间// $arr6 = array();// while (count($arr4) &amp;&amp; count($arr5)) {// $arr6[] = $arr4[0] &lt; $arr5[0] ? array_shift($arr4) : array_shift($arr5);// }// print_r(array_merge($arr6,$arr4,$arr5));$arr3 = [5,1,3,9,0];function merge_sort($arr){// 递归出口 数组长度&lt;=1时候就已经排好了$len = count($arr);if($len &lt;=1) return $arr;// 拆分$middle = floor($len/2);$left = array_slice($arr,0,$middle);$right = array_slice($arr,$middle);// 递归点，保证left和right为有序数组$left = merge_sort($left);$right = merge_sort($right);$m = array();while (count($left) &amp;&amp;count($right)) {// 只要left right里面有元素，就进入循环// 取出left right里面的第一个元素进行比较 哪个小就把小的放入m中$m[] = $left[0] &lt; $right[0] ? array_shift($left) : array_shift($right);}return (array_merge($m,$left,$right));}print_r(merge_sort($arr3));echo '&lt;hr&gt;';// 查找算法// 顺序查找$arr4 = [8,9,7,12,0];functioncheck_order($arr,$num){for($i =0,$len =count($arr);$i &lt; $len;$i++){if($arr[$i] == $num){return $i;}}returnfalse;}var_dump(check_order($arr4,102));// 二分/折半 查找$arr5 = [1,5,7,15,98,120];$ress = 5;functioncheck_break($arr,$ress){// 取得边界$right = count($arr);$left = 0;while ($left &lt;= $right) {// 得到中间值$middle = floor(($left + $right)/2);// 匹配数据if($arr[$middle] == $ress){return $middle +1;}// 值在右边if($arr[$middle] &lt; $ress){$left = $middle + 1;}else{$right = $middle - 1;}}returnfalse;}var_dump(check_break($arr5,$ress));","link":"/2018/01/14/2018-01-14/"},{"title":"MySQL学习 -- 数据库操作","text":"创建数据库基本语法 create database 数据库名 [库选项]; 库选项：数据库的相关属性（可有可无） 字符集：charset 字符集 校对集：collate 校对集 显示数据库显示所有数据库基本语法 show databases;系统数据库解析 information_schema 保存数据库所有的结构信息 mysql 核心数据库：权限关系 performance_schema 效率库 显示部分数据库基本语法：show databases like ‘匹配模式’; _:匹配当前位置单个字符 %:匹配指定位置多个字符 获取以my开头的所有数据库：’my%’; 获取以m开头，后面第一个字母不确定，最后为database的数据库：’m_database’; 获取以database结尾的数据库：’%database’; 显示创建的数据库基本语法：show create database 数据库名; 选择数据库要想操作表，必须进入相应的数据库 基本语法：use 数据库名; 修改数据库修改数据库字符集（库选项） 5.5版本之前可以修改名字，以后版本不可以修改 基本语法：alter database 数据库名字 charset 字符集; 删除数据库基本语法：drop database 数据库名字;","link":"/2018/01/14/2018-01-18/"},{"title":"MySQL学习 -- 数据表操作","text":"创建数据表创建普通表 create table 数据库名.数据表名(字段名 字段类型[字段属性])[表选项]; use 数据库名create table 数据表名(字段名 字段类型[字段属性])[表选项]; 1create table test.class(name varchar(10))charset utf8; 复制已有表结构create table 表名 like 数据库名.被复制的表名; 只复制表结构，不复制数据 12345use test;create table teacher like test1.teacher;create test.table teacher like test1.teacher; 显示数据表查看所有表1show tables; 匹配显示表show tables like ‘匹配模式’; 1show tables like '%dec'; 显示表结构显示表中包涵的字段信息（名字，属性，类型等） describe 表名 desc 表名 show columns from 表名 1desc class 显示表创建语句show create table 表名; show create table 表名\\g (推荐) 1show create table class\\g 设置表属性alter table 表名 表选项 1alter table class charset gbk; 修改表结构 修改表名 : rename table 旧表名 to 新表名; 1rename table class to banji; 修改表选项 同设置表选项一样 字段操作 新增字段 : alter table 表名 add 字段名 字段类型[字段属性] [位置 first/after 字段名] 12345// first 加到最前面alter table class add name varchar(10) first;// after + 字段名 加到某一个字段后面alter table class add age varchar(10) after name; 修改字段名 : alter table 表名 change 旧字段名 新字段名 字段类型; 1alter table class change age nj int; 修改字段类型（属性）: alter table 表名 modify 字段名 新类型; 1alter table class modify age varchar(10); 删除字段 : alter table 表名 drop 字段名; 1alter table class drop age; 删除表drop table 表名; 123drop table class;drop table class,teacher;","link":"/2018/01/19/2018-01-19/"},{"title":"MySQL学习 -- 数据基本操作","text":"插入数据向表中指定字段插入insert into 表名（字段列表） values（对应字段列表）; 12345insert class(name,sex) values('wangyu','man');insert class(sex,name) values('man','wangyu');insert class(name) values('wangyu'); 向表中所有字段插入insert into 表名 values（表结构）; 12// 值列表必须于字段顺序一致insert into class values(1,'gg','woman'); 查询数据查询表中所有数据selec * from 表名; 1select * from class; 查询表中的部分字段select 字段列表 from 表名; 123select id from class;select id,name from class; 简单的条件查询select 字段名 from 表名 where 条件; 1select name from class where sex = 'man'; 删除数据delete from 表名 [where 条件]; 注：如果没有where条件，意味删除该表所有数据。 1delete from class where sex = 'woma'; 更新数据update 表名 set 字段名 = 新值 [where 条件]; 1update class set id = 2 where name = 'wangyu';","link":"/2018/01/20/2018-01-20/"},{"title":"MySQL学习 -- 字符集相关","text":"基本语法 目的：实现客户端 中间层 服务端字符集统一，以遍存储汉字。 1set names gbk; 查看系统保存的三种关系处理字符集 1show variables like 'character_set%';","link":"/2018/01/21/2018-01-21/"},{"title":"PHP学习 -- 文件上传","text":"单文件上传 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980&lt;?phpheader(&quot;Content-type:text/html;charset=utf-8&quot;);/** @param1 array $file , 上传文件的信息* @param2 array $allow_type , 运行上传的mime* @param3 string $path , 存储的路径* @param4 string &amp;$error , 错误消息* @param5 array $allow_format , 允许上传的文件格式* @param6 int $max_size , 允许上传的最大值（必须比配置文件中的值小）*/function upload_single($file,$allow_type,$path,&amp;$error,$allow_format = array(),$max_size = 2000000){ // 判断文件是否有效 if(!is_array($file) || !isset($file['error'])){ $error = '不是一个有效的文件'; return false; } // 判断文件上传路径是否存在 if(!is_dir($path)){ $error = '文件存储路径不存在'; return false; } // 判断文件上传过程是否出错 switch ($file['error']) { case 1: case 2: $error = '文件超出预设值'; return false; case 3: $error = '文件上传过程出错'; return false; case 4: $error = '没有选中要上传的文件'; return false; case 6: case 7: $error = '文件保存失败'; return false; } // 判断mime类型 if(!in_array($file['type'],$allow_type)){ $error = '请上传正确的文件类型'; return false; } // 判断文件后缀 $ext = ltrim(strrchr($file['name'],'.'),'.'); if(!empty($allow_format) &amp;&amp; !in_array($ext,$allow_format)){ $error = '请上传正确的文件类型'; return false; } // 判断文件大小 if($file['size'] &gt; $max_size){ $error = '当前文件超出大小，请不要大于' . $max_size . '字节'; } // 移动到指定目录 if(!is_uploaded_file($file['tmp_name'])){ $error = '错误，不是上传文件'; return false; } // 构造文件名字并上传 $fullname = strstr($file['type'],'/',true) . date('Ymd') . mt_rand(10000,99999) . '.' .$ext; if(move_uploaded_file($file['tmp_name'],$path . '/' . $fullname)){ return $fullname; }else{ $error = '文件上传失败'; return false; }}$file = $_FILES['img'];$path = 'upload';$allow_type = array('image/jpg','image/jpeg');$allow_format = array('jpg','jpeg','JPG','JPEG');$max_size = 1048576;if($filename = upload_single($file,$allow_type,$path,$error,$allow_format,$max_size)){ echo $filename;}else{ echo $error;} 1234567891011121314151617&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;title&gt;单上传文件&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; &lt;form action=&quot;2.4.php&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt; &lt;input type=&quot;file&quot; name=&quot;img&quot; /&gt; &lt;input type=&quot;submit&quot; /&gt; &lt;/form&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 多文件上传12345678910111213&lt;?phpheader(&quot;Content-type:text/html;charset=utf-8&quot;);// 多文件一起上传$fileName = $_FILES['img']['name'];$fileTmp = $_FILES['img']['tmp_name'];foreach($fileTmp as $key =&gt; $value){ if(is_uploaded_file($value)){ move_uploaded_file($value,'upload/' . $fileName[$key]); echo '文件上传成功'; }else{ echo '文件上传失败'; }} 123456789101112131415&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;form action=&quot;2.2.php&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt; &lt;input type=&quot;file&quot; name=&quot;img[]&quot; multiple=&quot;multiple&quot; /&gt; &lt;input type=&quot;submit&quot; value=&quot;上传&quot; /&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;","link":"/2018/02/01/2018-02-01/"},{"title":"PHP学习 -- 连接MySQL数据库","text":"12345678910111213141516171819202122&lt;?php// PHP连接MySQL数据库基本操作// 1. 建立连接// 默认端口3306$link = mysqli_connect('localhost:3306','root','root');// var_dump($link);// 2. 设定字符集$res = mysqli_query($link,'set names utf8');// var_dump($res);// 3. 选择数据库$db = mysqli_query($link,'use wang');var_dump($db);// 4. 数据操作// 5. 关闭连接// MySQL服务器的连接资源是有限的，不用了需要释放，但是脚本执行玩后会自动释放$end = mysqli_close($link);var_dump($end);","link":"/2018/01/22/2018-02-02/"},{"title":"使用海外VPS搭建ShadowsocksR助你科学上网","text":"注：本教程适合有一定计算机基础的朋友使用，小白先百度了解一下基础知识。切勿使用本教程做一切违反中国人民共和国相关法律法规之事！ 购买VPSBandwagon HostBandwagon Host被国人称为搬瓦工，他们家的VPS有专门对国内网络连接速度优化，国人用的非常多。官网为 https://bwh1.net/cart.php 建议大家购买下面这两款： 这两个都是直连cn2线路，第一个只能年付，第二个可以月付。但是第二个更贵，因为配置更高，流量更多。（流量这里要补充一下，如果你用服务器搭建代理翻墙的话，流量是要减半的，意思是如果你买的是第一个，网页上写流量一个月500g，平时翻墙的时候就是250g，超出的话就会另收费。具体原因是你挂的代理访问google，请求是先发到你的代理服务器上面，然后代理服务器再请求google。它从goole服务器下载到网页，这是一部分流量，然后它还要把这个网页发给你，这就有产生了流量。总共花费正常情况的2被流量） VultrVultr也是一个老牌VPS厂商了，他家的也不错，VPS可以按小时收费，价格也可以。其实按小时收费的最好了，如果你的IP被封了，你可以删除实例，再重新创建一个，它就会给你重新分配一个IP。如果是按月收费或者是按年收费就像搬瓦工，IP被墙了，只能再花钱换IP了。官网：https://www.vultr.com/ 建议大家购买下面这两款： 机房位置吧，建议选择美国西海岸的。 DigitalOceanDigitalOcean老牌VPS厂商，本人就是用的他家的旧金山机房，配合谷歌BBR加速，YouTube 2K妥妥的，4K也可以。和Vultr一样支持按小时收费，价格和Vultr差不多。官网：https://www.digitalocean.com/ 建议大家购买下面这一款： 机房位置选择旧金山。 优化网络网络是必须优化的，不优化效果会很不好，目前有两种较稳定效果好的优化方案。（以下的所有操作都在Debian 7/8 X64系统下均正常，强烈建议大家选择这款系统） 锐速(破解版)这是一个TCP连接优化加速软件（不支持OpenVZ），因为官方破产，所以现在只能用用破解的锐速了。这个软件也是非常强大，不需要多余设置，一键安装，效果明显！ 12345678910111213141. root用户连接上VPS2. 执行 wget -N –no-check-certificate https://raw.githubusercontent.com/91yun/serverspeeder/master/serverspeeder.sh &amp;&amp; bash serverspeeder.sh3. 等待一段时间安装成功后，重启vps#重启锐速/serverspeeder/bin/serverSpeeder.sh restart#启动锐速/serverspeeder/bin/serverSpeeder.sh start#停止锐速/serverspeeder/bin/serverSpeeder.sh stop#查看锐速运行情况/serverspeeder/bin/serverSpeeder.sh status 谷歌BBR算法谷歌大佬的TCP-BBR是最新出来的一种TCP拥塞控制技术，和锐速差不多，不过这个加速效果个人测试强于锐速，免费，同样不支持OpenVZ。 123456789101112131415161. root用户连接vps2. 执行 wget -N –no-check-certificate https://softs.fun/Bash/bbr.sh &amp;&amp; chmod +x bbr.sh &amp;&amp; bash bbr.sh3. 会提示输入内核版本，直接回车获取最新版本4. 会出现一个对话框，选择no5. 提示需要重启，输入y重启vps# 启动BBRbash bbr.sh start# 关闭BBRbash bbr.sh stop# 查看BBR状态bash bbr.sh status 安装/配置服务端下载1234567// 依此执行下面三行代码apt-get updateapt-get install git vim -ygit clone -b manyuser https://github.com/ToyoDAdoubi/shadowsocksr.git 配置123456789101112131415161718192021222324252627282930313233343536// 依此执行下面三行代码cd shadowsocksrbash initcfg.shvi user-config.json按i进入编辑模式,并按如下配置{ &quot;server&quot;: &quot;0.0.0.0&quot;, &quot;server_ipv6&quot;: &quot;::&quot;, // 更改服务端口，建议4位 &quot;server_port&quot;: 8388, &quot;local_address&quot;: &quot;127.0.0.1&quot;, &quot;local_port&quot;: 1080, // 更改密码 &quot;password&quot;: &quot;m&quot;, &quot;timeout&quot;: 120, &quot;udp_timeout&quot;: 60,// 务必记住 加密方法(method) 协议(protocol) 混淆(obfs) &quot;method&quot;: &quot;aes-128-ctr&quot;, &quot;protocol&quot;: &quot;auth_aes128_md5&quot;, &quot;protocol_param&quot;: &quot;&quot;, &quot;obfs&quot;: &quot;tls1.2_ticket_auth_compatible&quot;, &quot;obfs_param&quot;: &quot;&quot;, &quot;speed_limit_per_con&quot;: 0, &quot;speed_limit_per_user&quot;: 0, &quot;dns_ipv6&quot;: false, &quot;connect_verbose_info&quot;: 0, &quot;redirect&quot;: &quot;&quot;, &quot;fast_open&quot;: false} 开启1234567// 依此执行下面三行代码cd shadowsockschmod +x *.sh./logrun.sh 查看日志1./tail.sh 客户端客户端配置方法都一样，填写你服务器的IP、刚才自己设置的端口、密码、加密方法(method)、协议(protocol)、混淆(obfs) Windows下载地址： https://github.com/blogwy/personal-practice/blob/master/ssr/win/ssr.7z Android下载地址： https://github.com/blogwy/personal-practice/blob/master/ssr/android/shadowsocksr-3.5.4.apk IOS 下载 potatso lite（需切换到美区AppStore） 或者到pp助手下载Shadowrocket MACOS下载地址：https://github.com/shadowsocks/ShadowsocksX-NG/releases/","link":"/2018/02/23/2018-02-23/"},{"title":"Vue.js两个小技巧","text":"Vue-cli代理跨域 在config下的index.js里面找到proxyTable 按下图修改（注：如果你要请求 www.baidu.com/search.php?kw=helloworld， 现在用过axios访问本地代理的时候就是访问/api/search.php?kw=helloworld） Vue引入非NPM模块 在build里面找到webpack.base.conf.js 在module.exports里面添加externals项，比如我要添加ecDo这个三方插件，前面相当于键，后面是值。切记值一定要与插件定义的变量一致，键可以随便填写 在index.html里面引入 在使用的页面导入即可","link":"/2018/03/08/2018-03-08/"},{"title":"微信小程序动态修改data里面的值","text":"wxml123456&lt;view&gt; &lt;block wx:for=&quot;{{test}}&quot; wx:key=&quot;*this&quot;&gt; &lt;button type='primary' size='mini' bindtap='chageval' data-id='{{item.id}}'&gt;{{item.name}}&lt;/button&gt; &lt;text&gt;{{item.val}}&lt;/text&gt; &lt;/block&gt;&lt;/view&gt; js1234567891011121314151617181920test: [ { id: 1, name: 'wangyu', val: '123' }, { id: 2, name: 'mayan', val: '456' }]chageval(e){ var x = e.currentTarget.dataset.id; console.log(x); var str = &quot;test[&quot; + (x-1) + &quot;].val&quot;; this.setData({ [str]: 'aaa'+x });}","link":"/2018/04/27/2018-04-27/"},{"title":"Express.js通过Sequelize.js连接MySQL数据库","text":"创建连接1234567891011121314151617181920212223242526const Sequelize = require('sequelize');const sequelize = new Sequelize('数据库名', '数据库账号', '数据库密码', { host: '主机名', dialect: 'mysql', port: '端口', operatorsAliases: false, timezone: '+08:00', // 时区，中国+8 pool: { max: 5, min: 0, acquire: 30000, idle: 10000 }});sequelize .authenticate() .then(() =&gt; { console.log('***数据库连接成功'); }) .catch(err =&gt; { console.error('数据库连接失败：', err); });module.exports = sequelize; 建立模型1234567891011const Sequelize = require('sequelize');const db =require('./db');// 创建 modellet 变量名 = db.define('表名', { 字段名: { type: Sequelize.STRING // string类型 }});module.exports = 变量名 基本使用增12345678910111213模型名.create(data) .then(createRes =&gt; { res.json({ code: '1', msg: '创建成功', data: { result: createRes } }) } .catch(err =&gt; { console.log(err); }) 删1234567模型名.destroy({ where: {id: pid} }) .then(res =&gt; { console.log(res); }) .catch(err =&gt; { console.log(err); }) 改12345678910111213模型名.update(data,{ where: {id: pid} }) .then(updateRes =&gt; { res.json({ code: '1', msg: '修改成功', data: { result: updateRes } }) }) .catch(err =&gt; { console.log(err); }) 查123456789101112131415161718192021222324// 查询一个模型名.findOne({ where: {id: req.query.id} }) .then(respons =&gt; { res.json({ code: '1', msg: '查询成功', data: respons }) }) .catch(errors =&gt; { console.log(errors); })// 查询多个模型名.findAll() .then(respons =&gt; { res.json({ code: '1', msg: '查询成功', data: respons }) }) .catch(errors =&gt; { console.log(errors); }) 中文文档点击查看","link":"/2018/05/16/2018-05-16/"},{"title":"BilibiliVideoDownload v1.4.0 添加EP下载功能","text":"BilibiliVideoDownload PC端下载bilibili视频(Material Design风格) 版本 v1.4.1 2018-09-15 输入URL即可获取视频详情 v1.4.0 2018-06-26 添加EP下载功能，使用nginx做反向代理 注：由于技术有限,目前av,ep下载的视频都是320p 123location /bangumi/ { proxy_pass https://www.bilibili.com; } v1.3.1 2018-06-16 修复弹幕获取失败，使用nginx做反向代理 1234location /comment/ { rewrite ^/comment/(.*)$ /$1 break; proxy_pass https://comment.bilibili.com; } v1.3.0 2018-05-14 用Vue.js重构 v1.2.1 2017-12-21 获取视频弹幕消息，去除视频背景 v1.2.0 2017-12-3 更换全新MDUI框架，添加视频背景，优化js代码 MDUI 是一套用于开发 Material Design 网页的前端框架 v1.1.3 2017-12-1 修复获取视频信息失败，由于9bl.bakayun.cn网站维护导致api失效，现已使用bilibili官方api接口，更稳定 v1.1.2 2017-11-11 修复下载地址错误，取消备用下载 v1.1.1 2017-11-10 修复视频格式显示错误 v1.1.0 2017-11-05 实现分P下载 注：由于api请求限制，目前只可以手动输入分p数获取分p下载链接。分p数为阿拉伯数字 v1.0.1 2017-10-24 优化了视频封面的获取方法 v1.0.0 2017-10-21 实现了基本功能 演示 演示地址 点击查看 实现的功能 获取视频直链 获取视频大小和时长 获取视频封面 获取视频标题up主名字 获取分p下载链接 获取视频弹幕信息已知的问题 由于使用了国外（Images.weserv.nl）的图片缓存代理，封面获取较慢。用图片缓存代理是为了突破b站视频封面域名限制，直接调用会出现403 edge chrome正常，ff ie有问题API接口 http://api.bilibili.com/view?type=jsonp&amp;appkey=8e9fc618fbd41e28&amp;id=AV号&amp;page=1&amp;callback=fn http://api.bilibili.com//playurl?aid=AV号&amp;page=分P号&amp;platform=html5&amp;quality=1&amp;vtype=mp4&amp;type=jsonp&amp;callback=fn&amp;token=d3bd9275f0f2cda07f2406740db06c5d感谢 Images.weserv.nl图片缓存代理 https://github.com/andrieslouw/imagesweserv","link":"/2018/07/01/2018-07-01/"},{"title":"MSDN API分享","text":"声明一下：这个api是我抓包抓到的，因为平时经常给别人装机下载镜像，所以经常在这里下载。 获取资源列表id请求URL1https://msdn.itellyou.cn/Category/Index` 请求方式POST 参数 参数名 类型 备注 id string 分类id id可选值： 描述 分类id 企业解决方案 aff8a80f-2dee-4bba-80ec-611ac56d3849 MSDN 技术资源库 23958de6-bedb-4998-825c-aa3d1e00d097 工具和资源 95c4acfd-d1a6-41fe-b14d-a6816973d2aa 应用程序 051d75ee-ff53-43fe-80e9-bac5c10fc0fb 开发人员工具 fcf12b78-0662-4dd4-9a82-72040db91c9e 操作系统 7ab5f0cb-7607-4bbe-9e88-50716dc43de6 服务器 36d3766e-0efb-491e-961b-d1a419e06c68 设计人员工具 5d6967f0-b58d-4385-8769-b886bfc2b78c 返回值123456[ { id: &quot;id值&quot;, name: &quot;具体名字&quot; }] 获取资源列表语言id请求URL1https://msdn.itellyou.cn/Category/GetLang 请求方式POST 参数 参数名 类型 备注 id string 语言id 返回值123456789{ status: true, result: [ { id: &quot;语言id&quot;, lang: &quot;语言描述&quot; } ]} 获取资源列表信息请求URL12https://msdn.itellyou.cn/Category/GetList 请求方式POST 参数 参数名 类型 备注 id string 分类id lang string 语言id filter boolean 默认true 返回值1234567891011{ status: true, result: [ { id: &quot;资源具体id&quot;, name: &quot;资源名字&quot;, post: &quot;资源发布时间&quot;, url: &quot;资源下载地址&quot; } ]} 获取具体资源下载信息请求URL1https://msdn.itellyou.cn/Category/GetProduct 请求方式POST 参数 参数名 类型 备注 id string 具体的资源id 返回值12345678910{ status: true, result: { DownLoad: &quot;资源下载地址&quot;, FileName: &quot;资源文件名&quot;, PostDateString: &quot;资源发布时间&quot;, SHA1: &quot;资源sha1&quot;, size: &quot;资源大小&quot; }} 注意事项msdn请求需设置 Referer,下面贴出我用nginx做反向代理的配置 1234location /Category/ { proxy_pass https://msdn.itellyou.cn; proxy_set_header Referer https://msdn.itellyou.cn/; }","link":"/2018/07/08/2018-07-08/"},{"title":"小程序动态修改页面的高度","text":"背景一个 tab 页面，每个页面的背景色是 #f4f4f4 数据都是动态的，数据会越来越多。当数据没有撑满屏幕的高度时，为了保证最外层的view的背景色是 #f4f4f4 。高度必须是屏幕高度的100%也就是100vh。如果数据撑开屏幕的高度的话，最外层view给高度可以是 auto 或者是 100% 。 实现1234567891011121314151617181920212223242526272829303132let that = this;wx.getSystemInfo({ success: function (res) { // 获取可用高度px let windowHeight = res.windowHeight; let tabsHeight, grounpHeight; console.log(res.windowHeight); let query = wx.createSelectorQuery(); query.select('#order-grounp').boundingClientRect(); query.exec(function (res) { // 获取order-grounp的高并赋值 grounpHeight = res[0].height; let query1 = wx.createSelectorQuery(); query1.select('#tabs').boundingClientRect(); query1.exec(function (res) { // 获取tabs的高并赋值 tabsHeight = res[0].height; console.log('tabsHeight' + tabsHeight); console.log('grounpHeight' + grounpHeight); if ((windowHeight - tabsHeight) &gt; grounpHeight){ that.setData({ _height: '100vh' }) }else{ that.setData({ _height: '100%' }) } }); }); }})","link":"/2018/07/09/2018-07-09/"},{"title":"WebSocket 简单入门(Node.js)","text":"服务端服务端是使用Node.js的ws模块，具体API可以点击这里 –&gt; 点我查看 &lt;– 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120// 引入express和wsconst express = require('express');const app = express();const WebSocket = require('ws');// 使用express创建一个serverconst serve = app.listen(3000,function () { console.log('server run 3000');});// 把这个server绑定到websocket-server上// 以后所有的请求都会经过websocket-server// 如果是websocket连接就会由websocket-server接管，如果是普通连接会由express-server接管const ws = new WebSocket.Server({ server: serve});// 这里创建的clientsInfo用来保存目前连接的所有用户发送的信息// clientsUser用来保存连接的用户系统信息，采用自定义数据作为key，用来私发消息let testData,clientsInfo = [],clientsUser = {};app.get('/websocket/sendtoken', function(req, res){ console.log('data',req.query.token); testData = req.query.token; res.json({ msg: 'ok', token: req.query.token })});app.get('/websocket/clientsinfo', function(req, res){ res.json({ msg: 'ok', data: clientsInfo })});// 获取总连接个数function allConnections(ws) { let i = 0; ws.clients.forEach(function each() { i+=1 }); console.log(`[SERVER] : 共有${i}个连接`); return i;}// 广播方法ws.broadcast = function broadcast(data) { let num = allConnections(ws); ws.clients.forEach(function each(client) { client.send('广播'+data +'共有'+ num +'个用户'); }); console.log(`[SERVER] 收到客户端消息: ${data},共有${num}个用户`);}// 删除用户方法ws.removeClientInfo = function removeClientInfo(clientsInfo,client) { let clientName = client.userName; clientsInfo.forEach(function (item,index) { if (item.userName === clientName){ clientsInfo.splice(index,1); } }); return clientsInfo;}ws.on('connection', function (result) { console.log(`[SERVER] 客户端已连接`); result.on('message', function (message) { let res = JSON.parse(message); if (res.used === 'login'){ // 用户登录后储存用户信息 clientsUser[res.userName] = result; clientsInfo.push(res); result.send('from server' + res.userName + '已储存'); console.log(res.userName + '已储存'); } if(res.used === 'logout'){ // 用户登出时删除用户信息 delete clientsUser[res.userName]; ws.removeClientInfo(clientsInfo,res); result.send('from server' + res.userName + '已删除'); console.log(res.userName + '已删除'); } // 管理端查看 发送当前连接数 if(res.used === 'manage'){ let currentClients = JSON.stringify(clientsInfo); result.send(currentClients); console.log(res.userName + '信息已发送'); } // 管理端给指定用户发送websocket信息 if (res.used === 'send'){ let sendUser = clientsUser[res.userName]; sendUser.send('hello,world!') } // 管理端 群发除了自己 if (res.used === 'sendall'){ console.log('接收到群发消息'); ws.clients.forEach(function each(client) { if (client !== result) { client.send('广播消息'); } }); } // 广播消息 // ws.broadcast(res.msg); // console.log(`[SERVER] 收到客户端消息: ${res.msg}`); // 单发消息 // result.send(`ECHO: ${res.msg}`, (err) =&gt; { // if (err) { // console.log(`[SERVER] error: ${err}`); // }else { // console.log(`[SERVER] 收到客户端消息: ${res.msg}`); // } // }); }) result.on('close', function (closeResult) { console.log(`[SERVER] 客户端${closeResult}连接已关闭`); });}); 客户端客户端其实都一样，应为html5已经全面支持WebSocket技术，可以直接new出来了！！！ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566$(function () { // 建立websocket连接 let ws = new WebSocket(&quot;ws://192.168.0.110:3000&quot;); ws.getClientsInfo = function getClientsInfo() { let WsData = JSON.stringify({ userName: 'manage', token: 'manage_123456789', used: 'manage' }); // 发送消息 ws.send(WsData); console.log('数据已经发送'); // 监听消息 ws.onmessage = function (evt){ let msg = JSON.parse(evt.data); console.log(msg); dataToHtml(msg); $('.send').on('click',function (e) { let rst = { userName: e.target.dataset.username, used: 'send' }; console.log(rst); ws.send(JSON.stringify(rst)); ws.onmessage = function (evt){ let msg = evt.data; console.log(msg); }; }) }; }; // 监听连接事件 ws.onopen = function () { console.log('Web Socket 已连接'); ws.getClientsInfo(); } // 群发 $('#sendAll').on('click',function () { let msg = { used: 'sendall' } ws.send(JSON.stringify(msg)); ws.onmessage = function (evt){ let msg = evt.data; console.log(msg); alert('群发成功') }; }) function dataToHtml(data) { let str = ''; data.forEach(function (item,index) { str += `&lt;div class=&quot;item flex-12 flex center-center&quot;&gt; &lt;div class=&quot;flex-1 text-center&quot;&gt;${index+1}&lt;/div&gt; &lt;div class=&quot;flex-4 text-center&quot;&gt;${item.userName}&lt;/div&gt; &lt;div class=&quot;flex-4 text-center&quot;&gt;${item.token}&lt;/div&gt; &lt;div class=&quot;flex-1 text-center&quot;&gt;${item.used}&lt;/div&gt; &lt;div class=&quot;flex-2 text-center&quot;&gt; &lt;button class=&quot;send&quot; data-username=&quot;${item.userName}&quot;&gt;发送&lt;/button&gt; &lt;/div&gt; &lt;/div&gt;` }) document.getElementById('itemGrounp').innerHTML = str; } })","link":"/2018/07/31/2018-07-31/"},{"title":"小程序实现聊天室功能(WebSocket技术)","text":"演示 功能 群聊，每个进入的用户都可以看到自己和他人的聊天记录 实时显示当前在线人数 自己发送的消息和他人有区分 服务端123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121const express = require('express');const app = express();const WebSocket = require('ws');const serve = app.listen(3001,function () { console.log('server run 3001');});const ws = new WebSocket.Server({ server: serve});let clientsUser = {};// 获取连接个数function allConnections(ws) { let i = 0; ws.clients.forEach(function each() { i+=1 }); console.log(`[SERVER] 共有${i}个连接`); return i;}// 广播function broadcast(data) { let num = allConnections(ws); ws.clients.forEach(function each(client) { client.send(data); }); console.log(`[SERVER] 给${num}个用户发送了广播消息`);}// 判断idfunction checkId(id) { let resArray = id.split(&quot;_&quot;); if (resArray[0] === 'user'){ return 'user'; } if (resArray[0] === 'manage'){ return 'manage'; }}// 判断id是否存在function checkIdExist(clientsUser,id) { for (key in clientsUser){ if (key === id){ return true; } } return false;}// 发送目前总连接数function sendCountNum(ws) { let broadcastMsg = JSON.stringify({ &quot;rstCode&quot;: &quot;0&quot;, &quot;rstMsg&quot;: { &quot;count&quot;: allConnections(ws) } }); broadcast(broadcastMsg);}// 监听连接ws.on('connection',function (result) { console.log('客户端正在连接中...'); // 监听发送消息 result.on('message',function (message) { let res = JSON.parse(message), checkRes = checkId(res.websocketId); // 检测是否是用户 if (checkRes === 'user'){ // 检测如果是登录状态则保存用户信息 if (res.status === 'login'){ // 检测服务端是否存储用户信息，存储则删旧添新，没有则直接添加 if (checkIdExist(clientsUser,res.websocketId)){ delete clientsUser[res.websocketId]; clientsUser[res.websocketId] = result; // 广播目前总连接数 sendCountNum(ws); }else { clientsUser[res.websocketId] = result; // 广播目前总连接数 sendCountNum(ws); } } // 发送信息操作 if (res.status === 'send'){ let msg = JSON.stringify({ &quot;rstCode&quot;: &quot;0&quot;, &quot;rstMsg&quot;: { &quot;count&quot;: allConnections(ws), &quot;msg&quot;: res.msg, &quot;websocketId&quot;: res.websocketId, &quot;nickname&quot;: res.nickname } }) broadcast(msg); } } }) // 监听下线 result.on('close', function (close) { for (key in clientsUser){ if (clientsUser[key] === result){ delete clientsUser[key]; console.log(`[SERVER] 客户端${key}连接已关闭`); } } // 广播目前的连接数 let msg = JSON.stringify({ &quot;rstCode&quot;: &quot;0&quot;, &quot;rstMsg&quot;: { &quot;count&quot;: allConnections(ws) } }) broadcast(msg); })}) 客户端wxml 1234567891011121314151617181920212223&lt;!--index.wxml--&gt;&lt;view class=&quot;container&quot;&gt; &lt;scroll-view scroll-y style='height: {{_height}}' class='chat-room-content'&gt; &lt;view class='chat-counts'&gt;当前有{{ countNum }}人正在讨论&lt;/view&gt; &lt;view wx:for=&quot;{{ msgArr }}&quot; wx:key=&quot;*this&quot; class='chat-info'&gt; &lt;text class=&quot;chat-info-name {{ item.websocketId === websocketId? 'chat-info-user':'' }}&quot;&gt;{{ item.nickname }}：&lt;/text&gt; &lt;text class=&quot;chat-info-content {{ item.websocketId === websocketId? 'chat-info-user':'' }}&quot;&gt;{{ item.msg }}&lt;/text&gt; &lt;/view&gt; &lt;/scroll-view&gt; &lt;view id='chatRoomBottom' class='chat-room-bottom flex center-center'&gt; &lt;view class='chat-room-ipt flex-10 flex'&gt; &lt;view class='chat-room-ipt-ico flex-1 flex center-center'&gt; &lt;image src='../../assets/imgs/comment.png'&gt;&lt;/image&gt; &lt;/view&gt; &lt;view class='flex-11'&gt; &lt;input type='text' value=&quot;{{ msg }}&quot; confirm-type=&quot;send&quot; bindconfirm=&quot;sendMsg&quot; placeholder-class='ipt-ph' placeholder='一起聊天吧' bindinput='onChatInfoChange'&gt;&lt;/input&gt; &lt;/view&gt; &lt;/view&gt; &lt;view class='chat-room-btn flex-2'&gt; &lt;button bindtap='sendMsg'&gt;发 送&lt;/button&gt; &lt;/view&gt; &lt;/view&gt;&lt;/view&gt; js 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106Page({ /** * 页面的初始数据 */ data: { _height: '', msg: '', countNum: 0, msgArr: [], websocketId: '' }, sendMsg(){ console.log(wx.getStorageSync('userInfo').nickName); let msg = { &quot;websocketId&quot;: this.data.websocketId, &quot;status&quot;: &quot;send&quot;, &quot;nickname&quot;: wx.getStorageSync('userInfo').nickName, &quot;msg&quot;: this.data.msg } wx.sendSocketMessage({ data: JSON.stringify(msg) }) this.setData({ msg: '' }) }, onChatInfoChange(e){ console.log(e.detail.value); this.setData({ msg: e.detail.value }) }, scrollHeight(){ let _this = this; wx.getSystemInfo({ success: function(res) { // 获取可用高度px let windowHeight = res.windowHeight; _this.setData({ _height: (windowHeight - 61) + 'px' }) } }) }, connectWebsocket() { let _this = this; let loginUserInfo = { 'websocketId': this.data.websocketId, 'status': 'login' } wx.connectSocket({ url: 'ws://192.168.1.108:3001' }) wx.onSocketOpen(function (re) { console.log('WebSocket连接已打开！'); // 连接成功发送socket信息 wx.sendSocketMessage({ data: JSON.stringify(loginUserInfo) }) // 监听服务器返回 wx.onSocketMessage(function (result) { console.log('收到服务器内容：' + result.data); let res = JSON.parse(result.data), msgArr = _this.data.msgArr; console.log(res) if (res.rstMsg.msg){ msgArr.push(res.rstMsg); _this.setData({ msgArr: msgArr }) } else{ _this.setData({ countNum: res.rstMsg.count }) } }) }) }, /** * 生命周期函数--监听页面加载 */ onLoad: function (options) { this.scrollHeight(); this.setData({ websocketId: 'user_'+ wx.getStorageSync('openId') }) // 建立websocket连接 this.connectWebsocket(); // 监听websocket断开 wx.onSocketError(function (res) { console.log('WebSocket由于错误已关闭！'); }) wx.onSocketClose(function (res) { console.log('WebSocket 已关闭！'); }) }, /** * 生命周期函数--监听页面卸载 */ onUnload: function () { wx.closeSocket(); }}) wxss 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273.chat-room-bottom{ position: fixed; bottom: 0rpx; left: 0rpx; right: 0rpx; z-index: 100; background: #fff; padding: 15rpx 20rpx;}.chat-room-ipt-ico{ padding-right: 10rpx;}.chat-room-ipt-ico image{ width: 13px; height: 13px;}.chat-room-btn{ padding-left: 20rpx;}.chat-room-btn button{ border-radius: 2px; background: #396bd0; font-size: 12px; color: #fff; padding: 0rpx 15rpx; line-height: 45px;}.chat-room-btn button::after{ border-radius: 2px!important;}.chat-room-ipt{ padding: 0 10rpx; border: 1rpx solid #dfdfdf; border-radius: 2px!important;}.ipt-ph{ font-size: 12px; color: #aaa;}.chat-room-ipt input{ font-size: 12px; color: #555; height: 45px;}.chat-room-content{ box-sizing: border-box; width: 100%; padding: 0 20rpx;}.chat-info{ margin-top: 15rpx; font-size: 12px;}.chat-info:last-child{ margin-bottom: 15rpx;}.chat-info-name{ color: #729aea;}.chat-info-content{ color: #555;}.chat-info-user{ color: #f1c24e!important;}.chat-counts{ margin: 20rpx 0; font-size: 12px; color: #555; font-weight: 500; text-align: center;}","link":"/2018/08/07/2018-08-07/"},{"title":"小程序跨页面通信实现","text":"借助一个 weapp-event 的第三方插件可以轻松实现小程序跨页面通信 原作者的这个插件有时候会出现发送两次的问题，为此我改良了一下 改良版在发射事件里面添加了一个判断来检测 1234567891011121314151617181920212223242526272829303132333435363738394041var events = {};function on(name, self, callback) { var tuple = [self, callback]; var callbacks = events[name]; if (Array.isArray(callbacks)) { callbacks.push(tuple); } else { events[name] = [tuple]; }}function remove(name, self) { var callbacks = events[name]; if (Array.isArray(callbacks)) { events[name] = callbacks.filter((tuple) =&gt; { return tuple[0] != self; }) }}function emit(name, data) { var cb = events[name],callbacks; if(cb){ callbacks = []; callbacks.push(cb[0]); } console.log(callbacks); if (Array.isArray(callbacks)) { callbacks.map((tuple) =&gt; { var self = tuple[0]; var callback = tuple[1]; callback.call(self, data); }) }}exports.on = on;exports.remove = remove;exports.emit = emit; 用法 在需要发送和监听事件的页面引入此js 发送事件：event.emit(‘事件名’, 发送的数据) eg: event.emit(‘chat’, ‘success’) 监听事件：event.on(‘事件名’,this,data =&gt; { console.log(data) }) eg: event.on(‘chat’,this,data =&gt; { console.log(data) }) 移除事件：event.remove(‘事件名’, this) eg: event.remove(‘chat’, this) 监听事件后，必须在页面的onUnload方法里面写入移除事件","link":"/2018/08/27/2018-08-27/"},{"title":"小程序WebSocket实践(心跳检测、断线重连)","text":"我把小程序WebSocket的一些功能封装成一个类，里面包括建立连接、监听消息、发送消息、心跳检测、断线重连等等常用的功能。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200export default class websocket { constructor({ heartCheck, isReconnection }) { // 是否连接 this._isLogin = false; // 当前网络状态 this._netWork = true; // 是否人为退出 this._isClosed = false; // 心跳检测频率 this._timeout = 3000; this._timeoutObj = null; // 当前重连次数 this._connectNum = 0; // 心跳检测和断线重连开关，true为启用，false为关闭 this._heartCheck = heartCheck; this._isReconnection = isReconnection; this._onSocketOpened(); } // 心跳重置 _reset() { clearTimeout(this._timeoutObj); return this; } // 心跳开始 _start() { let _this = this; this._timeoutObj = setInterval(() =&gt; { wx.sendSocketMessage({ // 心跳发送的信息应由前后端商量后决定 data: JSON.stringify({ &quot;key&quot;: 'value' }), success(res) { console.log(res) console.log(&quot;发送心跳成功&quot;); }, fail(err) { console.log(err) _this._reset() } }); }, this._timeout); } // 监听websocket连接关闭 onSocketClosed(options) { wx.onSocketClose(err =&gt; { console.log('当前websocket连接已关闭,错误信息为:' + JSON.stringify(err)); // 停止心跳连接 if (this._heartCheck) { this._reset(); } // 关闭已登录开关 this._isLogin = false; // 检测是否是用户自己退出小程序 if (!this._isClosed) { // 进行重连 if (this._isReconnection) { this._reConnect(options) } } }) } // 检测网络变化 onNetworkChange(options) { wx.onNetworkStatusChange(res =&gt; { console.log('当前网络状态:' + res.isConnected); if (!this._netWork) { this._isLogin = false; // 进行重连 if (this._isReconnection) { this._reConnect(options) } } }) } _onSocketOpened() { wx.onSocketOpen(res =&gt; { console.log('websocket已打开'); // 打开已登录开关 this._isLogin = true; // 发送心跳 if (this._heartCheck) { this._reset()._start(); } // 发送登录信息 wx.sendSocketMessage({ // 这里是第一次建立连接所发送的信息，应由前后端商量后决定 data: JSON.stringify({ &quot;key&quot;: 'value' }) }) // 打开网络开关 this._netWork = true; }) } // 接收服务器返回的消息 onReceivedMsg(callBack) { wx.onSocketMessage(msg =&gt; { if (typeof callBack == &quot;function&quot;) { callBack(msg) } else { console.log('参数的类型必须为函数') } }) } // 建立websocket连接 initWebSocket(options) { let _this = this; if (this._isLogin) { console.log(&quot;您已经登录了&quot;); } else { // 检查网络 wx.getNetworkType({ success(result) { if (result.networkType != 'none') { // 开始建立连接 wx.connectSocket({ url: options.url, success(res) { if (typeof options.success == &quot;function&quot;) { options.success(res) } else { console.log('参数的类型必须为函数') } }, fail(err) { if (typeof options.fail == &quot;function&quot;) { options.fail(err) } else { console.log('参数的类型必须为函数') } } }) } else { console.log('网络已断开'); _this._netWork = false; // 网络断开后显示model wx.showModal({ title: '网络错误', content: '请重新打开网络', showCancel: false, success: function (res) { if (res.confirm) { console.log('用户点击确定') } } }) } } }) } } // 发送websocket消息 sendWebSocketMsg(options) { wx.sendSocketMessage({ data: options.data, success(res) { if (typeof options.success == &quot;function&quot;) { options.success(res) } else { console.log('参数的类型必须为函数') } }, fail(err) { if (typeof options.fail == &quot;function&quot;) { options.fail(err) } else { console.log('参数的类型必须为函数') } } }) } // 重连方法，会根据时间频率越来越慢 _reConnect(options) { let timer, _this = this; if (this._connectNum &lt; 20) { timer = setTimeout(() =&gt; { this.initWebSocket(options) }, 3000) this._connectNum += 1; } else if (this._connectNum &lt; 50) { timer = setTimeout(() =&gt; { this.initWebSocket(options) }, 10000) this._connectNum += 1; } else { timer = setTimeout(() =&gt; { this.initWebSocket(options) }, 450000) this._connectNum += 1; } } // 关闭websocket连接 closeWebSocket(){ wx.closeSocket(); this._isClosed = true; }} 使用方法在app.js里面引入，然后在onLaunch里面创建 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556import websocket from './utils/wechat-websocket.js'//app.jsApp({ onLaunch() { let _this = this; // 创建websocket对象 this.websocket = new websocket({ // true代表启用心跳检测和断线重连 heartCheck: true, isReconnection: true }); // 建立连接 this.linkWebsocket(); // 监听websocket状态 this.websocket.onSocketClosed({ url: this.globalData.websocketUrl, success(res) { console.log(res) }, fail(err) { console.log(err) } }) // 监听网络变化 this.websocket.onNetworkChange({ url: this.globalData.websocketUrl, success(res) { console.log(res) }, fail(err) { console.log(err) } }) // 监听服务器返回 this.websocket.onReceivedMsg(result =&gt; { console.log('app.js收到服务器内容：' + result.data); // 要进行的操作 }) }, onHide(){ // 程序后台后的操作--关闭websocket连接 this.websocket.closeWebSocket(); }, onShow(){ // 程序从后台到前台的操作--建立连接 this.linkWebsocket(); }. linkWebsocket() { // 建立连接 this.websocket.initWebSocket({ url: this.globalData.websocketUrl, success(res) { console.log(res) }, fail(err) { console.log(err) } }) }, getWebSocket() { // 向其他页面暴露当前websocket连接 return this.websocket; }, globalData: { websocketUrl: 'wss://xxx.com/websocket' }})","link":"/2018/10/30/2018-10-30/"},{"title":"Win10搭建Git服务器","text":"软件及环境 Win10专业版 Git 2.13.3-X64 Copssh 4.1.0 搭建过程安装Git所有的安装选项维持默认即可，建议不要安装到Program Files文件夹。 安装Copssh 建议安装路径不要安装到Program Files文件夹 安装的时候会创建一个windows账户，建议自定义。到时候在传代码的时候会用到 会安装一个openssh服务，点击确定 安装完成 配置Copssh 在开始菜单中找到 COPSSH Control Panel 打开，点击Users栏，按图中添加CopSSH用户(此用户就是安装时候添加的那个)。 将Git安装目录下C:\\Git\\mingw64\\bin中的git.exe、git-receive-pack.exe、git-upload-archive.exe、git-upload-pack.exe、libiconv-2.dll五个文件拷贝到Copssh安装目录bin文件夹中 打开Copssh安装路径下etc/profile文件。在最后追加四行命令(注意：前三行命令中的/cygdrive后面换成你的路径) 12345678gitpath='/cygdrive/e/Git/mingw64/bin' gitcorepath='/cygdrive/e/Git/mingw64/libexec/git-core'gitmergetoolspath='/cygdrive/e/Git/mingw64/libexec/git-core/mergetools'export PATH=&quot;/bin:$syspath:$gitpath:$gitcorepath:$gitmergetoolspath:$winpath&quot; 服务端配置Git将下面三个路径添加到环境变量path中，注意替换成你的路径 12345C:\\Git\\mingw64\\binC:\\Git\\mingw64\\libexec\\git-coreC:\\Git\\mingw64\\libexec\\git-core\\mergetools 客户端配置Git 配置git名称和邮箱，注意邮箱和名字替换成你自己的 123git config --global user.email &quot;mrtantan@gmail.com&quot;git config --global user.name &quot;mrtantan&quot; 此时你就可以用密码登录了，如果你还想实现免密登录(公钥登录)，就往下看吧 通过下面命令生成公私钥，邮箱就是上一步设置的邮箱，连续按三次空格就行 1ssh-keygen -t rsa -C &quot;youremail@example.com&quot; 公钥登录 在服务端的copssh安装目录下面的home\\你创建的用户.ssh 文件夹下面新建authorized_keys文件，注意没有扩展名 把客户端生成的公钥文件复制到上一步的authorized_keys文件里面（公钥文件是 C:\\Users\\当前用户名.ssh 文件夹下的 .pub格式文件。直接用文本编辑器打开复制里面的内容到authorized_keys文件，如果添加多个请换行） 关于下面这个选项，如果未选中的话，必须要有公钥才可以登录，不可以用密码登录。如果选中的话，会首先验证公钥，没有公钥在验证密码。 现在你就可以用公钥登录了。 遇到的2个坑 执行 git clone 时候会出现下面情况 123456789101112131415161718192021$ git clone git@1xx.2xx.3xx.2xx:/xxx/sample.gitCloning into 'sample'...@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!Someone could be eavesdropping on you right now (man-in-the-middle attack)!It is also possible that a host key has just been changed.The fingerprint for the ECDSA key sent by the remote host isx:1x:ex:6x:ax:cx:6x:6x:3x:3x:ex:3x:0x:cx:1x:5x.Please contact your system administrator.Add correct host key in /c/Users/xxx/.ssh/known_hosts to get rid of this message.Offending RSA key in /c/Users/xxx/.ssh/known_hosts:10ECDSA host key for 1xx.2xx.3xx.2xx has changed and you have requested strict checking.Host key verification failed.fatal: Could not read from remote repository.Please make sure you have the correct access rightsand the repository exists. 问题原因：服务端发生变化，加密的密钥改变，造成本地保存的密钥失败。 解决方案：删除 C:\\Users\\当前用户名.ssh\\known_hosts 文件中指定ip的密钥即可。 设置好公钥登录，出现permission denied 解决方法： 把安装copssh时候创建的用户删掉，然后再重新创建一个同名的账户，然后删掉copssh里面那个账户，在重新添加一遍。最后务必重启服务！注：重新添加的这个root账户必须设置隶属于administrator才可以。不然克隆项目会提示没有相关权限！！！","link":"/2018/11/04/2018-11-04/"},{"title":"Flutter开发环境的搭建(MacOS)","text":"安装Homebrew1/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; 安装/配置Git12345brew install gitgit config --global user.name &quot;John Doe&quot;git config --global user.email johndoe@example.com 下载/配置FlutterFlutter推荐上官网下载，不用使用Homebrew安装 下载地址：https://flutter.dev/docs/get-started/install/macos 下载好以后解压到一个位置，然后把路径添加大盘PATH里面，具体请看下面： 12345678910111213vim ~/.bash_profile// 在这个文件里面新增一行，记得把路径替换成你的路径，然后保存退出export PATH=/app/flutter/bin:$PATH// 重载一下source ~/.bash_profile// 输入命令测试一下是否配置正确flutter -h//这个命令会检查当前flutter的环境是否安装正常，前面有x的代表没有安装，需要安装。下面就会根据这些x进行环境搭建flutter doctor 安装Android Studio下载地址：https://developer.android.google.cn/studio/#downloads 配置Android Studio 使用Android Studio需要科学上网，打开AS后首先配置一下代理。然后根据引导进行下载SDK，SDK版本根据个人需求下载，不知道的下载最新的和一个老三代的就OK了。SDK下载好以后，再通过AVD下载一个模拟器。 然后打开Plugin下载Flutter插件。 安装安卓协议一路输入Y就可以了，这个安装好以后，安卓环境算是搭建好了，可以运行一下flutter doctor看一下目前环境情况 1flutter doctor --android-licenses ios环境搭建此时运行flutter doctor出现以下结果，你的可能与我的不同，依你的为准。 安装图上的提示按顺序安装对应的软件。 123456789brew install --HEAD libimobiledevicebrew install ideviceinstallerbrew install ios-deploybrew install cocoapodspod setup 安装完这些再运行flutter doctor，此时只有VScode环境没有配置好其他都应该正常了，如果你使用VCcode，可以再配置VScode环境，我不使用就不配置了。 配置Pub源对于网络不好的情况，可以配置以下Pub中国源。至此，Flutter MacOS平台环境搭建就OK了! 1234567vim ~/.bash_profileexport PUB_HOSTED_URL=https://pub.flutter-io.cnexport FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cnsource ~/.bash_profile","link":"/2019/01/10/2019-01-10/"},{"title":"哔哩哔哩视频下载请求头的分析及伪造","text":"B站视频下载需要用到2个接口，一个是通过Aid号获取视频基本信息和Cid号的接口，一个是通过视频Cid号获取下载地址的接口。 接口一1https://api.bilibili.com/x/web-interface/view?aid=29702317 接口二1https://api.bilibili.com/x/player/playurl?avid=29702317&amp;cid=51686571&amp;qn=74&amp;otype=json 注意事项 接口二在获取视频下载地址的时候，如果没有cookie信息的话最大只能获取到480P清晰度的视频，需要用账户登录后获取其cookie里面的SESSDATA值(SESSDATA有效期是一个月)请求的同时还要在headers中添加User-Agent和Host,具体请看下面： 12345headers: { 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:56.0) Gecko/20100101 Firefox/56.0', 'Host': 'api.bilibili.com', 'Cookie': 'SESSDATA=bd125cdd%2C1554519358%2C6d4df231' } 在下载视频的时候，headers也要进行伪造，具体看下面： 12345678910headers: { 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:56.0) Gecko/20100101 Firefox/56.0', 'Accept': '*/*', 'Accept-Language': 'en-US,en;q=0.5', 'Accept-Encoding': 'gzip, deflate, br', 'Range': 'bytes=0-', 'Referer': 'http://www.bilibili.com/video/av46174956/', 'Origin': 'https://www.bilibili.com', 'Connection': 'keep-alive' } 把Referer里面的av号替换成下载的视频的aid号","link":"/2019/03/01/2019-03-01/"},{"title":"chart.js图例与图表距离更改方法","text":"chart.js提供给开发者的配置项较少，往外暴露的自定义接口也较少。我在开发中发现图例与图表的距离是个固定值10像素不可更改，然后在研究chart.js的源代码发现了更改方法。 下载chart.bundle.js 定位到16159行 如果你的图例的水平排列，则改高。如果是垂直排列则改宽 123456789if (isHorizontal) { minSize.width = me.maxWidth; // fill all the width // 水平状态时图例到图表的距离，默认10px minSize.height = display ? 20 : 0; } else { // 垂直状态时图例到图表的距离，默认10px minSize.width = display ? 10 : 0; minSize.height = me.maxHeight; // fill all the height }","link":"/2019/03/12/2019-03-12/"},{"title":"chart.js更改LineChart的动画方向为从左到右","text":"问题探讨chart.js到LineChart图表默认动画方向是从下到上，没有像echart那样从左到右到效果。动画方向上写死到代码里面到，不可更改。我通过翻阅GitHub issues发现了有人提出过类似到问题，作者也简答了，可惜我能力有限没有理解作者到意思，那就从另一种思路开始解决吧。 问题解决我的思路是，把动画关闭也就是duration = 0，然后x轴数据固定，y轴数据通过update方法没次更新一个值，使用定时执行每50ms update一次，人眼就产生到从左到右到到感觉。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; &lt;img src=&quot;https://wong-1251253615.cos.ap-shanghai.myqcloud.com/blog/images/2019-03-13/chart.gif&quot; alt=&quot;&quot;&gt; &lt;/div&gt; &lt;div style=&quot;height: 300px;width: 500px&quot;&gt; &lt;canvas id=&quot;chart1&quot;&gt;&lt;/canvas&gt; &lt;/div&gt; &lt;script src=&quot;js/chart.js&quot;&gt;&lt;/script&gt; &lt;script&gt; var xData = ['x1','x2','x3','x4','x5','x6','x7','x8','x9','x10'], yData = [13,35,78,100,130,190,240,300,350,400], len = yData.length, count = 0; var myChart = new Chart('chart1',{ type: 'line', data: { labels: xData, datasets:[{ label: '测试', backgroundColor: 'rgba(54, 162, 235, .8)', // 背景填充色 borderColor: 'deepskyblue', // 路径颜色 pointBackgroundColor: 'rgba(54, 162, 235, .4)', // 数据点颜色 pointBorderColor: 'translate', // 数据点边框颜色 data: [] // 对应的值 }] }, options: { animation: { duration: 0 }, scales: { yAxes:[{ ticks:{ max: 400 } }] } } }); var timer = setInterval(() =&gt; { if(count &gt; len){ clearInterval(timer) } myChart.data.datasets.forEach(function(dataset){ dataset.data.push(yData[count]) }) myChart.update(); count++; },100) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;","link":"/2019/03/13/2019-03-13/"},{"title":"记录小程序开发中的一些坑和技巧","text":"URI编码问题在进行GET提交参数的时候，如果参数中有中文，记得要进行URI编码，encodeURI(参数) 如果不进行编码，ios设备正常。安卓设备会可能出现获取不到参数的情况。 新特性支持情况有些新特性可能会只支持高版本，对于低版本不支持，开发的时候要看清楚官方文档。例如：icon组件的size属性从2.4.0基础库开始支持rpx属性。如果用户客户端基础库小于这个版本，就会出现无法显示的问题，从而影响业务。 封装请求开发开始之前最好根据业务封装请求函数，这样会事半功倍。 建立工具函数库把一些常用的函数，例如格式化时间、封装的请求、去空格等等。放到util.js里面做为工具类库。 使用WXSWXS是小程序脚本语言，功能类似于Vue的过滤器。但是WXS的语法不全和js一样，具体看官方文档。 静态资源问题把大部分静态资源放到云上(除非你有特殊需求),把tab图标放到本地项目。这样会大大节省小程序资源。但是网络不好的情况，会出现静态资源加载慢的情况。 RESTful 接口独立把请求的接口路径进行独立，单独放到一个类似serve.js的文件里面，便于以后维护。把域名也独立出来。 分包加载在一些大项目的时候，根据业务可以使用分包加载技术。即把一些公用的页面放到主包，把其他的业务页面放到各个分包中，然后在app.js里面设置分包预加载。这样做可以节省网络开销，更有利于用户体验。但是，目前分包预加载只适用在app.js中配置，没有API接口。 rpx转px在某些场景中不能使用rpx，比如在使用小程序动画功能的时候，并不支持rpx，只能输入固定的px值，这就对屏幕适配很不友好了。下面我贴出我自用的rpx转px函数： 1234const rpxToPx = rpx =&gt; { let rpx1 = parseInt(rpx); return Math.floor(rpx1 / 750 * wx.getSystemInfoSync().windowWidth)}","link":"/2019/03/19/2019-03-19/"},{"title":"BilibiliVideoDownload v2.0.0更新 支持下载1080P高清视频","text":"运行 安装ffmpeg (视频合并转码会用到) git clone https://github.com/blogwy/BilibiliVideoDownload.git cd BilibiliVideoDownload npm i node app.js 版本 v2.0.0 2019-03-24 Node.js重构，以前的在vuejs分支 演示 实现的功能 视频下载 视频合并 视频转码 注意的问题 大会员视频不可以下载 请定期跟换cookie中的SESSDATA值，在utils/getUrl.js42行。跟换方法为：浏览器登陆bilibili账户，在开发者模式 –&gt; application –&gt; cookie中找到SESSDATA值替换即可，一般为一个月的实效。 在以后的版本会加上模拟登陆功能。 用到的接口 https://api.bilibili.com/x/player/playurl?avid=44743619&amp;cid=78328965&amp;qn=80&amp;otype=json https://api.bilibili.com/x/web-interface/view?aid=44743619","link":"/2019/03/24/2019-03-24/"},{"title":"Charles 抓包工具配置全过程","text":"下载根据你都平台进行下载 注册点击 帮助 -&gt; 注册 输入下面的信息即可 Registered Name: https://zhile.io License Key: 48891cf209c6d32bf4 mac端配置 点击Proxy -&gt; proxy setting 端口维持默认，在Enable transparent HTTP proxying打勾 点击Proxy -&gt; SSL proxy setting 点击add host为* port为443 点击help -&gt; SSL proxying 选择第二项载入证书，并且在钥匙串中把该证书设置为始终信任 ios端配置 点击help -&gt; SSL proxying 选择第五项，此时会出现如下页面 打开手机并连接和mac一样的网络，进入网络详情设置代理，安装上图应该设置服务器地址为192.168.31.221，端口为8888(具体情况请根据实际设置) 浏览器进入chls.pro/ssl，下载描述文件 手机依次打开设置 -&gt; 通用 -&gt; 描述文件与设备管理 选择刚刚下载的描述文件并安装。 手机依次设置 -&gt; 通用 -&gt; 关于本机 -&gt; 证书信任设置 信任当前证书。","link":"/2019/03/27/2019-03-27/"},{"title":"chart.js 设置图例Legend的对齐方式","text":"截止到今天，chart.js版本v2.8.0不支持配置Legend对齐方式，默认居中。但是我在Github Pull Request找到了解决方法。 https://github.com/chartjs/Chart.js/pull/6141 克隆 chart.js最新代码 git clone https://github.com/chartjs/Chart.js.git Building chart.js 1234567&gt; cd Chart.js&gt; npm install&gt; npm install -g gulp-cli&gt; gulp build 进入dist文件夹引入Chart.bundle.js或者Chart.bundle.min.js 在legend里面添加配置项align,align可选项为start/center/end,默认center","link":"/2019/04/09/2019-04-09/"},{"title":"H5端获取摄像头进行扫码(条形码&#x2F;二维码)","text":"getUserMedia了解HTML5的getUserMedia API为用户提供访问硬件设备媒体（摄像头、麦克风）的接口，基于该接口，开发者可以在不依赖任何浏览器插件的条件下访问硬件媒体设备。点击查看getUserMedia的api 代码Vue.js版 HTML123456789101112131415&lt;template&gt; &lt;div id=&quot;scanner&quot;&gt; &lt;div class=&quot;model&quot;&gt; &lt;div class=&quot;scanner-view&quot;&gt; &lt;div class=&quot;scanner-view-arrow arrow1&quot;&gt;&lt;/div&gt; &lt;div class=&quot;scanner-view-arrow arrow2&quot;&gt;&lt;/div&gt; &lt;div class=&quot;scanner-view-arrow arrow3&quot;&gt;&lt;/div&gt; &lt;div class=&quot;scanner-view-arrow arrow4&quot;&gt;&lt;/div&gt; &lt;div class=&quot;scanner-line&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;video class=&quot;video-view&quot; ref=&quot;video&quot; autoplay playsinline=&quot;true&quot; webkit-playsinline=&quot;true&quot;&gt;&lt;/video&gt; &lt;canvas ref=&quot;canvas&quot; width=&quot;478&quot; height=&quot;850&quot; style=&quot;display: none&quot;&gt;&lt;/canvas&gt; &lt;/div&gt;&lt;/template&gt; JS123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133&lt;script&gt; import jsQR from &quot;jsqr&quot;; import Quagga from &quot;quagga&quot;; export default { name: '', data() { return { cameraWidth: 0, cameraHeight: 0 } }, methods: { initVideo(constrains){ let _this = this; if(navigator.mediaDevices.getUserMedia){ //最新标准API navigator.mediaDevices.getUserMedia(constrains).then(_this.videoSuccess).catch(_this.videoError); } else if (navigator.webkitGetUserMedia){ //webkit内核浏览器 navigator.webkitGetUserMedia(constrains).then(_this.videoSuccess).catch(_this.videoError); } else if (navigator.mozGetUserMedia){ //Firefox浏览器 navagator.mozGetUserMedia(constrains).then(_this.videoSuccess).catch(_this.videoError); } else if (navigator.getUserMedia){ //旧版API navigator.getUserMedia(constrains).then(_this.videoSuccess).catch(_this.videoError); } }, videoSuccess(stream){ let video = this.$refs.video, _this = this; //将视频流设置为video元素的源 video.srcObject = stream; //播放视频 video.play(); video.oncanplay = function () { // 摄像头分辨率,手机480x640 console.log('摄像头分辨率'); console.log(video.videoWidth,video.videoHeight); _this.cameraWidth = video.videoWidth; _this.cameraHeight = video.videoHeight; // 发送图片进行识别 _this.readImg(); }; }, videoError(error){ console.log(&quot;访问用户媒体设备失败：&quot;,error.name,error.message); }, readImg(){ let video = this.$refs.video, canvas = this.$refs.canvas, context = canvas.getContext(&quot;2d&quot;), _this = this; let timer = setInterval(function () { context.drawImage(video,0,0,_this.cameraWidth,_this.cameraHeight,0,0,478,850); // 扫码条形码 let imgUri = canvas.toDataURL(); _this.readBarcode(imgUri,timer); // 扫码二维码 let imageData = context.getImageData(0, 0, 478, 850); _this.readQrcode(imageData.data,timer); },1000) }, readBarcode(imgBase64,timer){ let _this = this; Quagga.decodeSingle({ inputStream: { size: 1920 }, locator: { patchSize: &quot;medium&quot;, halfSample: false }, decoder: { readers: [{ format: &quot;code_128_reader&quot;, config: {} }] }, locate: true, src: imgBase64 }, function(result){ if (result){ if(result.codeResult) { console.log(result.codeResult); clearInterval(timer); _this.$emit('ondata',result.codeResult.code);// alert(&quot;扫码成功，结果是...&quot;+result.codeResult.code); } else { console.log(&quot;正在扫条形码...not detected&quot;); } }else { console.log(&quot;正在扫条形码...not detected&quot;); } }); }, readQrcode(data,timer){ let _this = this; let code = jsQR(data, 478, 850, { inversionAttempts: &quot;dontInvert&quot;, }); if (code){ clearInterval(timer); _this.$emit('ondata',code.data);// alert('扫码成功，结果是...' + code.data); }else { console.log('正在扫二维码...'); } } }, mounted(){ if (navigator.mediaDevices.getUserMedia || navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia){ //调用用户媒体设备，访问摄像头 this.initVideo({ video:{ height: 800, facingMode: { // 强制后置摄像头 exact: &quot;environment&quot; } } }); } else { alert(&quot;你的浏览器不支持访问用户媒体设备&quot;); } } }&lt;/script&gt; CSS1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586&lt;style scoped&gt; #scanner { font-family: 'Avenir', Helvetica, Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; position: relative; } .model{ box-sizing: border-box; width: 100vw; height: 100vh; position: relative; z-index: 88; border-top: calc((100vh - 60vw)/2) solid rgba(0,0,0,.2); border-bottom: calc((100vh - 60vw)/2) solid rgba(0,0,0,.2); border-right: 20vw solid rgba(0,0,0,.2); border-left: 20vw solid rgba(0,0,0,.2); } .scanner-view{ width: 100%; height: 100%; position: relative; border: 1px solid rgba(255,255,255,.3); z-index: 89; } .scanner-line{ position: absolute; width: 100%; height: 1px; background: #49FF46; border-radius: 20px; z-index: 90; animation: myScan 1s infinite alternate; } @keyframes myScan{ from { top: 0; } to { top: 34vh; } } .scanner-view-arrow{ position: absolute; width: 5vw; height: 5vw; border: 2px solid #09bb07; } .scanner-view-arrow.arrow1{ top: -1px; left: 0px; z-index: 99; border-right: none; border-bottom: none; } .scanner-view-arrow.arrow2{ top: -1px; right: 0px; z-index: 99; border-left: none; border-bottom: none; } .scanner-view-arrow.arrow3{ bottom: -1px; left: 0px; z-index: 99; border-right: none; border-top: none; } .scanner-view-arrow.arrow4{ bottom: -1px; right: 0px; z-index: 99; border-left: none; border-top: none; } .video-view{ position: absolute; width: 100vw; height: 100vh; object-fit: cover; top: 0px; left: 0px; z-index: 80; }&lt;/style&gt; 注意事项 video标签里面的视频会用黑边，可以在video标签的css中加入 object-fit: cover; ios中会出现点击视频全屏情况，可以在video标签中加入 playsinline=&quot;true&quot; webkit-playsinline=&quot;true&quot; 示例里面用了ElementUI的弹窗组件","link":"/2019/04/23/2019-04-23/"},{"title":"H5端获取摄像头并发送流数据给后端","text":"前置知识上一篇文章是前端调用摄像头，然后把流数据给到video标签，用canvas截取图像。前端调用库解析二维码和条形码。 这篇文章是前端获取到流数据发送给后端，后端解析成功后把结果返回前端。 getUserMedia获取摄像头/麦克风，回调成功会返回一个MediaStream，里面包含了请求的媒体类型的轨道。此流可以包含一个视频轨道（来自硬件或者虚拟视频源，比如相机、视频采集设备和屏幕共享服务等等）、一个音频轨道（同样来自硬件或虚拟音频源，比如麦克风、A/D转换器等等），也可能是其它轨道类型。MDN 1234567navigator.mediaDevices.getUserMedia(constraints).then(function(stream) { /* 使用这个stream stream */}).catch(function(err) { /* 处理error */}); MediaRecorder录制MediaStream，产生流数据。MDN 1234567891011121314151617navigator.mediaDevices.getUserMedia(constraints).then(function(stream) { /* 使用这个stream */ let mediaRecorder = new MediaRecorder(stream,{ mimeType : 'video/webm' }); // 每3秒调用一次，这个参数必须写 mediaRecorder.start(3000); mediaRecorder.onstart = function (e) { console.log('mediaRecorder 开始录制'); }; mediaRecorder.ondataavailable = function (e) { // e.data是视频的流数据Blob格式 console.log(e.data); };}).catch(function(err) { /* 处理error */}); demo实现1234567891011121314&lt;template&gt; &lt;div id=&quot;scanner&quot;&gt; &lt;div class=&quot;model&quot;&gt; &lt;div class=&quot;scanner-view&quot;&gt; &lt;div class=&quot;scanner-view-arrow arrow1&quot;&gt;&lt;/div&gt; &lt;div class=&quot;scanner-view-arrow arrow2&quot;&gt;&lt;/div&gt; &lt;div class=&quot;scanner-view-arrow arrow3&quot;&gt;&lt;/div&gt; &lt;div class=&quot;scanner-view-arrow arrow4&quot;&gt;&lt;/div&gt; &lt;div class=&quot;scanner-line&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;video class=&quot;video-view&quot; ref=&quot;video&quot; autoplay playsinline=&quot;true&quot; webkit-playsinline=&quot;true&quot;&gt;&lt;/video&gt; &lt;/div&gt;&lt;/template&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115&lt;script&gt; export default { name: '', data() { return { ws: '', url: 'wss://192.168.0.110/websocket' } }, methods: { initWebsocket(){ let _this = this; if (this.ws){ // 已经建立连接 }else { this.createWebsocket(); this.ws.onopen = function() { //设置发信息送类型为：ArrayBuffer _this.ws.binaryType = &quot;arraybuffer&quot;; }; this.ws.onmessage = function(e) { console.log(e); }; this.ws.onclose = function(e) { console.log(&quot;onclose: closed&quot;); _this.ws = ''; _this.createWebsocket(); }; this.ws.onerror = function(e) { console.log(&quot;onerror: error&quot;); _this.ws = ''; _this.createWebsocket(); } } }, createWebsocket(){ if ('WebSocket' in window){ this.ws = new WebSocket(this.url); }else { console.log('浏览器版本太低，请更换浏览器'); } }, initVideo(constrains){ let _this = this; if(navigator.mediaDevices.getUserMedia){ //最新标准API navigator.mediaDevices.getUserMedia(constrains).then(_this.videoSuccess).catch(_this.videoError); } else if (navigator.webkitGetUserMedia){ //webkit内核浏览器 navigator.webkitGetUserMedia(constrains).then(_this.videoSuccess).catch(_this.videoError); } else if (navigator.mozGetUserMedia){ //Firefox浏览器 navagator.mozGetUserMedia(constrains).then(_this.videoSuccess).catch(_this.videoError); } else if (navigator.getUserMedia){ //旧版API navigator.getUserMedia(constrains).then(_this.videoSuccess).catch(_this.videoError); } }, videoSuccess(stream){ let video = this.$refs.video, _this = this,chunks = []; //将视频流设置为video元素的源 video.srcObject = stream; //播放视频 video.play(); // 发送视频流 // 建立视频录制 MediaRecorder目前不支持ios let mediaRecorder = new MediaRecorder(stream,{ mimeType : 'video/webm' }); // 每..秒调用一次，这个参数必须写 mediaRecorder.start(3000); mediaRecorder.onstart = function (e) { console.log('mediaRecorder 开始录制'); }; mediaRecorder.ondataavailable = function (e) { chunks.push(e.data); console.log(e.data.type); let reader = new FileReader(); reader.addEventListener(&quot;loadend&quot;, function() { //reader.result是一个含有视频数据流的Blob对象,这里把blob转成ByteBuffer var videoBlob = new Uint8Array(reader.result); console.log('视频数据流'); if(reader.result.byteLength &gt; 0){ // websocket发送数据 _this.ws.send(videoBlob); } }); reader.readAsArrayBuffer(e.data); }; }, videoError(error){ console.log(&quot;访问用户媒体设备失败：&quot;,error.name,error.message); }, }, mounted(){ // 建立websocket连接 this.initWebsocket(); if (navigator.mediaDevices.getUserMedia || navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia){ //调用用户媒体设备，访问摄像头 this.initVideo({ video:{ height: 800, facingMode: { // 强制后置摄像头 exact: &quot;environment&quot; } } }); } else { alert(&quot;你的浏览器不支持访问用户媒体设备&quot;); } } }&lt;/script&gt; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586&lt;style scoped&gt; #scanner { font-family: 'Avenir', Helvetica, Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; position: relative; } .model{ box-sizing: border-box; width: 100vw; height: 100vh; position: relative; z-index: 88; border-top: calc((100vh - 60vw)/2) solid rgba(0,0,0,.2); border-bottom: calc((100vh - 60vw)/2) solid rgba(0,0,0,.2); border-right: 20vw solid rgba(0,0,0,.2); border-left: 20vw solid rgba(0,0,0,.2); } .scanner-view{ width: 100%; height: 100%; position: relative; border: 1px solid rgba(255,255,255,.3); z-index: 89; } .scanner-line{ position: absolute; width: 100%; height: 1px; background: #49FF46; border-radius: 20px; z-index: 90; animation: myScan 1s infinite alternate; } @keyframes myScan{ from { top: 0; } to { top: 34vh; } } .scanner-view-arrow{ position: absolute; width: 5vw; height: 5vw; border: 2px solid #09bb07; } .scanner-view-arrow.arrow1{ top: -1px; left: 0px; z-index: 99; border-right: none; border-bottom: none; } .scanner-view-arrow.arrow2{ top: -1px; right: 0px; z-index: 99; border-left: none; border-bottom: none; } .scanner-view-arrow.arrow3{ bottom: -1px; left: 0px; z-index: 99; border-right: none; border-top: none; } .scanner-view-arrow.arrow4{ bottom: -1px; right: 0px; z-index: 99; border-left: none; border-top: none; } .video-view{ position: absolute; width: 100vw; height: 100vh; object-fit: cover; top: 0px; left: 0px; z-index: 80; }&lt;/style&gt; 注意事项 截止到现在2019-05-06IOS端不支持MediaRecorder，所以IOS端到目前为止不能发送流数据。具体的支持情况可以查看caniuse！","link":"/2019/05/06/2019-05-06/"},{"title":"如何优雅的写小程序的分享函数","text":"背景知识微信小程序是可以通过点击右上角的menu来进行分享(转发)的。但是代码里面不可以写个公共函数来调用，必须每个页面写一遍，这就使得代码冗余了，业务修改的时候必须全都修改一遍，很容易忘记某一页。下面通过一种方法，先写一个公共的Page函数，在公共的Page里面写入分享代码，然后在具体的页面调用使用这个公共Page函数实现分享。 建立公共Page.js12345678910111213141516export default function (options = {}) { return Page({ onShareAppMessage(res) { if (res.from === 'menu') { // 来自右上角分享菜单 return { title: '分享标题', path: '页面路径', imageUrl: '分享图片路径' } } }, ...options });} 页面调用123456789101112import Page from '../../../utils/Page.js';Page({ // 注意，这时候Page里面不要出现onShareAppMessage函数 data: {}, onLoad(){}, onReady(){}, onShow(){}, onHide(){}, onUnload(){}, onPullDownRefresh(){}, onReachBottom(){}})","link":"/2019/05/08/2019-05-08/"},{"title":"localStorage数据跨域共享","text":"postMessagepostMessage是Html5引入的新API，可以安全地实现跨源通信。(跨页面/窗口/源等) 1otherWindow.postMessage(message, targetOrigin); message 要发送的数据，要求是字符串 targetOrigin 目标窗口的源，包括协议+主机+端口号 使用方法这里要实现A域和B域进行跨源访问localStorage，必须要引入第三者C域 A域12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;title&gt;A-页面&lt;/title&gt; &lt;style&gt; #child{ display: none; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h2&gt;A-页面&lt;/h2&gt;&lt;div&gt; &lt;label for=&quot;&quot;&gt;Key&lt;/label&gt; &lt;input type=&quot;text&quot; placeholder=&quot;输入key&quot; id=&quot;itemKey&quot;&gt;&lt;/div&gt;&lt;div&gt; &lt;label for=&quot;&quot;&gt;Value&lt;/label&gt; &lt;input type=&quot;text&quot; placeholder=&quot;输入value&quot; id=&quot;itemValue&quot;&gt;&lt;/div&gt;&lt;div&gt; &lt;button id=&quot;add&quot;&gt;添加&lt;/button&gt;&lt;/div&gt;&lt;iframe id=&quot;child&quot; src=&quot;http://c.test.com/&quot;&gt;&lt;/iframe&gt;&lt;script&gt; var add = document.getElementById(&quot;add&quot;); add.addEventListener('click',function () { var itemKey = document.getElementById(&quot;itemKey&quot;).value; var itemValue = document.getElementById(&quot;itemValue&quot;).value; if (itemKey &amp;&amp; itemValue){ window.frames[0].postMessage(JSON.stringify({type:&quot;set&quot;,key: itemKey ,value: itemValue}),'*'); alert('添加成功'); }else { alert('请输入key或者value'); } });&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; B域12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;title&gt;B-页面&lt;/title&gt; &lt;style&gt; #child{ display: none; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h2&gt;B-页面&lt;/h2&gt;&lt;div&gt; &lt;label for=&quot;&quot;&gt;Key&lt;/label&gt; &lt;input type=&quot;text&quot; placeholder=&quot;输入key&quot; id=&quot;itemKey&quot;&gt;&lt;/div&gt;&lt;div&gt; &lt;button id=&quot;getValue&quot;&gt;获取&lt;/button&gt;&lt;/div&gt;&lt;div id=&quot;itemValue&quot;&gt;&lt;/div&gt;&lt;iframe id=&quot;child&quot; src=&quot;http://c.test.com/&quot;&gt;&lt;/iframe&gt;&lt;script type=&quot;text/javascript&quot;&gt; var getValue = document.getElementById(&quot;getValue&quot;); getValue.addEventListener('click',function () { var itemKey = document.getElementById(&quot;itemKey&quot;).value; var itemValue = document.getElementById(&quot;itemValue&quot;); if (itemKey){ window.frames[0].postMessage(JSON.stringify({type:&quot;get&quot;,key:itemKey}),'*'); window.addEventListener('message', function(e) { if (e.origin &amp;&amp; e.origin === 'http://c.test.com'){ var data = e.data; itemValue.innerHTML = 'value为' + data; } }, false); }else { alert('请输入key'); } });&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; C域12345678910111213141516171819202122232425262728293031323334&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;title&gt;C-页面&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h2&gt;C-页面&lt;/h2&gt;&lt;script&gt; ;(function (win) { win.addEventListener(&quot;message&quot;,function(evt){ if(win.parent!= evt.source){ return } var options=JSON.parse(evt.data); if(options.type === &quot;get&quot;){ var data = win.localStorage.getItem(options.key); win.parent.postMessage(data, &quot;*&quot;); } if(options.type === &quot;set&quot;){ win.localStorage.setItem(options.key,options.value); } if(options.type === &quot;remove&quot;){ win.localStorage.removeItem(options.key); } if(options.type === &quot;clear&quot;){ win.localStorage.clear(); } },false); })(window);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 结果","link":"/2019/05/13/2019-05-13/"},{"title":"BilibiliVideoDownload v2.0.2更新,可以下载大会员清晰度","text":"运行 安装ffmpeg (视频合并转码会用到) git clone https://github.com/blogwy/BilibiliVideoDownload.git cd BilibiliVideoDownload npm i node app.js 版本 v2.0.2 2019-06-19 添加了大会员清晰度的支持(前提是必须要有一个大会员的SESSDATA) v2.0.1 2019-03-29 添加了分P检测，分P下载功能 v2.0.0 2019-03-24 Node.js重构，以前的在vuejs分支 演示 实现的功能 视频下载 视频合并 视频转码 分P检测 分P下载 大会员清晰度下载(1080p60,720p60,1080p+) 注意的问题 请定期跟换cookie中的SESSDATA值，在utils/getUrl.js42和96行。跟换方法为：浏览器登陆bilibili账户，在开发者模式 –&gt; application –&gt; cookie中找到SESSDATA值替换即可，一般为一个月的时效。(默认的SESSDATA是大会员的，可以下载大会员清晰度，时效到2019-07-17) 在以后的版本会加上模拟登陆功能。 win用户在命令行CHCP 65001把编码转换成UTF8，不然会出现乱码。 输入的是av号，不要带av 用到的接口 https://api.bilibili.com/x/player/playurl?avid=44743619&amp;cid=78328965&amp;qn=80&amp;otype=json https://api.bilibili.com/x/web-interface/view?aid=44743619","link":"/2019/06/25/2019-06-25/"},{"title":"Vue轻量级表单验证插件wy-validate v0.0.5","text":"目前功能还不全可能会有BUG 入门以Vue Cli2.x为例 引入在main.js中引入并use 123import WyValidate from 'wy-validate';Vue.use(VeeValidate); 页面使用12345678910&lt;input type=&quot;text&quot; name=&quot;wangyu1&quot; v-wyValidate=&quot;rules1&quot;&gt;&lt;span v-show=&quot;wyError.wangyu1 ? wyError.wangyu1.showMessage : false&quot;&gt;{{wyError.wangyu1 ? wyError.wangyu1.message : ''}}&lt;/span&gt;&lt;br&gt;&lt;input type=&quot;text&quot; name=&quot;wangyu2&quot; v-wyValidate=&quot;rules2&quot;&gt;&lt;span v-show=&quot;wyError.wangyu2 ? wyError.wangyu2.showMessage : false&quot;&gt;{{wyError.wangyu2 ? wyError.wangyu2.message : ''}}&lt;/span&gt;&lt;br&gt;&lt;input type=&quot;text&quot; name=&quot;wangyu3&quot; v-wyValidate=&quot;rules3&quot;&gt;&lt;span v-show=&quot;wyError.wangyu3 ? wyError.wangyu3.showMessage : false&quot;&gt;{{wyError.wangyu3 ? wyError.wangyu3.message : ''}}&lt;/span&gt; 定义规则12345678910111213141516171819export default { name: 'App', data() { return { rules1: [ { required: true,message: &quot;不能为空&quot;,trigger: &quot;blur&quot; }, { message: &quot;请输入正确的格式!&quot;,min: 5,max: 16,trigger: &quot;input&quot; } ], rules2: [ { required: true,message: &quot;不能为空&quot;,trigger: &quot;blur&quot; }, { type: &quot;email&quot;,message: &quot;请输入邮箱&quot;,trigger: &quot;input&quot; } ], rules3: [ { required: true,message: &quot;不能为空&quot;,trigger: &quot;blur&quot; }, { regex: '^1(3|4|5|7|8)\\\\d{9}$',message: &quot;请输入正确的电话号码&quot;,trigger: &quot;input&quot; } ] } } } 规则说明暂无 自定义指令名称默认指令名称为wyValidate，自定义则需要这样写，注意和其他指令命名冲突。 1Vue.use(WyValidate,{directiveName: &quot;这里写自定义的指令名称&quot;}); 注意事项(已知问题) 插件会向每个Vue实例的data中添加一个wyError，开发时请避免命名冲突 规则的数据类型为数组 务必给表单项添加name 插件使用自定义指令的方式进行表单验证，错误值会储存在wyError中，当前错误值为wyError.name值.message wyError.name值.message.validated 为当前表单项验证状态 如果当前项可以为空，必须写required: false这条规则","link":"/2019/07/01/2019-07-01/"},{"title":".gitignore文件的使用","text":"作用.gitignore文件可以过滤掉不需要提交到git库的文件。例如node_modules文件夹等等。 用法用文本编辑器打开.gitignore文件，一行写一条规则。 12345678910111213141516171819202122# Windows:Thumbs.dbehthumbs.dbDesktop.ini# MacOs.DS_Store# Python:*.py[cod]*.so*.egg*.egg-infodistbuild# Nodenode_modules/.deploy_git/public/package-lock.json*.txt 上述规则中public/代表忽略public文件夹，*.txt代表忽略根目录下所有txt文件 提交如果是项目中途加入的.gitignore文件，需要清除提交记录，git rm -r --cached .此命令不会删除本地文件 1234git rm -r --cached .git add .git commit -m 'update .gitignore'git push","link":"/2019/07/16/2019-07-16/"},{"title":"hexo博客搭建写作上传入门教程","text":"准备工作 安装node 安装git 配置git node和git安装好以后，命令行依次输入node -v npm -v git --version如果返回版本号则安装成功，然后开始配置git的邮箱和名字，把下面命令中的名字和邮箱替换成自己的就行 123git config --global user.name &quot;John Doe&quot;git config --global user.email johndoe@example.com 搭建博客安装hexo1npm install hexo-cli -g 开始搭建12345hexo init 项目名cd 项目名npm i 生成静态页面1hexo g 启动本地服务1hexo s 访问url，这时你应该就看到自己创建的hexo博客，目前只有一个测试博文，主题也是默认的。 更换主题写作注：hexo只支持md语法 在你写完的md文件的头部加入标识才可以被hexo正确识别并生成静态文件，标识一般分为文章标题、文章时间、标签，下面是这篇博文的文章标识，机子tags要有缩进。 1234567---title: hexo博客搭建写作上传教程date: 2019-08-01tags: - hexo - github--- 文章标识可以根据主题进行自定义，前提是你有一定的前端编码能力。由于本文是入门教程就不谈这些了。 当你加入了标识后，把这个md文件复制到/source/_posts文件夹中，md的文件名没有要求和文章名字没有关系。 部署github注：hexo博客可以部署到许多平台，具体请看官网教程 安装部署插件打开命令行并进入博客根目录，输入下面命令安装插件 1npm install hexo-deployer-git --save 配置github地址 打开博客的配置文件,根目录下面的_config.yml 找到deploy这个配置项，如果没有直接写一个，然后按照下面配置 12345678910deploy: type: git repo: git库路径 branch: 分支(不写代表主分支)# exampledeploy: type: git repo: https://github.com/blogwy/blogwy.github.io.git branch: 生成博客并部署12345678# 生成博客hexo g# 在上传前最好先启动本地服务，看一下效果hexo s# 部署hexo d","link":"/2019/08/01/2019-08-01/"},{"title":"小米路由器3刷开发版固件并安装MT工具箱翻墙","text":"注：本教程适用与绝大部分小米路由器，不局限于3代 准备工作在开始之前你需要申请一个小米账号并绑定要刷的路由器。 绑定方法：手机连接好小米路由器后，在应用市场下载小米wifi，登录并绑定。 刷入开发版固件下载固件打开下面网址下载对应的开发版固件 http://www1.miwifi.com/miwifi_download.html 备份数据 进入路由器后台 在常用设置 - 系统状态 里面点击新建备份 刷入系统还是在系统状态页面点击手动升级，选择你下载的开发版rom 获取root权限(开启ssh)注：获取root权限后小米路由器会失去保修 获取ssh文件和root密码进入这个网址http://www1.miwifi.com/miwifi_open.html 下拉网页点击开启ssh工具 开始ssh 把ssh文件放入U盘根目录，U盘必须是FAT/FAT32格式 U盘插入路由器 拔掉路由器电源，网线不用拔 用牙签等细的东西抵住路由器的reset键 插入电源(不要松开reset键) 等待几秒路由器的黄灯开始闪烁放开reset键，并拔掉U盘 过一会路由器灯会自动变为蓝色，这时代表root权限获取成功 电脑打开命令行连接ssh，密码为网页开启ssh的密码 1ssh root@192.168.31.1 安装MT工具箱3.0ssh连接上后，输入以下代码安装工具箱 1curl -s -k https://beta.misstar.com/download/$(uname -m)/mtinstall -o /tmp/mtinstall &amp;&amp; chmod +x /tmp/mtinstall &amp;&amp; /tmp/mtinstall 具体工具箱介绍请查看官方论坛以后工具箱如果有bug或者版本更新也请查看官方论坛 实测小米路由3MT工具箱地址为192.168.31.1:1024如果按照安装成功后给的端口进入会出现无法访问 安装SS插件翻墙MT工具箱3.0集成了SS插件(支持SS/SSR)，点击安装即可。","link":"/2019/08/04/2019-08-04/"},{"title":"自己写了一个Vue表单验证插件","text":"轻量级表单验证插件，目前功能还不全可能会有BUG 入门以Vue2.x为例 引入在main.js中引入并use 123import WyValidate from 'wy-validate';Vue.use(WyValidate); 页面使用普通验证添加v-validate自定义指令和v-validatecss类名，data-error目前可有可无 123&lt;div&gt; &lt;input type=&quot;text&quot; class=&quot;v-validate&quot; v-validate=&quot;rules1&quot; data-error=&quot;&quot; v-model=&quot;data&quot;/&gt;&lt;/div&gt; 添加错误提示样式,类名为is-error-span，是写死在插件里的。这里给出一个简单的样式 123456789.is-error-span{ color: #f56c6c!important; font-size: 14px!important; line-height: initial!important; padding-top: 3px!important; position: absolute!important; top: 100%!important; left: 0!important;} 按钮触发验证 在button上加入v-submit=&quot;'testSubmit'&quot;,testSubmit为验证成功后的函数名。必须加单引号，不然会被认为是变量。 1&lt;button v-submit=&quot;'testSubmit'&quot;&gt;确认&lt;/button&gt; 特殊情况 对于一些不方便写v-submit的时候可以参考以下 12345678910let elements = document.getElementsByClassName('v-validate');let evObj = document.createEvent('Event');evObj.initEvent('input', true, true);for (let element of elements) { element.dispatchEvent(evObj);}let errorInputs = document.getElementsByClassName('is-error-span');if(errorInputs.length === 0){ // 这里写验证成功后的代码} 定义规则规则分为4类。是否为空、数字范围、类型、自定义正则 123456789101112131415161718192021222324252627282930313233343536373839404142export default { name: 'app', data() { return { // 是否为空 rules1: { type: 0, required: true, message1: &quot;不能为空&quot; }, // 两个数之间 rules2: { type: 1, // required可选值为true/false required: true, // message1为required: true时候的提示 message1: &quot;不能为空&quot;, // message1为数字不在范围时候的提示 message2: &quot;请输入2位数&quot;, min: 10, max: 99 }, // 数据类型 rules3: { type: 3, required: true, message1: &quot;不能为空&quot;, // textType可选值为 number email url chinese cellphonenumber(手机) phonenumber(固话) textType: 'number', message2: &quot;请输入数字&quot; }, // 自定义正则 rules4: { type: 4, required: true, message1: &quot;不能为空&quot;, regex: '', message2: &quot;请输入2位数&quot; } } }} 规则说明无 自定义指令名称默认指令名称为wyValidate，自定义则需要这样写，注意和其他指令命名冲突。 1Vue.use(WyValidate,{directiveName: &quot;这里写自定义的指令名称&quot;}); 注意事项 input的父级标签要添加position: relative 注意自定义指令和其他插件冲突 注意错误提示的css可能会被自身的css冲突 错误提示的css类名为is-error-span可以自定义 不支持checkbox","link":"/2019/08/16/2019-08-16/"},{"title":"Vue.js网页打印小票实例(二维码&#x2F;条形码)","text":"设备 Deli DL-730c 纸张是模切标签(100mm*100mm) chrome浏览器打印 注意事项 本人使用的纸张之间是有间隙的，请用直尺测量并在打印首选项里面设置好 这台打印机默认有一个垂直偏移，请事先在首选项里面设置为0 条形码、二维码生成库 二维码 条形码 源代码123456789101112131415161718192021222324252627282930313233343536373839&lt;template&gt; &lt;div&gt; // 用iframe实现区域打印 &lt;iframe ref=&quot;printIframe&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;margin: 0px;padding: 0px;width: 0px;height: 0px;&quot;&gt;&lt;/iframe&gt; // 这里是需要打印的内容，根据需求可以隐藏也可以显示 &lt;div ref=&quot;odiv&quot; style=&quot;display: none&quot;&gt; // 纸张是100mm*100mm,根据公式计算长宽大约是377px(可以根据实际进行调整) &lt;div v-for=&quot;(item,index) in printInfo&quot; style=&quot;width: 377px;height: 378px;position: relative;box-sizing: border-box&quot;&gt; &lt;div style=&quot;position: absolute;top: 25px; left: 5px;&quot;&gt; &lt;div style=&quot;font-size: 18px;font-weight: 800&quot;&gt;测试信息&lt;/div&gt; &lt;div style=&quot;font-size: 12px;font-weight: 600&quot;&gt;{{ item.time }}&lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;position: absolute;top: 10px; right: 10px;&quot;&gt; &lt;img :src=&quot;item.barCodeData | creatBarCode&quot;/&gt; &lt;/div&gt; // 打印内容的css需要使用行内式，这样才能保证打印时候css起作用 &lt;div style=&quot;position: absolute;top: 70px; left: 5px;width: 365px;height: 1px;border: none;border-top: 1px solid #555&quot;&gt;&lt;/div&gt; &lt;div style=&quot;width:365px;position: absolute;top: 73px; left: 5px;font-size: 13px;display: flex;justify-content: center;align-items: center;flex-wrap: wrap;&quot;&gt; &lt;div style=&quot;box-sizing: border-box;flex: none;width: 50%;line-height: 2&quot;&gt;测试编码：&lt;span style=&quot;font-weight: 600&quot;&gt;{{ item.sapNo }}&lt;/span&gt;&lt;/div&gt; &lt;div style=&quot;box-sizing: border-box;flex: none;width: 50%;line-height: 2&quot;&gt;测试名称：&lt;span style=&quot;font-weight: 600&quot;&gt;{{ item.mName }}&lt;/span&gt;&lt;/div&gt; &lt;div style=&quot;box-sizing: border-box;flex: none;width: 50%;line-height: 2&quot;&gt;测试日期：&lt;span style=&quot;font-weight: 600&quot;&gt;{{ item.sDate }}&lt;/span&gt;&lt;/div&gt; &lt;div style=&quot;box-sizing: border-box;flex: none;width: 50%;line-height: 2&quot;&gt;测试一项：&lt;span style=&quot;font-weight: 600&quot;&gt;{{ item.bDate }}&lt;/span&gt;&lt;/div&gt; &lt;div style=&quot;box-sizing: border-box;flex: none;width: 50%;line-height: 2&quot;&gt;测试二项：&lt;span style=&quot;font-weight: 600&quot;&gt;{{ item.spec }}&lt;/span&gt;&lt;/div&gt; &lt;div style=&quot;box-sizing: border-box;flex: none;width: 50%;line-height: 2&quot;&gt;测试三项：&lt;span style=&quot;font-weight: 600&quot;&gt;{{ item.gys }}&lt;/span&gt;&lt;/div&gt; &lt;div style=&quot;box-sizing: border-box;flex: none;width: 50%;line-height: 2&quot;&gt;测试四项：&lt;span style=&quot;font-weight: 600&quot;&gt;{{ item.cctj }}&lt;/span&gt;&lt;/div&gt; &lt;div style=&quot;box-sizing: border-box;flex: none;width: 50%;line-height: 2&quot;&gt;测试五项：&lt;span style=&quot;font-weight: 600&quot;&gt;{{ item.dkc }}&lt;/span&gt; kg&lt;/div&gt; &lt;div style=&quot;box-sizing: border-box;flex: none;width: 50%;line-height: 2&quot;&gt;测试六项：&lt;span style=&quot;font-weight: 600&quot;&gt;{{ item.dq }}&lt;/span&gt; 天&lt;/div&gt; &lt;div style=&quot;box-sizing: border-box;flex: none;width: 50%;line-height: 2&quot;&gt;测试七项：&lt;span style=&quot;font-weight: 600&quot;&gt;{{ item.is }}&lt;/span&gt;&lt;/div&gt; &lt;div style=&quot;box-sizing: border-box;flex: none;width: 100%;line-height:2&quot;&gt;测试八项：&lt;span style=&quot;font-weight: 600&quot;&gt;{{ item.gmy }}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;position: absolute;top: 235px; left: 5px;width: 365px;height: 1px;border: none;border-top: 1px solid #555&quot;&gt;&lt;/div&gt; &lt;div style=&quot;position: absolute;top: 252px; left: 66%;&quot;&gt; &lt;img :src=&quot;item.qrCodeData | creatQrCode&quot;/&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;button @click=&quot;printpage()&quot;&gt;打印&lt;/button&gt; &lt;/div&gt;&lt;/template&gt; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970&lt;script&gt; import JsBarcode from 'JsBarcode'; import qrcode from 'qrcode'; export default { name: 'test', data() { return { printInfo: [ { barCodeData: '21312313213', qrCodeData: '测试二维码测试二维码测试二维码', time: '2019-09-09 12:12:00', sapNo: '123456', mName: '测试名字', sDate: '2019-09-09', bDate: '12月', spec: '袋装25公斤', gys: '测试测试', cctj: '冷藏', dkc: '1000', dq: '12', is: '否', gmy: '' } ] } }, methods:{ printpage(id){ // 拿到要打印区域的dom结构并设置到Iframe的srcdoc属性上面 var printIframe = this.$refs.printIframe; var newstr = this.$refs.odiv.innerHTML; printIframe.setAttribute('srcdoc',newstr); printIframe.onload = function () { console.log(printIframe.contentWindow); // 去掉iframe里面的dom的body的padding margin的默认数值 printIframe.contentWindow.document.body.style.padding = '0px'; printIframe.contentWindow.document.body.style.margin = '0px'; // 开始打印 printIframe.contentWindow.focus(); printIframe.contentWindow.print(); }; } }, filters: { creatBarCode(barCodeData){ let canvas = document.createElement(&quot;canvas&quot;); JsBarcode(canvas, barCodeData, { format: &quot;CODE128&quot;, displayValue: true, margin: 0, height: 40, width: 1.5, fontSize: 12, textMargin: 0 }); return canvas.toDataURL(&quot;image/png&quot;); }, creatQrCode(qrCodeData){ let typeNumber = 10; let errorCorrectionLevel = 'L'; qrcode.stringToBytes = qrcode.stringToBytesFuncs['UTF-8']; let qr = qrcode(typeNumber, errorCorrectionLevel); qr.addData(qrCodeData,'Byte'); qr.make(); return qr.createDataURL(2,0); } }, }&lt;/script&gt; 打印预览 单位转换1234567891011/** * @description mm转px,此函数只适用于屏幕为96DPI的设备(大部分都是) * @method mmTopx * @param {number} mm 毫米 * @return {number} px 像素 */function mmToPx(mm) { var m = parseFloat(mm); var px = (m*0.0393*96).toFixed(2); return px;}","link":"/2019/07/25/2019-07-25/"},{"title":"[vue组件]日期时间选择器","text":"安装引入日期时间选择器 使用123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;template&gt; &lt;div style=&quot;margin-left: 30px&quot;&gt; &lt;date-picker mode=&quot;datetime&quot; :default-time=&quot;1566270847000&quot; :min-time=&quot;1562037247000&quot; :max-time=&quot;1567394047000&quot; @change=&quot;getTime&quot;&gt;&lt;/date-picker&gt; &lt;date-picker mode=&quot;date&quot; format=&quot;YYYY年MM月DD日&quot; :min-time=&quot;1562037247000&quot; :max-time=&quot;1567394047000&quot; @change=&quot;getTime&quot;&gt;&lt;/date-picker&gt; &lt;date-picker mode=&quot;month&quot; :min-time=&quot;1496128969000&quot; :max-time=&quot;1590823369000&quot; @change=&quot;getTime&quot;&gt;&lt;/date-picker&gt; &lt;date-picker mode=&quot;year&quot; @change=&quot;getTime&quot;&gt;&lt;/date-picker&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; import datePicker from './components/datePicker.vue' export default { name: '', components: { datePicker }, data() { return {} }, methods: { getTime(date){ console.log(date); } } }&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt; 属性 属性 描述 类型 备注 mode 日期类型 Number(时间戳) 没有默认值,必填,可选值为(date/datetime/month/year) placeholderText 没有选择日期时的占位文字 String 请选择日期/月份/年份 defaultTime 默认时间 Number(时间戳) 没有默认值,选填 minTime 最小可选时间 Number(时间戳) 没有默认值,选填 maxTime 最大可选时间 Number(时间戳) 没有默认值,选填 format 格式化显示日期 String YYYY-MM-DD hh:mm:ss pickerWidth 组件宽 Number 250/155","link":"/2019/08/22/2019-08-22/"},{"title":"bilibili通过弹幕查询用户","text":"弹幕获取首先通过视频aid获取cid视频的aid又称av号，是视频url中av后面的一串数字 https://www.bilibili.com/av67289687 67289687就是这个视频的aid 使用aid去请求这个api https://api.bilibili.com/x/web-interface/view?aid=${aid} 即可得到cid 通过cid获取视频弹幕信息拿到cid以后请求这个api可以得到弹幕信息，xml格式。 https://api.bilibili.com/x/v1/dm/list.so?oid=${cid} 文件转码应为返回的xml弹幕文件的content-encoding为deflate,需要用到zlib来解压。 解码用户idb站弹幕是这样的形式 1&lt;d p=&quot;53.87100,1,25,16777215,1562172618,0,13ba9291,18366041035898882&quot;&gt;艾欧尼亚&lt;/d&gt; d标签值是弹幕内容，属性p里面依次是弹幕的出现时间,模式,字体大小,颜色,发送时间戳,弹幕池,用户Hash,数据库ID 其中要用的是用户Hash。用户Hash只是简单的把数字ID用ITU I.363.5算法进行了Hash。 有两种方法把用户Hash转成uid 使用第三方接口 1https://biliquery.typcn.com/api/user/hash/用户Hash 自给自足 我这里有一个例子，借鉴了bilibili-helper 12345678910111213141516171819const Crc32Engine = require('./crc32');const crcEngine = new Crc32Engine();const hashToUid = hash =&gt; { let extracted = /^b(\\d+)$/.exec(hash); let uids = []; if (extracted &amp;&amp; extracted[1]) { uids = [extracted[1]]; } else { uids = crcEngine.crack(hash); } return uids[uids.length-1];};module.exports = { hashToUid};// crc32: https://github.com/blogwy/BilibiliVideoDownload/blob/master/utils/danmu/crc32.js 访问用户主页1https://space.bilibili.com/uid","link":"/2019/09/12/2019-09-12/"},{"title":"WEB端扫描二维码和条形码[优化版]","text":"之前写过一个demo也是web端扫描条形码和二维码，但是有个问题。程序扫描的是整个可视区域范围不是扫描框，这就会导致如果扫描框也有条码会出错。这次的例子修复了这个问题，扫描区域就是扫描框的区域。而且对不同情况都有良好的兼容，可以把可视区域和扫描框长宽传入组件，组件会进行计算从摄像头中得到扫描框的图像进行识别。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194Vue.component('scanner-box',{ props: { // 视口长宽 viewportWidth:{ type: Number }, viewportHeight:{ type: Number }, // 扫描框长宽 scanWidth:{ type: Number }, scanHeight:{ type: Number } }, data(){ return { // 摄像头分辨率 cameraWidth: 0, cameraHeight: 0, canvas1Width: 0, canvas1Height: 0 } }, methods: { handleImageSize(video,item1,item2){ let videoWidth = this.cameraWidth, videoHeight = this.cameraHeight, viewWidth = this.viewportWidth, viewHeight = this.viewportHeight, scanW = this.scanWidth, scanH = this.scanHeight, w,h; let context1 = item1.getContext(&quot;2d&quot;), context2 = item2.getContext(&quot;2d&quot;); if (viewWidth/viewHeight &gt; videoWidth/videoHeight){ // 视口比大于摄像头分辨率比 =&gt; 摄像头高度需要裁剪 w = viewWidth,h = parseInt(w/(videoWidth/videoHeight)); }else if (viewWidth/viewHeight &lt; videoWidth/videoHeight){ // 视口比小于摄像头分辨率比 =&gt; 摄像头宽度需要裁剪 h = viewHeight,w = parseInt(h*(videoWidth/videoHeight)); }else { // 视口比等于摄像头分辨率比 =&gt; 摄像头长宽都不需要裁剪 w = viewWidth,h = viewHeight; } this.canvas1Width = w; this.canvas1Height = h; this.$nextTick(() =&gt; { context1.drawImage(video,0,0,videoWidth,videoHeight,0,0,w,h); context2.drawImage(item1,(w/2)-(scanW/2),(h/2)-(scanH/2),scanW,scanH,0,0,scanW,scanH); }) }, initVideo(constrains){ let _this = this; if(navigator.mediaDevices.getUserMedia){ //最新标准API navigator.mediaDevices.getUserMedia(constrains).then(_this.videoSuccess).catch(_this.videoError); } else if (navigator.webkitGetUserMedia){ //webkit内核浏览器 navigator.webkitGetUserMedia(constrains).then(_this.videoSuccess).catch(_this.videoError); } else if (navigator.mozGetUserMedia){ //Firefox浏览器 navagator.mozGetUserMedia(constrains).then(_this.videoSuccess).catch(_this.videoError); } else if (navigator.getUserMedia){ //旧版API navigator.getUserMedia(constrains).then(_this.videoSuccess).catch(_this.videoError); } }, videoSuccess(stream){ let video = this.$refs.video, _this = this; //将视频流设置为video元素的源 video.srcObject = stream; //播放视频 video.play(); video.oncanplay = function () { // 摄像头分辨率 console.log('摄像头分辨率'); console.log(video.videoWidth + 'x' + video.videoHeight); // 视口分辨率 console.log('视口分辨率'); console.log(window.innerWidth + 'x' + window.innerHeight); _this.cameraWidth = video.videoWidth; _this.cameraHeight = video.videoHeight; // 发送图片进行识别 _this.readImg(); }; }, videoError(error){ console.log(&quot;访问用户媒体设备失败：&quot;,error.name,error.message); }, readImg(){ let video = this.$refs.video, canvas1 = this.$refs.canvas1, context = canvas1.getContext(&quot;2d&quot;), canvas2 = this.$refs.canvas2, context2 = canvas2.getContext(&quot;2d&quot;), _this = this; let timer = setInterval(function () { _this.handleImageSize(video,canvas1,canvas2); // 扫码条形码 let imgUri = canvas2.toDataURL(); _this.readBarcode(imgUri,timer); // 扫码二维码 let imageData = context2.getImageData(0, 0, _this.scanWidth, _this.scanHeight); _this.readQrcode(imageData.data,timer); },500) }, readBarcode(imgBase64,timer){ let _this = this; Quagga.decodeSingle({ decoder: { readers: [&quot;code_128_reader&quot;] }, // locate为true程序会自动寻找条码，找不到不会出结果。会对一些清晰度不高的图片有影响 locate: false, src: imgBase64 }, function(result){ if (result){ if(result.codeResult){ // 扫描成功后清除定时器，停止扫描 // clearInterval(timer); _this.$emit('ondata',{ type: 'barcode', result: result.codeResult.code}); }else { console.log(&quot;正在扫条形码...not detected&quot;); } }else { console.log(&quot;正在扫条形码...not detected&quot;); } }); }, readQrcode(data,timer){ let _this = this; let code = jsQR(data, _this.scanWidth, _this.scanHeight, { // 只支持白底黑码，默认支持白底黑码和黑底白码。 inversionAttempts: &quot;dontInvert&quot;, }); if (code){ // clearInterval(timer); _this.$emit('ondata',{ type: 'qrcode', result: code.data}); //_this.$refs.audio.play(); }else { console.log('正在扫二维码...'); } } }, mounted(){ // 检测浏览器是否支持getUserMedia if (navigator.mediaDevices.getUserMedia || navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia){ //调用用户媒体设备，访问摄像头 this.initVideo({ video:{ width: window.innerWidth*2, facingMode: { // 强制后置摄像头,pc端做测试请注释掉，不然会报错 // exact: &quot;environment&quot; } } }); } else { alert(&quot;你的浏览器不支持访问用户媒体设备&quot;); } Common.getOrientationChange(function (res) { console.log(res); if (res){ window.location.reload(); } }); }, template: `&lt;div id=&quot;scanner&quot;&gt; &lt;div class=&quot;model&quot;&gt; &lt;div class=&quot;scanner-view&quot;&gt; &lt;div class=&quot;scanner-view-arrow arrow1&quot;&gt;&lt;/div&gt; &lt;div class=&quot;scanner-view-arrow arrow2&quot;&gt;&lt;/div&gt; &lt;div class=&quot;scanner-view-arrow arrow3&quot;&gt;&lt;/div&gt; &lt;div class=&quot;scanner-view-arrow arrow4&quot;&gt;&lt;/div&gt; &lt;div class=&quot;scanner-line&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;scanner-text&quot;&gt;放入框内，自动扫描&lt;/div&gt; &lt;/div&gt; &lt;audio id=&quot;audio&quot; ref=&quot;audio&quot; src=&quot;./css/success.mp3&quot; style=&quot;width: 0px;height: 0px&quot;&gt;&lt;/audio&gt; &lt;video class=&quot;video-view&quot; ref=&quot;video&quot; autoplay playsinline=&quot;true&quot; webkit-playsinline=&quot;true&quot;&gt;&lt;/video&gt; &lt;canvas ref=&quot;canvas1&quot; :width=&quot;canvas1Width&quot; :height=&quot;canvas1Height&quot; style=&quot;display: none&quot;&gt;&lt;/canvas&gt; &lt;canvas ref=&quot;canvas2&quot; :width=&quot;scanWidth&quot; :height=&quot;scanHeight&quot; style=&quot;display: none&quot;&gt;&lt;/canvas&gt; &lt;/div&gt;`}); 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185#app { /*width: 100%;*/}.left, .right { width: 50%; float: left;}.left { background: #f7f7f7; height: 100vh;}.stockSearch-title { background: #fff; border: 1px solid #dcdfe6; color: #606266; font-weight: 600; height: 40px; line-height: 40px; position: relative; text-align: center;}.stockSearch-title a { color: #79bbff; font-size: 14px; position: absolute; left: 20px;}.stockSearch-title .iconLeft-1 { font-size: 14px; font-weight: 600;}.stockSearch-result { background: #fff; box-sizing: border-box; width: 92%; min-height: 500px; margin: 20px auto; padding: 12px 20px 15px 20px;}.stockSearch-result .caption{ color: #4db3a2; font-weight: 600; padding: 10px 0;}.table .is-waiting{ color: #c0c4cc; font-size: 16px; text-align: center; padding: 20px;}.table .hide { display: none;}.table table { background: #fff; border: 1px solid #dddddd; border-spacing: 0; border-collapse: collapse; color: #606266; font-size: 14px; width:100%;}.td-stock-title { font-weight: 600; padding: 8px; text-align: center;}.table tr:nth-of-type(5){ color: #428bca;}.table td { border: 1px solid #ddd;}.table td &gt;div div { padding: 4px 8px;}.table td &gt;div div:nth-child(odd) { background: #f9f9f9;}.table-num { /*color: #303133;*/ font-weight: 600;}.table-current { color: #fff; background: #64b1f1; font-size: 12px; padding: .2em .3em; border-radius: 4px;}/* 右侧扫码 */#scanner { font-family: 'Avenir', Helvetica, Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; position: relative;}.model{ box-sizing: border-box; width: 50vw; height: 100vh; position: relative; z-index: 88; border-top: calc((100vh - 30vw)/2) solid rgba(0,0,0,.2); border-bottom: calc((100vh - 30vw)/2) solid rgba(0,0,0,.2); border-right: 10vw solid rgba(0,0,0,.2); border-left: 10vw solid rgba(0,0,0,.2);}.scanner-view{ box-sizing: border-box; width: 100%; height: 100%; position: relative; border: 1px solid rgba(255,255,255,.3); z-index: 89;}.scanner-line{ position: absolute; width: 100%; height: 1px; background: #49FF46; /*background: radial-gradient(ellipse,#71e52c,#001800);*/ border-radius: 20px; z-index: 90; animation: myScan 1s infinite alternate;}@keyframes myScan{ from { top: 0; } to { top: 30vw; }}.scanner-view-arrow{ position: absolute; width: 5vw; height: 5vw; border: 2px solid #09bb07;}.scanner-view-arrow.arrow1{ top: -1px; left: -1px; z-index: 99; border-right: none; border-bottom: none;}.scanner-view-arrow.arrow2{ top: -1px; right: -1px; z-index: 99; border-left: none; border-bottom: none;}.scanner-view-arrow.arrow3{ bottom: -1px; left: -1px; z-index: 99; border-right: none; border-top: none;}.scanner-view-arrow.arrow4{ bottom: -1px; right: -1px; z-index: 99; border-left: none; border-top: none;}.scanner-text { color: #909399; font-size: 20px; height: 40px; line-height: 40px; text-align: center; margin-top: 20px;}.video-view{ position: absolute; width: 50vw; height: 100vh; object-fit: cover; top: 0; left: 0; z-index: 80;}","link":"/2019/09/20/2019-09-20/"},{"title":"electron-vue 快速入门","text":"介绍准备重构BilibiliVideoDownload,就开始学习electron，再加上自己是vue技术栈就选用了electron-vue electron-vue官网：点击访问 electron官网：点击访问 搭建使用vue init确保安装@vue/cli @vue/cli-init 123456789# 安装脚手架样板代码vue init simulatedgreg/electron-vue my-project# 安装依赖并运行你的程序cd my-projectyarn # 或者 npm installyarn run dev # 或者 npm run dev 踩坑 npm install 阶段遇到了electron安装超时的问题，有两种方法解决 安装cnpm运行cnpm install 设置npm代理 npm run dev 阶段遇到了process is not defined 删除node_modules 安装10.x.x版本的node，我本地是12.0.0，通过n模块安装的10.16.0 实现两个版本node共存。 按照issues里面的做法，会导致其他问题，最稳定的就是降低自己的node版本到10.x.x 技术细节主进程和渲染进程介绍Electron 运行 package.json 的 main 脚本的进程被称为主进程。 在主进程中运行的脚本通过创建web页面来展示用户界面。 一个 Electron 应用总是有且只有一个主进程。 由于 Electron 使用了 Chromium 来展示 web 页面，所以 Chromium 的多进程架构也被使用到。 每个 Electron 中的 web 页面运行在它自己的渲染进程中。更多 通信使用ipcRenderer和ipcMain 模块可以实现通信 下面是一个打开系统资源管理器的例子 渲染进程： 12345678import { ipcRenderer } from 'electron'openSelectDir() { ipcRenderer.send('open-directory-dialog','openDirectory'); ipcRenderer.on('selectedItem',(e,path) =&gt; { console.log(path); })} 主进程： 1234567import { dialog, ipcMain } from 'electron'ipcMain.on('open-directory-dialog',(e,p) =&gt; { dialog.showOpenDialog({properties: [p]},files =&gt; { e.sender.send('selectedItem', files[0]) })})","link":"/2020/01/21/2020-01-21/"},{"title":"B站获取SESSDATA","text":"注：大会员账号的SESSDATA才可以下载大会员专属视频 chrome浏览器打开bilibili 并登录 网页右键点击检查 点开下拉菜单依次选择application -&gt; cookies -&gt; www.bilibili.com 右边选择SESSDATA，复制SESSDATA值","link":"/2020/01/25/2020-01-25/"},{"title":"electron中使用flash插件","text":"1234567891011121314151617181920212223let pluginName = nulllet pluginPath = nullswitch (process.platform) { case 'win32': pluginName = 'pepflashplayer.dll' break case 'darwin': pluginName = 'PepperFlashPlayer.plugin' break case 'linux': pluginName = 'libpepflashplayer.so' break}// 根据你的路径修改，这里做打包后路径判断if (__dirname.includes(&quot;.asar&quot;)) { pluginPath = path.join(process.resourcesPath + '/lib/' + pluginName)} else { pluginPath = path.resolve(__dirname + '/lib/' + pluginName)}app.commandLine.appendSwitch('ppapi-flash-path', pluginPath)app.commandLine.appendSwitch('ppapi-flash-version', '32.0.0.363') 三个平台flash下载地址：https://wong-1251253615.cos.ap-shanghai.myqcloud.com/blog/images/2020-05-14/flash.7z","link":"/2020/04/14/2020-05-14/"},{"title":"electron中使用ffmpeg","text":"依赖库 fluent-ffmpeg ffmpeg的node版驱动软件，提供丰富的API调用ffmpeg，可以指定ffmpeg路径 @ffprobe-installer 根据当前系统下载对应版本的ffmprobe @ffmpeg-installer 根据当前系统下载对应版本的ffmpeg demo12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455import { app } from 'electron'const ffmpegPath = require('@ffmpeg-installer/ffmpeg')const ffprobePath = require('@ffprobe-installer/ffprobe')const ffmpeg = require('fluent-ffmpeg')// asar打包后路径有所变化if (process.env.NODE_ENV !== 'development') { ffmpeg.setFfmpegPath(ffmpegPath.path.replace('app.asar', 'app.asar.unpacked')) ffmpeg.setFfprobePath(ffprobePath.path.replace('app.asar', 'app.asar.unpacked'))} else { ffmpeg.setFfmpegPath(ffmpegPath.path) ffmpeg.setFfprobePath(ffprobePath.path)}// rtsp/rtmp直播地址转m3u8例子export default class VideoServer { constructor (video) { this.liveUrl = video.liveUrl; this.m3u8Path = video.m3u8Path; this.ffmpegCommand; } killFfmpegCommand () { if (this.ffmpegCommand) { this.ffmpegCommand.kill() } } startTransCode (fun) { this.ffmpegCommand = ffmpeg(this.liveUrl) .outputOptions([ '-fflags flush_packets', '-max_delay 1', '-an', '-flags', '-global_header', '-hls_time 1', '-hls_list_size 3', '-hls_wrap 3', '-vcodec copy' ]) .on('start', function(e) { console.log('---开始转码---') console.log(e); fun('info', e) }) .on('end', function() { console.log('file has been converted succesfully'); }) .on('error', function(err) { console.log('an error happened: ' + err.message); fun('error') }) .save(this.m3u8Path) }}","link":"/2020/05/15/2020-05-15/"},{"title":"Electron-Vue 环境搭建 + 基本入门 + 软件打包 + 软件更新","text":"electron是一个使用JS，CSS，HTML构建跨平台的桌面应用程序的框架，微软的VScode就是使用该技术开发 环境搭建 安装node环境 由于使用的是electron-vue脚手架工具，首先要安装vuecli 123npm install -g @vue/cli# ORyarn global add @vue/cli 起步 vue init阶段会出现一些项目基本选项，按照自己需求选择就好，打包工具选择elelctron-builder之后会用到它打包和更新 1234567891011vue init simulatedgreg/electron-vue my-projectcd my-projectnpm install# ORyarnnpm run dev # ORyarn dev 出现以下界面及成功 注意事项 npm install时候可能会由于网络原因导致包安装失败，使用cnpm或者nrm切换软件源 npm install时候可能会遇到electron下载失败情况，有两种解决方法 在项目根目录下新建.npmrc或者.yarnrc文件，里面写入1electron_mirror=http://npm.taobao.org/mirrors/electron/ 在淘宝镜像下载对应系统和版本的electron包到electron缓存目录1mac/win/liunx: 当前用户名/.electron/ windows用户在npm install时候会遇到node-gyp错误，这是由于你的系统没有安装正确到构建工具，可以使用windows-build-tools一键安装所有到所需工具包 123npm install --global windows-build-tools# ORyarn global add windows-build-tools npm run dev时候可能会遇到process is not defined错误，这是由于node10.X版本导致的，有两种解决方法 升级node版本到12.X 打开项目/src/index.ejs,修改!process.browser为!require('process').browser 基础入门插件使用插件使用和vue一样，npm/yarn直接装包就可以，脚手架自带electron-vuex可以实现主进程与渲染线程共享数据，推荐使用 css预处理器假设我们使用less作为我们到css预先处理，需要安装less并且修改webpack配置 安装 123npm install -D less less-loader# ORyarn add -D less less-loader 打开.electron-vue/webpack.renderer.config.js，在less rule里面加入less-loader 12345678910111213141516171819202122232425262728{ test: /\\.less$/, use: [ { loader: &quot;vue-style-loader&quot; }, { loader: &quot;css-loader&quot;, options: { importLoaders: 1 } }, { loader: &quot;postcss-loader&quot;, }, { loader: &quot;less-loader&quot;, options: { javascriptEnabled: true, modifyVars: { 'text-primary-color': '#293A4D', // 主要' 'text-minor-color': 'rgba(41, 58, 77, 0.45)', // 次要' 'text-highlight-color': '#1890FF' // 高亮 } } } ]} 静态资源使用在项目根目录下的static目录，可以存放主进程和渲染进程都可以访问到的静态资源，electron-vue提供一个__static全局变量来快速访问此目录，而且开发环境和生产都可以使用。 vue模版使用 123456789101112&lt;template&gt; &lt;img v-bind:src=&quot;imageUrl&quot;&gt;&lt;/template&gt;&lt;script&gt; export default { data () { // 注意 路径的起始是 `static/` return { imageUrl: 'static/imgs/unsplash.png' } } }&lt;/script&gt; js文件使用 123456import fs from 'fs'import path from 'path'let fileContents = fs.readFileSync(path.join(__static, '/someFile.txt'), 'utf8')console.log(fileContents) 读写本地文件使用 electron 的一大好处是可以访问用户的文件系统。这使你可以读取和写入本地系统上的文件。electron提供了app.getPath(name)来快速访问本地文件目录，比如桌面、用户目录等等 12345678910// 用户的home文件夹app.getPath('home')// 用户桌面app.getPath('desktop')// 用户下载文件夹app.getPath('downloads')// 更多访问 https://www.electronjs.org/docs/api/app#appgetpathname 主线程与渲染进程通信 ipcMain和ipcRenderer 1234567891011// 在主进程中.const { ipcMain } = require('electron')ipcMain.on('asynchronous-message', (event, arg) =&gt; { console.log(arg) // prints &quot;ping&quot; event.reply('asynchronous-reply', 'pong')})ipcMain.on('synchronous-message', (event, arg) =&gt; { console.log(arg) // prints &quot;ping&quot; event.returnValue = 'pong'}) 12345678//在渲染器进程 (网页) 中。const { ipcRenderer } = require('electron')console.log(ipcRenderer.sendSync('synchronous-message', 'ping')) // prints &quot;pong&quot;ipcRenderer.on('asynchronous-reply', (event, arg) =&gt; { console.log(arg) // prints &quot;pong&quot;})ipcRenderer.send('asynchronous-message', 'ping') remote模块 在渲染进程中，可以通过const {remote} = require('electron')来获取到remote对象. 通过这个对象可以允许渲染进程访问主进程的模块. 12345678// 把自定义方法挂载到app下const { app } = require('electron');app.utils = { test () { return 'hello world' }} 1234// 在渲染进程中通过remote模块访问此方法const {remote} = require('electron')remote.app.utils.test() 软件打包electron-packager和electron-builder都可以把代码打包成各个平台安装包。正经过调研和实际使用electron-builder功能丰富，可配置性强，故下面都使用electron-builder进行打包 在vue init阶段应该选择electron-builder作为打包工具 为了方便首先自定义打包命令 为各个平台添加打包命令。在package.json文件scripts里加入以下命令 12345&quot;scripts&quot;: { &quot;build:dmg&quot;: &quot;node .electron-vue/build.js &amp;&amp; electron-builder --mac&quot;, &quot;build:deb&quot;: &quot;node .electron-vue/build.js &amp;&amp; electron-builder --linux&quot;, &quot;build:exe&quot;: &quot;node .electron-vue/build.js &amp;&amp; electron-builder --win&quot;} 自定义打包配置 与打包相关的配置在package.json文件的build下面 12345678910111213141516171819202122232425262728293031323334&quot;build&quot;: { &quot;productName&quot;: &quot;hello-electron-vue&quot;, &quot;appId&quot;: &quot;com.example.yourapp&quot;, &quot;directories&quot;: { &quot;output&quot;: &quot;build&quot; }, &quot;files&quot;: [ &quot;dist/electron/**/*&quot; ], &quot;dmg&quot;: { &quot;contents&quot;: [ { &quot;x&quot;: 410, &quot;y&quot;: 150, &quot;type&quot;: &quot;link&quot;, &quot;path&quot;: &quot;/Applications&quot; }, { &quot;x&quot;: 130, &quot;y&quot;: 150, &quot;type&quot;: &quot;file&quot; } ] }, &quot;mac&quot;: { &quot;icon&quot;: &quot;build/icons/icon.icns&quot; }, &quot;win&quot;: { &quot;icon&quot;: &quot;build/icons/icon.ico&quot; }, &quot;linux&quot;: { &quot;icon&quot;: &quot;build/icons&quot; }} 上面是默认配置，下面是我的自定义配置并会进行相关说明，更多配置请查看electron-builder官方文档 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475&quot;build&quot;: { // productName 是软件安装后的名字，只适用于像dmg、exe、deb这种安装包 &quot;productName&quot;: &quot;这里是软件安装后的名字&quot;, &quot;appId&quot;: &quot;com.example.yourapp&quot;, &quot;copyright&quot;: &quot;这里是软件版权信息&quot;, &quot;directories&quot;: { &quot;output&quot;: &quot;build&quot; }, &quot;files&quot;: [ &quot;dist/electron/**/*&quot; ], // electron下载镜像地址,推荐设置，不然下载electron会失败 &quot;electronDownload&quot;: { &quot;mirror&quot;: &quot;https://npm.taobao.org/mirrors/electron/&quot; }, // 打包dmg安装包自定义配置，对应macos平台 &quot;dmg&quot;: { &quot;contents&quot;: [ { &quot;x&quot;: 410, &quot;y&quot;: 150, &quot;type&quot;: &quot;link&quot;, &quot;path&quot;: &quot;/Applications&quot; }, { &quot;x&quot;: 130, &quot;y&quot;: 150, &quot;type&quot;: &quot;file&quot; } ], // 如果没有苹果开发者账号请禁止dmg签名 &quot;sign&quot;: false, &quot;icon&quot;: &quot;build/icons/icon.ico&quot; }, // 打包成appImage自定义配置，对应linux平台 &quot;appImage&quot;: { &quot;desktop&quot;: { &quot;Name[zh_CN]&quot;: &quot;这里是软件安装后的名字&quot;, &quot;Name&quot;: &quot;这里是软件安装后的名字&quot;, &quot;Icon&quot;: &quot;build/Icons/Icon256x256.png&quot; } }, // windows平台打包工具配置 &quot;nsis&quot;: { // 是否一键安装，false后安装时候会出现安装引导界面，比如自定义安装位置 &quot;oneClick&quot;: false, &quot;perMachine&quot;: false, // 是否允许用户自定义安装目录 &quot;allowToChangeInstallationDirectory&quot;: true, // 安装/卸载时候图标 &quot;installerIcon&quot;: &quot;build/icons/icon.ico&quot;, &quot;uninstallerIcon&quot;: &quot;build/icons/icon.ico&quot;, &quot;installerHeaderIcon&quot;: &quot;build/icons/icon.ico&quot;, // 安装完成后i是否创建快捷方式 &quot;createDesktopShortcut&quot;: true }, // 打包成deb安装包自定义配置，对应linux平台 &quot;deb&quot;: { &quot;icon&quot;: &quot;build/icons&quot; }, &quot;mac&quot;: { &quot;icon&quot;: &quot;build/icons/icon.icns&quot;, // macos平台如果没有苹果开发者账号请禁止代码签名，不然会打包错误 &quot;identity&quot;: null }, &quot;win&quot;: { // win平台下图标为ico格式，mac平台为icns，linux平台为png &quot;icon&quot;: &quot;build/icons/icon.ico&quot; }, &quot;linux&quot;: { &quot;icon&quot;: &quot;build/icons&quot;, // linux平台打包类型 &quot;target&quot;: [&quot;AppImage&quot;, &quot;deb&quot;] }} 根据第二步打包命令执行即可 建议在当前平台只打包当前平台，如果打包其他平台可能会出现无法预知错误，可以利用虚拟机在一个电脑上打包多平台。在yarn build时候你可能会遇到打包组件（electron fpm nsis）下载失败情况，请到这里下载对应版本到组件，然后放到系统缓存目录 123macOS ~/Library/Caches/electron-builderlinux ~/.cache/electron-builderwindows %LOCALAPPDATA%\\electron-builder\\cache 打包成功后在build目录里面会找到对应安装包 注意事项 deb安装包在ubuntu安装成功后，会出现打不开软件情况，因为系统缺少libgconf2-4，运行下面命令安装即可 1sudo apt -y install libgconf2-4 软件更新electron-builder插件也自带更新功能，也可以把打包好的安装包发布到各个开源平台以及自定义。 注意事项 三个平台只支持特定的安装包格式,其他格式(deb)暂不支持 123macOS: DMGLinux: AppImageWindows: NSIS macos平台必须开启代码签名才可以进行更新操作 添加发布配置 publish 配置添加到package.json文件的build下面会对所有平台生效，也可以为某个特定平台添加特有发布配置 12345678910&quot;publish&quot;: [ { // provider 字段是发布对平台，支持Bintray, GitHub, S3, Spaces or Snap Store和自定义发布服务器 // 这里只演示自定义服务器，更多配置及api请查看官方文档https://www.electron.build/configuration/publish &quot;provider&quot;: &quot;generic&quot;, // url为发布服务器地址和路径，搭建一个文件服务器就可以，或者oss。路径下就是安装包存放的位置 &quot;url&quot;: &quot;http://127.0.0.1:2333/test/&quot; }] 相关代码 更新是写在主线程中，因为更新只能在打包后测试，为了调试方便建议使用electron-log把每一步日志和错误都打印出来 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950import { autoUpdater } from 'electron-updater'const log = require('electron-log')// 检查更新// sendStatusToWindow函数为把更新消息发送到渲染进程ipcMain.on('check-update', (event, arg) =&gt; { log.info(&quot;check-update&quot;) // 检查更新 autoUpdater.checkForUpdates()})autoUpdater.on('error', (err) =&gt; { log.error(&quot;update-error&quot;) log.error(err) sendStatusToWindow(-1, '更新错误', 0)})autoUpdater.on('checking-for-update', () =&gt; { log.info(&quot;checking-for-update&quot;) sendStatusToWindow(1, '正在检查更新', 0)})autoUpdater.on('update-available', () =&gt; { log.info(&quot;update-available&quot;) // 发现有可用更新 sendStatusToWindow(1, '有可用更新', 0)})autoUpdater.on('update-not-available', () =&gt; { log.info(&quot;update-not-available&quot;) sendStatusToWindow(1, '没有可用更新', 0)})autoUpdater.on('download-progress', (progress, bytesPerSecond, percent, total, transferred) =&gt; { // 监听下载进度 log.info(&quot;download-progress&quot;) log.info(parseInt(progress.percent) + '%') sendStatusToWindow(1, '下载中', progress.percent)})autoUpdater.on('update-downloaded', (UpdateInfo) =&gt; { // 下载安装包完成后会触发，此时发送给渲染进程下载完成消息，渲染进程点击安装，执行autoUpdater.quitAndInstall()方法重启应用安装 log.info('update-downloaded') log.info(UpdateInfo) sendStatusToWindow(2, '已下载完成', 100) ipcMain.on('update-install', (event, arg) =&gt; { log.info('update-install') autoUpdater.quitAndInstall() })}) 上传安装包和yml文件 在yarn build完成后，如果你配置了publish会额外生成一个yaml文件，此文件记录当前安装包一些信息，以便检查更新进行对比来判断是否要更新。默认情况下win平台会生成latestyml,macos平台latest-mac.yml,linux平台latest-linux.yml，把安装包和yml文件一起上传到发布服务器相应路径下 参考资料 electron-vue官方文档 electron官方文档 electron-builder官方文档 electron入坑指南","link":"/2020/07/07/2020-07-07/"},{"title":"vue中web-shell简单实现","text":"原理客户端使用xterm.js展示命令行，服务端使用ssh2.js连接服务器，服务端与客户端通过sock进行通信 版本 xterm.js@3.12.0 ssh2.js@0.8.9 socket.io@2.3.0 相关代码https://github.com/blogwy/vue-web-shell 客户端1234567891011121314151617181920// 初始化Terminalconst term = new Terminal({ cursorBlink: true })term.open(document.getElementById('terminal'))term.fit()// 启动socket服务const socket = openSocket('http://192.168.1.105:3100/ssh')socket.on('connect', () =&gt; { console.log('---连接成功---') console.log(`---socket.id：${socket.id}---`) socket.emit('init_data', { ip: '000.0.000.00', username: 'root', password: '00000' })})// 监听Terminal输入，把输入命令通过socket发送到服务端term.on('data', res =&gt; { socket.emit('ssh_client_data', res)})// 监听服务端返回的命令运行结果，显示到Terminal中socket.on('ssh_server_data', res =&gt; { term.write(res)}) 服务端12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152const app = require('express')();const http = require('http').createServer(app);const io = require('socket.io')(http);const sshNamespace = io.of('/ssh')const SSHClient = require('ssh2').Client;const ssh = new SSHClient();const utf8 = require('utf8');sshNamespace.on('connection', socket =&gt; { console.log('socket.id:', socket.id) socket.on('init_data', res =&gt; { console.log(res) // 拿到ip数据，初始化连接 initSSH(socket, res) })})http.listen(3100, () =&gt; { console.log('listening on http://localhost:3100');});function initSSH (socket, config) { console.log(config) ssh.on('ready', () =&gt; { ssh.shell((err, stream) =&gt; { if (err) { socket.emit('shell_error', '\\r\\n*** SSH SHELL ERROR: ' + err.message + ' ***\\r\\n'); } // 监听客户端发送的命令 socket.on('ssh_client_data', data =&gt; { stream.write(data); }); // 监听返回结果并emit到客户端 stream.on('data', d =&gt; { socket.emit('ssh_server_data', utf8.decode(d.toString('binary'))); }).on('close', () =&gt; { console.log('close'); ssh.end(); }); }); }).on('close', () =&gt; { socket.emit('connect_closed', '\\r\\n*** SSH CONNECTION CLOSED ***\\r\\n'); }).on('error', err =&gt; { console.log(err); socket.emit('connect_error', '\\r\\n*** SSH CONNECTION ERROR: ' + err.message + ' ***\\r\\n'); }).connect({ host: config.ip, port: 22, username: config.username, password: config.password });}","link":"/2020/07/15/2020-07-15/"},{"title":"Awtrix2.0 WIFI像素时钟搭建全过程(极简方案)","text":"最近在B站、youtube看了许多像素时钟的视频，它们都源于wtrix2.0这个开源项目。于是，我也萌生了DIY一个属于自己的像素时钟的想法了。 购买硬件在购买之前，我做了大量准备。包括看官方文档和其他大佬的搭建视频。awtrix2.0分为标准版和pro版本，还可以装各种传感器实现特定的功能。但是由于自身硬件技术几乎为零，电烙铁技术垃圾。我采用了一个最简单的方案。甚至都用不到电烙铁这些东西。请看下图： 需要购买硬件有： wemos D1 MINI开发板(已焊接) ¥14 若干杜邦线(公对母和公对公最好都买) ¥5 8*32点阵屏 ¥60 椴木外壳套件 ¥80 小型充电宝 ¥25 外壳是看的B站UP主创客尹白猿MakerApe的解决方案，购买链接仅供参考不是广告 软件搭建环境搭建**awtrix服务端是需要 JAVA8环境，请提前配置好环境 ** macOS：https://blog.csdn.net/weixin_42191789/article/details/99070311 Ubuntu18.04：https://blog.csdn.net/zbj18314469395/article/details/86064849 Windows10：https://jingyan.baidu.com/article/6b97984dd257b41ca2b0bf86.html 点击下载最新版jar包： AWTRIX Java Application，服务会启动到7000端口，请务必保证端口畅通 macOS/Linux1sudo java -jar awtrix.jar Windows1java -jar awtrix.jar Linux Installer适用于Linux一键命令 1wget -N https://blueforcer.de/awtrix/awtrix.sh ; sudo sh awtrix.sh 123sudo service awtrix startsudo service awtrix stopsudo service awtrix restart DockerDocker hub 硬件安装刷入固件这里是windows下教程 点击下载刷机软件和固件 用数据线将开发板连接到电脑 打开刷机软件，软件自动识别com口 切换到config页面，点击齿轮图标选择固件 返回operation页面，点击flash，待进度条走完即可 设置WIFI 开发板通过usb方式接入电源，并按照上图连接好点阵屏。 打开手机热点，选择AWTRIX Controller 点击configure进入配置页面 填入当前WIFI名称和密码和awtrix服务端ip地址(matrix port维持默认7001,matrixtype2不要勾选) 点击save，过10秒钟屏幕会出现wifi成功host成功，自动进去时钟模式，到此固件配置已完成 安装硬件参考创客尹白猿MakerApe大佬视频 一些坑 当你想修改wifi或者host配置时候，必须重置开发板。重置方法为按一下reset键，隔3～4秒再按一下，屏幕会出现红色reset，这时候就可以重新连接开发板wifi进行设置 截止到2020/08/15最新固件版本是0.35，此版本固件暂时不能重置，必须退回到0.26版固件才可以重置。0.26版点击下载。回退方法和刷固件一样，重新刷入即可。 设置wifi时候，matrix port维持默认7001,matrixtype2不要勾选。不要试图修改这两项。 参考资料awtrix2.0官方文档：awtrixdocs.blueforcer.de 视频1：https://www.bilibili.com/video/BV1sV41167p9?from=search&amp;seid=7434863561803273208 视频2：https://www.bilibili.com/video/BV17a4y1e7Eh","link":"/2020/08/16/2020-08-16/"},{"title":"bilibili视频下载逻辑","text":"b站有三种视频格式，且现在下载的视频都是影视频分离的形式，且都是m4s格式，需要同时把video和audio下载下来，用ffmpeg合成一下即可，所有的请求头都需要添加User-Agent https://www.bilibili.com/video/BV1QT4y1w7HS https://www.bilibili.com/bangumi/play/ep326599 https://www.bilibili.com/bangumi/play/ss34319 12# 音视频合成ffmpeg -i ./video.m4s -i ./audio.m4s -codec copy ./video.mp4 第一种BV对于BV格式视频，视频的下载地址就在网页源代码中，直接请求url地址即可，请求头中带上已登录账号的cookie发送请求就可以拿到视频下载地址，如果你的账号是大会员，拿到的视频下载地址中就会有大会员专享视频。拿到下载地址后，发送一个请求头中带referer的请求(值为url)就可以下载了。下面我以node.js为例子 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748const got = require('got');const stream = require('stream');const {promisify} = require('util');const pipeline = promisify(stream.pipeline);const fs = require('fs');// 获取下载地址(async () =&gt; { try { const response = await got('https://www.bilibili.com/video/BV1k54y1C7R6',{ headers: { 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.83 Safari/537.36', 'cookie': '_uuid=D87F5597-9F58-9410-7C9A-EC6EE452205A44601infoc; buvid3=69498676-73DD-451C-A606-02CA33B5AEE553917infoc; CURRENT_FNVAL=16; LIVE_BUVID=AUTO2115924816109117; Hm_lvt_8a6e55dbd2870f0f5bc9194cddf32a02=1596722341; CURRENT_QUALITY=116; blackside_state=1; finger=481832271; sid=ax362991; DedeUserID=14899614; DedeUserID__ckMd5=6fb380360cc351f0; SESSDATA=122d1191%2C1614940578%2C4f586*91' } }); console.log('success') // bv系列 let str = response.body.match(/\\&lt;script\\&gt;window\\.\\_\\_playinfo\\_\\_\\=([\\s\\S]*?)\\&lt;\\/script\\&gt;\\&lt;script\\&gt;window\\.\\_\\_INITIAL\\_STATE\\_\\_\\=/)[1]; console.log(str) } catch (error) { console.log('error') console.log(error); }})()// 下载视频const options = { headers: { 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:56.0) Gecko/20100101 Firefox/56.0', 'referer': 'https://www.bilibili.com/video/BV1k54y1C7R6' }};const url = 'https://upos-sz-mirrorkodo.bilivideo.com/upgcxcode/43/27/229752743/229752743-1-30280.m4s?e=ig8euxZM2rNcNbdlhoNvNC8BqJIzNbfqXBvEqxTEto8BTrNvN0GvT90W5JZMkX_YN0MvXg8gNEV4NC8xNEV4N03eN0B5tZlqNxTEto8BTrNvNeZVuJ10Kj_g2UB02J0mN0B5tZlqNCNEto8BTrNvNC7MTX502C8f2jmMQJ6mqF2fka1mqx6gqj0eN0B599M=&amp;uipk=5&amp;nbs=1&amp;deadline=1600025170&amp;gen=playurl&amp;os=kodobv&amp;oi=975672835&amp;trid=a9b798c7f52640c68c3850b379ab524bp&amp;platform=pc&amp;upsig=65c15861b8e6dc6f46012dc21bf034c5&amp;uparams=e,uipk,nbs,deadline,gen,os,oi,trid,platform&amp;mid=14899614&amp;orderid=0,3&amp;agrr=0&amp;logo=80000000';(async () =&gt; { await pipeline( got.stream(url, options) .on('downloadProgress', progress =&gt; { console.log(progress) }) .on('error', error =&gt; { console.log(error) }), fs.createWriteStream('./video/audio2.m4s') );})(); 第二种EPep系列视频，下载视频和bv类似，都是在网页源代码中找到视频下载地址，不同到是，ep视频下载地址获取规则和bv有一点区别而且ep系列还需要在源代码中找到当前视频到BV号，BV号在下载视频时需要作为请求头到referer 12345678910111213141516171819202122232425262728293031323334353637383940414243444546const got = require('got');const stream = require('stream');const {promisify} = require('util');const pipeline = promisify(stream.pipeline);const fs = require('fs');(async () =&gt; { try { const response = await got('https://www.bilibili.com/bangumi/play/ep337019',{ headers: { 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.83 Safari/537.36', 'cookie': '_uuid=D87F5597-9F58-9410-7C9A-EC6EE452205A44601infoc; buvid3=69498676-73DD-451C-A606-02CA33B5AEE553917infoc; CURRENT_FNVAL=16; LIVE_BUVID=AUTO2115924816109117; Hm_lvt_8a6e55dbd2870f0f5bc9194cddf32a02=1596722341; CURRENT_QUALITY=116; blackside_state=1; finger=481832271; sid=ax362991; DedeUserID=14899614; DedeUserID__ckMd5=6fb380360cc351f0; SESSDATA=122d1191%2C1614940578%2C4f586*91' } }); console.log('success') // ep系列 let str = response.body.match(/\\&lt;script\\&gt;window\\.\\_\\_playinfo\\_\\_\\=([\\s\\S]*?)\\&lt;\\/script\\&gt;\\&lt;script\\&gt;window\\.\\_\\_BILI\\_CONFIG/)[1]; console.log(str) } catch (error) { console.log('error') console.log(error); }})()const options = { headers: { 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:56.0) Gecko/20100101 Firefox/56.0', 'referer': 'https://www.bilibili.com/video/BV1wh411R7M5' }};const url = 'https://upos-sz-mirrorkodo.bilivideo.com/upgcxcode/43/27/229752743/229752743-1-30280.m4s?e=ig8euxZM2rNcNbdlhoNvNC8BqJIzNbfqXBvEqxTEto8BTrNvN0GvT90W5JZMkX_YN0MvXg8gNEV4NC8xNEV4N03eN0B5tZlqNxTEto8BTrNvNeZVuJ10Kj_g2UB02J0mN0B5tZlqNCNEto8BTrNvNC7MTX502C8f2jmMQJ6mqF2fka1mqx6gqj0eN0B599M=&amp;uipk=5&amp;nbs=1&amp;deadline=1600025170&amp;gen=playurl&amp;os=kodobv&amp;oi=975672835&amp;trid=a9b798c7f52640c68c3850b379ab524bp&amp;platform=pc&amp;upsig=65c15861b8e6dc6f46012dc21bf034c5&amp;uparams=e,uipk,nbs,deadline,gen,os,oi,trid,platform&amp;mid=14899614&amp;orderid=0,3&amp;agrr=0&amp;logo=80000000';(async () =&gt; { await pipeline( got.stream(url, options) .on('downloadProgress', progress =&gt; { console.log(progress) }) .on('error', error =&gt; { console.log(error) }), fs.createWriteStream('./video/audio2.m4s') );})(); 第三种SSss系列视频一般是番剧电影居多，下载方法也略有不同 通过网页源代码获取到视频bvid cid epid这几个值 请求接口，拿到下载地址 发送请求下载即可 本文所有实例完整代码查看","link":"/2020/09/06/2020-09-06/"},{"title":"你好！2021","text":"新年新气象，博客换了新主题！2021，希望能原价买个PS5","link":"/2021/01/09/2021-01-09/"},{"title":"我的2020年度Steam游戏报告 - 来自游民星空","text":"","link":"/2021/01/12/2021-01-12-01/"},{"title":"我的2020年度Playstation游戏报告 - 来自游民星空","text":"","link":"/2021/01/12/2021-01-12-02/"},{"title":"R2S软路由相关教程收集","text":"文章封面图来自油管博主bigdongdong 我是在1月底购买的R2S，在油管博主bigdongdong的淘宝店，我的用途就是科学上网。下面我会写下我购买的链接(不是恰饭)和相关教程 购买软路由（199元）：https://item.taobao.com/item.htm?spm=a230r.1.14.68.283c14a8QV2e0N&amp;id=626680130958&amp;ns=1&amp;abbucket=19#detail 5V3A TYPE-C电源（12元）：https://detail.tmall.com/item.htm?id=603155018245&amp;spm=a1z09.2.0.0.32b52e8dXvzXU5&amp;_u=8lv6bbab53f 朗科32GB内存卡（24元）：https://item.taobao.com/item.htm?spm=a1z09.2.0.0.32b52e8dXvzXU5&amp;id=606825770915&amp;_u=8lv6bba29df 注：电源一定要买固定5V3A，像一些手机充电器可能有5V3A这个功率档位，也请不要用，有烧毁机器危险；内存卡要买class10及以上，机器比较挑卡，反正我这个是可以用；如果建议的话，直接在bigdongdong店铺里面买满配版本 教程东西都到了以后，就着手刷机吧。系统是openwrt，教程和镜像大佬早已准备好了，我就不班门弄斧了，https://bigdongdong.gitbook.io/nanopi-r2s/ 我遇到的坑 在刷镜像的时候，用买内存卡送的读卡器老是报错无法刷入系统，然后我换了一个读卡器成功刷入系统 openwrt系统被我搞坏了，然后我重新刷入系统，把内存卡插入R2S后机器不识别卡，无法使用，然后在bigdongdong的帮助下，先刷入R4S固件，然后重新刷入R2S固件，就好了。 我本人也是第一次使用R2S，希望这两个踩坑可以帮助你们。","link":"/2021/02/08/2021-02-08/"},{"title":"BilibiliVideoDownload v3.0.0 - 全新GUI界面","text":"BilibiliVideoDownload PC端下载bilibili视频 安装到releases页面或者百度网盘密码: rf8n,下载对应平台安装包即可.打开软件后需要设置SESSDATA才可以下载视频，SESSDATA是B站已登录用户的cookies里面的一个字段，而且如果你的账号是非大会员，你拿到的SESSDATA也只可以下载非大会员视频。如果你是大会员则可以下载大会员视频。为了支持正版，大家购买大会员。获取SESSDATA教程大家可以到软件相关设置处查看，或者直接点击这里 演示 功能 下载普通视频 下载番剧视频 下载电影(额外付费除外) 下载封面 下载进度 基本视频信息 删除下载记录 暂停/恢复下载 运行123456789git clone https://github.com/blogwy/BilibiliVideoDownload.gitcd BilibiliVideoDownloadyarnyarn electron:serveyarn electron:build 版本v3.0.0 2021-02-21 全新GUI版本上线 v2.1.0 2019-09-12 添加了弹幕下载，以及弹幕反查用户 v2.0.2 2019-06-19 添加了大会员清晰度的支持(前提是必须要有一个大会员的SESSDATA) v2.0.1 2019-03-29 添加了分P检测，分P下载功能 v2.0.0 2019-03-24 Node.js重构，以前的在vuejs分支 注意 不要试图下载需要付费的视频，本软件不支持，可能会报错 SESSDATA有过期时间，好像是半年 本人没有试过下载电影等时长比较长的视频(大于一小时)，不保证下载成功 由于下载的音视频是分离的，项目使用ffmpeg合成导致安装包过大(ffmpeg大约70+MB)，以后会优化的","link":"/2021/02/21/2021-02-21/"},{"title":"NASA火星船票申请","text":"美国NASA最近开放了2026年的“把你的名字送去火星”的计划，其实这个火星船票早在去年之前就有了，只不过今年莫名其妙就上了热搜。 申请地址：https://mars.nasa.gov/participate/send-your-name/future","link":"/2021/03/16/2021-03-16/"},{"title":"349个官网模版分享","text":"项目地址：https://gitee.com/norman-ghost/website-template 预览地址：https://norman-ghost.gitee.io/website-template","link":"/2021/03/29/2021-03-29/"},{"title":"我的PS5国行到了","text":"我的PS5国行到了，直观感觉“好大”！","link":"/2021/05/16/2021-05-16/"},{"title":"BilibiliVideoDownload v3.1.0 - 新增扫码登录","text":"更新内容v3.1.0 2021-06-29 新增扫码登录获取cookie，不需要手动设置 新增下载字幕功能","link":"/2021/07/01/2021-07-01/"},{"title":"基于Node.js前端脚手架工具开发流程","text":"我们要写一个叫hello-cli的脚手架工具，它要做的是从GitHub拉去项目模版代码，把项目信息填入模版内即可。这是一个简单但是很常见的脚手架功能。脚手架源码 准备开发脚手架工具，我们需要用到几个工具库 commander.js nodejs命令行完整解决方案，提供解析命令等功能，写脚手架必备库 inquirer.js 命令行交互工具，支持大部分形式。写脚手架必备库 download-git-repo 下载GitHub库 metalsmith 用于处理下载好的模版文件 handlebars 用户替换变量 ora.js 命令行loading样式，非必须 chalk.js 命令行文本加颜色背景等样式，非必须 log-symbols.js 给console.log添加有颜色的级别，例如error success，非必须 alphabetjs 字符文字样式，主要用于项目名称，非必须 开发初始化项目，在package.json里面写入bin字段。key定义cli的命令hello-cli，value定义了命令的入口文件。 123&quot;bin&quot;: { &quot;hello-cli&quot;: &quot;bin/hello.js&quot;} 入口文件hello.js首先要在所有的命令入口文件前写#!/usr/bin/env node声明使用当前系统的node环境。这里会使用alphabetjs把项目名字输出一个字符文字，然后再定义一下usage description version脚手架的基础信息。command方法定义一个命令，命令的接收后处理需要写到一个名为 入口名-命令名.js 文件里面，这里我们需要在bin下面创建一个hello-create.js文件 12345678910111213141516#!/usr/bin/env nodeconst commander = require('commander')const alphabetjs = require('alphabetjs')const chalk = require('chalk')const title = alphabetjs('Hello Cli','stereo')const packageInfo = require('../package.json')commander.addHelpText('beforeAll', chalk.greenBright(title));commander .usage(&quot;[options]/[command]&quot;) .description('Hello World') .version(packageInfo.version) .command('create', 'Create an project') .parse(process.argv); create命令入口文件hello-create.js使用commander.parse()方法解析输入的参数作为项目名，download方法下载模版，generator方法用来生成模版 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#!/usr/bin/env nodeconst commander = require('commander')const ora = require('ora')const chalk = require('chalk')const logSymbols = require('log-symbols')const download = require('../modules/download')const prompt = require('../modules/prompt')const generator = require('../modules/generator')// 解析参数commander.parse(process.argv)// 接收第一个参数const projectName = commander.args[0]// 创建一个loadingconst spinner = ora('downloading template');// 没有项目名，提示help，退出if (!projectName) { program.help() return}async function main (projectName) { const path = `${process.cwd()}/${projectName}` // 开始下载模版 spinner.start() try { await download(path) } catch (error) { // 隐藏loading，打印错误信息 spinner.stop() console.log(logSymbols.error, chalk.red('download error')) console.log(chalk.red(error)) return } // 下载成功 spinner.stop() // 收集数据 const projectInfo = await prompt(projectName) // 生成模版 try { await generator(projectInfo, path, path) } catch (error) { console.log(logSymbols.error, chalk.red('generator error')) console.log(chalk.red(error)) return } // Finished console.log(logSymbols.success, chalk.green('Finished successfully!'))}main(projectName) download.js说明download-git-repo这个库可以下载Github Gitlab项目。默认下载GitHub，我这里是下载blogwy用户的cli-demo-template库master分支 123456789const download = require('download-git-repo')module.exports = async function (path) { return new Promise((resolve, reject) =&gt; { download('blogwy/cli-demo-template#master', path, function (err) { err ? reject('Error') : resolve('Success') }) })} generator.js说明使用handlebars解析模版文件，模版文件需要接收参数的地方使用{{}}包裹，我这里把二进制文件ico png排除掉，因为会报错。把vue文件也排除掉 12345678910111213141516171819202122232425262728293031const Metalsmith = require('metalsmith')const Handlebars = require('handlebars')// metadata 需要替换的数据，src 文件源地址，dest 输出地址module.exports = function (metadata, src, dest) { if (!src) { return Promise.reject(new Error(`无效的source：${src}`)) } return new Promise((resolve, reject) =&gt; { Metalsmith(process.cwd()) .metadata(metadata) .clean(false) .source(src) .destination(dest) .use((files, metalsmith, done) =&gt; { const meta = metalsmith.metadata() Object.keys(files).forEach(fileName =&gt; { const fileNameArray = fileName.split('.') const disabledArray = ['vue', 'ico', 'png'] if (!disabledArray.includes( fileNameArray[fileNameArray.length - 1])) { const t = files[fileName].contents.toString() files[fileName].contents = Buffer.from(Handlebars.compile(t)(meta)) } }) done() }).build(err =&gt; { err ? reject(err) : resolve() }) })} 123456789101112131415{ &quot;name&quot;: &quot;{{projectName}}&quot;, &quot;version&quot;: &quot;{{projectVersion}}&quot;, &quot;description&quot;: &quot;{{projectDescription}}&quot;, &quot;category&quot;: &quot;{{projectCategory}}&quot;, &quot;poster&quot;: &quot;{{projectPoster}}&quot;, &quot;author&quot;: &quot;{{projectAuthor}}&quot;, &quot;main&quot;: &quot;index.js&quot;, &quot;scripts&quot;: { &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot; }, &quot;license&quot;: &quot;ISC&quot;, &quot;dependencies&quot;: {}, &quot;devDependencies&quot;: {}} 测试 npm link会把当前开发目录映射到全局，使用hello-cli就可以测试，测试完后npm unlink取消映射 123npm linknpm unlink 发布 注册npm账户 执行npm login登录npm 执行npm publish发布包 安装1npm i -g hello-cli 使用1hello-cli create 项目名","link":"/2021/07/15/2021-07-15/"},{"title":"Strapi.js 入门","text":"什么是StrapiStrapi 是领先的开源Headless CMS。它是 100% JavaScript，完全可定制，有完善的开发文档，有现代化的管理面板且所以基础功能可视化操作，社区活跃。 Strapi特点 安装环境要求 Node.js 12.x及以上 npm 6.x及以上 数据库支持 Database Minimum version SQLite 3 PostgreSQL 10 MySQL 5.6 MariaDB 10.1 MongoDB 3.6 Strapi v4, MongoDB不支持 创建项目 终端输入以下命令 12345npx create-strapi-app my-projectoryarn create strapi-app my-project 选择安装类型 Quickstart(默认SQLite数据库) Custom(自定义数据库) 选择模版，选择y会出现官方的数据模版 输入项目名称 运行yarn develop运行项目(develop有热更新) 使用注册并登录第一次运行Strapi项目时候，会要求你注册一个账号，其实就是给当前系统添加一个超级管理员账号，注册好以后登录 创建集合(表) 点击侧边菜单内容类型生成器，点击创建新的Content Type，填入名称 点击继续，为当前集合创建字段，字段可以选择基本属性，比如是否唯一，必填等 为集合添加数据 点击侧边菜单集合名称，点击add 输入数据，点击save和publish 用户与权限Strapi 是一个headless cms，它已经内置了用户模块和权限控制模块，而为所有的操作都建立在权限系统之上。Strapi集成了两套用户权限系统，分别对应管理面板和开发者，都可以通过面板进行管理 你可以为每一个角色，设置不同的权限 插件Strapi 是围绕不同类型的插件构建的。有核心插件对于您的 Strapi 应用程序运行至关重要，因此无法停用。但是还有其他插件，可以默认安装或不安装，为您的 Strapi 应用程序添加更多选项和可能性。 可以通过管理面板的插件市场安装或者通过命令方式安装 开发API接口基本API Method Path Description GET /tasks Get a list of tasks GET /tasks/:id Get a specific task GET /tasks/count Count tasks POST /tasks Create a task DELETE /tasks/:id Delete a task PUT /tasks/:id Update a task 用户注册POST http://localhost:1337/auth/local/register Request 12345{ &quot;username&quot;: &quot;Strapi user&quot;, &quot;email&quot;: &quot;user@strapi.io&quot;, &quot;password&quot;: &quot;strapiPassword&quot;} Response 12345678910111213141516171819202122{ &quot;id&quot;: &quot;string&quot;, &quot;username&quot;: &quot;string&quot;, &quot;email&quot;: &quot;string&quot;, &quot;provider&quot;: &quot;string&quot;, &quot;confirmed&quot;: false, &quot;blocked&quot;: false, &quot;role&quot;: { &quot;id&quot;: &quot;string&quot;, &quot;name&quot;: &quot;string&quot;, &quot;description&quot;: &quot;string&quot;, &quot;type&quot;: &quot;string&quot;, &quot;permissions&quot;: [ &quot;string&quot; ], &quot;users&quot;: [ &quot;string&quot; ], &quot;created_by&quot;: &quot;string&quot;, &quot;updated_by&quot;: &quot;string&quot; }} 用户登录POST http://localhost:1337/auth/local Request 1234{ &quot;identifier&quot;: &quot;Strapi user&quot;, &quot;password&quot;: &quot;strapiPassword&quot;} Response 12345678910111213141516171819{ &quot;jwt&quot;: &quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiaWF0IjoxNjI3ODMzMTM2LCJleHAiOjE2MzA0MjUxMzZ9.w43LtDrrZUHYWHdjZHMiTHShO6NrqfkLVqhsdTRojfw&quot;, &quot;user&quot;: { &quot;id&quot;: 2, &quot;username&quot;: &quot;wangyu&quot;, &quot;email&quot;: &quot;wangyu@wangyu.link&quot;, &quot;provider&quot;: &quot;local&quot;, &quot;confirmed&quot;: true, &quot;blocked&quot;: false, &quot;role&quot;: { &quot;id&quot;: 1, &quot;name&quot;: &quot;Authenticated&quot;, &quot;description&quot;: &quot;Default role given to authenticated user.&quot;, &quot;type&quot;: &quot;authenticated&quot; }, &quot;created_at&quot;: &quot;2021-08-01T14:40:40.600Z&quot;, &quot;updated_at&quot;: &quot;2021-08-01T14:43:28.135Z&quot; }} token使用12345678910111213141516171819import axios from 'axios';const token = 'YOUR_TOKEN_HERE';// Request API.axios .get('http://localhost:1337/posts', { headers: { Authorization: `Bearer ${token}`, }, }) .then(response =&gt; { // Handle success. console.log('Data: ', response.data); }) .catch(error =&gt; { // Handle error. console.log('An error occurred:', error.response); }); 定制开发Routing打开./api/task/config/routes.json，这里是当前COLLECTION路由列表，添加你想要的路由即可 123456789101112{ &quot;routes&quot;: [ { &quot;method&quot;: &quot;PUT&quot;, &quot;path&quot;: &quot;/tasks/update-type/:id&quot;, &quot;handler&quot;: &quot;task.updateType&quot;, &quot;config&quot;: { &quot;policies&quot;: [&quot;verification&quot;] } } ]} method (string): 路由请求方法 (e.g. GET, POST, PUT, HEAD, DELETE, PATCH). path (string): 路径 (e.g. /restaurants). handler (string): 命中路由时要进行的操作，格式 controller.action config policies (array): 路由守卫，在命中路由之前做的操作，例如数据验证 Policies创建./api/task/config/policies/verification.js，作为当前COLLECTION路由的一个守卫 123456789module.exports = async (ctx, next) =&gt; { const mapData = ['online', 'offline'] if (ctx.request.body &amp;&amp; ctx.request.body.type &amp;&amp; mapData.includes(ctx.request.body.type)) { return await next(); } else { throw strapi.errors.badRequest('数据格式不正确') }}; Controllers打开./api/task/controllers/task.js，写入一个action方法，可以自定义，可以覆盖Strapi默认的action（find findOne count create update delete） 123456789module.exports = { // action async updateType (ctx) { const { id } = ctx.params; let entity = await strapi.services.task.update({ id }, ctx.request.body); strapi.services.task.send('update type success!') return sanitizeEntity(entity, { model: strapi.models.task }); }}; API：https://strapi.io/documentation/developer-docs/latest/development/backend-customization.html#controllers services打开./api/task/services/task.js，可以自定义services。services应该是数据库操作或者单个的Controller逻辑 12345module.exports = { send (msg) { // do something }}; 在controllers里面这样调用 1234567module.exports = { async updateType (ctx) { // strapi是全局变量 // strapi.services.文件名.方法名 strapi.services.task.send('update type success!') }}; API：https://strapi.io/documentation/developer-docs/latest/development/backend-customization.html#services middlewares在./middlewares文件夹里面新建文件夹，例如./middlewares/timer/index.js，middlewares是继承与koa的middlewares，如果你不熟悉可以看koa文档 12345678910111213// middlewares 建议把你的逻辑写到await next();之后module.exports = strapi =&gt; { return { initialize() { strapi.app.use(async (ctx, next) =&gt; { await next(); const start = Date.now(); const delta = Math.ceil(Date.now() - start); ctx.set('X-Response-Time', delta + 'ms'); }); }, };}; 然后需要配置middlewares执行顺序，打开./config/middlewares.js，写入以下配置。timer为第一个执行middlewares其他的是系统默认middlewares，具体解释看下面的文档。 12345678910module.exports = { load: { before: ['timer', 'responseTime', 'logger', 'cors', 'responses', 'gzip'], order: [ &quot;Define the middlewares' load order by putting their name in this array is the right order&quot;, ], after: ['parser', 'router'] } //...}; APi：https://strapi.io/documentation/developer-docs/latest/setup-deployment-guides/configurations.html#middlewares 部署服务器要求 At least 1 CPU core (Highly recommended at least 2) At least 2 GB of RAM (Moderately recommended 4) Minimum required storage space recommended by your OS or 32 GB of free space A supported operating system Ubuntu &gt;= 18.04 (LTS-Only) Debian &gt;= 9.x CentOS/RHEL &gt;= 8 macOS Mojave or newer (ARM not supported) Windows 10 构建管理面板 12345NODE_ENV=production yarn buildoryarn build 启动服务 12345NODE_ENV=production yarn startoryarn start 你也可以通过pm2管理进程；各大云服务厂商也提供了快速部署的方法；也提供了docker部署","link":"/2021/08/03/2021-08-03/"},{"title":"rtsp&#x2F;rtmp转m3u8 nodejs+ffmpeg实现","text":"本文使用node.js和ffmpeg实现了rtsp/rtmp直播流转m3u8 核心代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182const ffmpegPath = require('@ffmpeg-installer/ffmpeg')const ffmpeg = require('fluent-ffmpeg')const fs = require('fs')const path = require('path')const http = require('http')ffmpeg.setFfmpegPath(ffmpegPath.path)main()function main () { const rtsp = 'rtmp://192.168.31.249:1935/live/test' const m3u8 = './m3u8/live.m3u8' transcoding(rtsp, m3u8) createServer(7777)}function transcoding (rtsp, m3u8) { ffmpeg(rtsp) .outputOptions([ '-fflags flush_packets', '-max_delay 1', '-an', '-flags', '-global_header', '-hls_time 1', '-hls_list_size 3', '-hls_wrap 3', '-vcodec copy' ]) .on('start', function(e) { console.log('---开始转码---') console.log(e); }) .on('end', function() { console.log('file has been converted succesfully'); }) .on('error', function(err) { console.log('an error happened: ' + err.message); fun('error') }) .save(m3u8)}function createServer (port) { const mimes = { 'ts': 'video/MP2T', 'm3u8': 'application/x-mpegURL' } const liveServer = http.createServer((request, response) =&gt; { const urlArrs = request.url.split('.') const extension = urlArrs[urlArrs.length - 1] if (extension === 'ts') { try { response.setHeader('Content-Type', mimes['ts']) fs.createReadStream(path.join('./m3u8', request.url)).pipe(response) } catch (error) { response.end('hello world') } } else if (extension === 'm3u8') { try { response.setHeader('Content-Type', mimes['m3u8']) fs.createReadStream(path.join('./m3u8', request.url)).setEncoding('utf8').pipe(response) } catch (error) { response.end('hello world') } } else if (extension === 'html') { try { fs.createReadStream(path.join('./', request.url)).setEncoding('utf8').pipe(response) } catch (error) { response.end('hello world') } } else { response.end('hello world') } }) liveServer.listen(port, err =&gt; { console.log(err) console.log(`liveServer run ${port}`) })} fluent-ffmpeg是ffmpeg的nodejs实现。你也可以使用child_process直接调用ffmpeg命令，原理是一样的。 @ffmpeg-installer/ffmpeg是一个ffmpeg安装器，可以根据当前系统安装对应的可执行文件。这里指定了ffmpeg的路径使用项目中下载好的。如果不指定会使用系统安装好的ffmpeg fluent-ffmpeg会把参数转化为ffmpeg命令，ffmpeg -i rtmp://192.168.31.249:1935/live/test -y -fflags flush_packets -max_delay 1 -an -flags -global_header -hls_time 1 -hls_list_size 3 -hls_wrap 3 -vcodec copy ./m3u8/live.m3u8 demo源码：https://github.com/blogwy/personal-practice/tree/master/rtsp-to-m3u8","link":"/2021/09/25/2021-09-24/"},{"title":"Aria2c web实现 基于WebSocket","text":"Aria2是一个非常成熟的下载程序，基于命令行调用。它也提供上RPC、WebSocket的调用方式。下面我会通过前端WebSocket调用的方式实现一个简单的下载功能 首先下载对应的Aria2可执行文件，并且命令行启动。aria2c默认会监听本地6800端口 1aria2c --enable-rpc --rpc-listen-all=true --rpc-allow-origin-all 前端建立WebSocket连接，地址是：ws://localhost:6800/jsonrpc，具体代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;aria2&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div style=&quot;margin-bottom: 32px;&quot;&gt; &lt;input type=&quot;text&quot; id=&quot;ipt&quot;&gt; 下载进度：&lt;span id=&quot;progress&quot;&gt;&lt;/span&gt; 下载速度：&lt;span id=&quot;speed&quot;&gt;&lt;/span&gt; &lt;/div&gt; &lt;button id=&quot;start&quot;&gt;开始下载&lt;/button&gt; &lt;button id=&quot;pause&quot;&gt;暂停下载&lt;/button&gt; &lt;button id=&quot;unpause&quot;&gt;恢复下载&lt;/button&gt; &lt;script&gt; // Create WebSocket connection. const socket = new WebSocket('ws://localhost:6800/jsonrpc'); // Connection opened socket.addEventListener('open', function (event) { socket.send('Hello Server!'); console.log(event) }); let timer = {} let gid = '' // Listen for messages socket.addEventListener('message', function (event) { const data = JSON.parse(event.data) console.log('Message from server ', event.data) if (data.id === 'tellStatus') { const progress = parseInt(Number(data.result.completedLength) / Number(data.result.totalLength) * 100) + '%' const speed = parseInt(Number(data.result.downloadSpeed) / 1000) + ' kb/s' document.querySelector('#progress').innerHTML = progress document.querySelector('#speed').innerHTML = speed } if (data.method === 'aria2.onDownloadStart') { gid = data.params[0].gid const jsonData = { 'jsonrpc':'2.0', 'id':'tellStatus', 'method':'aria2.tellStatus', 'params': [gid] } if (!timer[gid]) { timer[gid] = setInterval(() =&gt; { socket.send(JSON.stringify(jsonData)) console.log('发送 tellStatus') }, 1000) } } if (data.method === 'aria2.onDownloadComplete') { gid = data.params[0].gid clearInterval(timer[gid]) delete timer[gid] document.querySelector('#progress').innerHTML = '100%' document.querySelector('#speed').innerHTML = '0 kb/s' } }); const startBtn = document.querySelector('#start') startBtn.addEventListener('click', function () { const jsonData = { 'jsonrpc':'2.0', 'id':'qwer', 'method':'aria2.addUri', 'params': [[ document.querySelector('#ipt').value ]] } socket.send(JSON.stringify(jsonData)) }) const pauseBtn = document.querySelector('#pause') const unpauseBtn = document.querySelector('#unpause') pauseBtn.addEventListener('click', function () { const jsonData = { 'jsonrpc':'2.0', 'id':'qwer', 'method':'aria2.pause', 'params': [gid] } socket.send(JSON.stringify(jsonData)) }) unpauseBtn.addEventListener('click', function () { const jsonData = { 'jsonrpc':'2.0', 'id':'qwer', 'method':'aria2.unpause', 'params': [gid] } socket.send(JSON.stringify(jsonData)) }) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; Aria2官方文档：https://aria2.github.io/manual/en/html/index.html","link":"/2021/09/29/2021-09-29/"},{"title":"NUC8安装黑苹果","text":"*其实我已经有MBP，用了3年了。家里的NUC8是win11系统，想着平时在两个系统之间切换使用有点割裂感。就想把它装一个黑苹果。然后我在远景论坛搜到了一个大佬的帖子[OpenCore] NUC8最新OC EFI 持续更新（已更新至0.7.5+12.0.1）他分享出他的EFI文件，这样我就不需要去重新找驱动了，直接抄作业！其实，我大学时候就装过黑苹果，当时是四叶草引导，现在出现一个更优秀的引导OpenCore，我也顺便了解一下。后来在b站发现国光大佬的黑苹果教程视频版文字版，强烈建议大家全部看完。下面我说一下我的NUC8装黑苹果具体流程吧 我的NUC8没有硬改，此教程只适合没有硬改的NUC8 制作启动盘 准备一个16GB及以上的U盘，下载balenaEthcher镜像写入工具和macOS系统镜像。镜像可以去黑果小兵前辈下载最新的（需要关注公众号并赞赏），我把我下载的macOS12.0.1镜像分享出来 12「macOS Monterey 12.0.1 21...141 and WEPE.dmg.pdf」，点击链接保存，或者复制本段内容，打开「阿里云盘」APP ，无需下载，极速在线查看享用。(下载成功后记得把.pdf后缀删除)链接：https://www.aliyundrive.com/s/HnADg1sgrDx 镜像和工具都下载好后，打开写入工具选择镜像选择u盘，点击flash即可 EFI归位 首先下载远景大佬的EFI文件，也可以从我这里下链接: https://pan.baidu.com/s/1SewgJJrvRT8U3sOnAjdglA 提取码: dz2k 。重新插拔第一步制作好的u盘，打开DiskGenius选择u盘并打开efi分区，删除此分区下所有内容。把下载好的efi文件解压后的efi文件夹复制进去。此时黑苹果启动u盘就算制作完成了 设置bios bios设置我直接复制远景大佬的推荐配置了。具体开机时按f2进去bios设置 12345678910详细设置如下：按 F2 进入 BIOS，然后可以先重置 BIOS为出厂 默认设置。Boot-&gt;Secure Boot-&gt; “Secure Boot ” ：取消勾选Security-&gt;Security Features-&gt; “Inter VT for directed I/VO (VT-d) ” ： 取消勾选Boot-&gt;Boot Priority-&gt;Legacy Boot Priority-&gt; “ Legacy Boot ” ：取消勾选Boot-&gt;Boot Configuration-&gt;UEFI Boot-&gt;“ Fast Boot ”： 取消勾选UEFI Boot-&gt;“ Boot USB Devices First ” ： 勾选UEFI Boot-&gt;“ Boot Network Devices Last ” ：勾选Boot Devices-&gt;“Network Boot” ：DisablePower-&gt;Secondary Power Settings-&gt; “ Wake on LAN from S4/S5 ” ： Stay Off 开始装机 插入u盘，开机按f10进入boot menu，选择u盘(会出现两个u盘选项，一般选择第一个即可)。进入OpenCore界面，选择install xxxx。 然后，进度条走完会出现安装页面，选择磁盘工具进行分区。找到要装的硬盘，选择后点击右上角的抹掉，名称随便，不建议中文。格式APFS。 成功后，点击左上角并退出磁盘工具 然后选择安装macOS，选择刚才的分区确定 安装过程取决于u盘速度，安装时候会重启多次。每次重启后，需要通过boot menu进入OpenCore页面，选择安装硬盘才可以继续安装。注：前两次重启后OpenCore页面选择macOS install进入，后面则是选择硬盘进入 重启5次后就会进入欢迎页面，一路下一步就好。由于没有算三码，不能登陆appleid会封号，不要启用迁移助理(关于三码) 完善EFI引导 刚才装系统引导是在u盘上，重启电脑后必须通过u盘才可以进入系统。现在我们需要把u盘的引导复制到硬盘里，我们需要下载一个软件OCC，下载好后打开软件，点击状态栏图标，分别挂载硬盘和u盘的efi分区 然后打开efi分区，把u盘efi文件夹复制到硬盘的efi分区内，拔下u盘，重启电脑。此时，你就可以不需要u盘启动了。 现存的问题 目前发现三个问题，前两个可能你不会出现。 开机后HDMI音频无效，声音输出只有内建音频没有HDMI。重启显示器后就会出现HDMI音频，选择后声音正常播放。 关机/重启时候，页面会卡桌面大约3s钟 由于没有算三码，现在还不能登陆appleid，使用接力随航等功能 感谢 国光，本文章许多图片也是来源于他。国光的黑苹果安装教程：手把手教你配置 OpenCore 远景yippeeghost [OpenCore] NUC8最新OC EFI 持续更新（已更新至0.7.5+12.0.1） 黑果小兵 macOS Monterey 12.0.1 21A559 Installer for OpenCore 0.7.5 and CLOVER 5141 and WEPE 三 EFI 分区原版镜像 黑苹果星球 给黑苹果注入三码，避免封号，解锁iCloud/FaceTime/iMessage/随航！","link":"/2021/11/20/2021-11-20/"},{"title":"2022新年快乐","text":"2022新年快乐","link":"/2022/01/01/2022-01-01/"},{"title":"建e网VR全景图片的获取思路","text":"年前，我接到大学朋友的一个移动端官网项目。项目就是完全复刻另外一个网站A，好在网站A功能超级简单，前端技术栈是jq，整个网站只有两个难点。 有一个提交表单功能 有一个VR展示页面 对于第一个问题，我就找了个开源后台项目Lin cms，搭建了一套写了一个模块。第二个问题就有意思了，网站A使用的是叫建e网生成的VR页面。然后iframe且套到网页上。现在有两种方案；第一种，自己写VR页面，但是我就想赚快钱，不想动脑筋，所以否定了。第二种，用自己的建e网账号制作一个一摸一样的VR页面，替换iframe地址，但是我又没有生成VR页面所需要的六面图片，甲方这里也没有。那我只能用F12大法了。 在VR页面右下角三个控键上右键，点击检查 切换到network -&gt; img，并刷新网页 这时你会看到lx_x_x_x命名的图片，这些其实就是VR图片 更具我的判断，命名含义如下 第一位l固定值 第二位目前只有1 2两种情况代表着分辨率；1为一倍分辨率(1024*1024)，2为2倍分辨率 第三位代表方向 缩写 全写 中文 l left 左 f forward 前 u up 上 r right 右 b back 后 p down 下 第四位和第五位为排序字段；如果第二位为1代表着是1倍分辨率，这时第五 六位都是1，也就是说每一面图片都是一张完整图，但是这样的图片分辨率低，不建议使用。如果第二位是2代表2倍分辨率，这时每一面图片由四张组成，他们的拼接顺序是，请看下方图片。由于每张图片分辨率是1024*1024，拼接后的分辨率就是2048*2048 依次把六个面图片，都拼接好，这样就得到高分辨率可用于VR中的图片了","link":"/2022/02/28/2022-02-28/"},{"title":"记录Ubuntu 20.04 Server 环境配置及软件安装","text":"服务器是去年双11买的，腾讯轻量应用服务器。2核4G、80G硬盘、8Mbps、流量限制1200GB/月；淘宝买的3年139元；买来就当玩玩吧！！！ 更新软件源更新软件源是必备操作，最好在安装软件之前都要更新一遍。 12sudo apt updatesudo apt-get update 安装多版本nodejs注：apt-get安装的nodejs不包括npm，需要分别安装；安装的版本也不是最新，所以需要用n模块安装最新版本nodejs 通过apt-get安装nodejs npm 12sudo apt-get install nodejssudo apt-get install npm 安装n模块 1sudo npm i -g n 安装最新稳定版nodejs 1sudo n lts 安装特定版本nodejs 1sudo n 10.16.0 安装dockerdocker安装参考官方文档即可，以下内容均来自官方文档 卸载之前版本的docker 1sudo apt-get remove docker docker-engine docker.io containerd runc 安装依赖软件 12sudo apt-get updatesudo apt-get install ca-certificates curl gnupg lsb-release 添加docker官方GPG key 1curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg 设置repository 1echo &quot;deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null 安装docker 12sudo apt-get updatesudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin 验证docker是否安装成功 1sudo docker run hello-world 安装Nextcloud私有网盘系统Nextcloud是成熟的开源网盘系统，有完善的权限管理系统。有全平台客户端以及web页面。一行命令就可以通过docker安装 安装 1234# 宿主机8080端口映射容器80端口sudo docker run -d -p 8080:80 nextcloud# 宿主机当前目录下的nextcloud目录映射到容器的/var/www/html目录sudo docker run -d -p 8080:80 -v nextcloud:/var/www/html nextcloud 关于更多Nextcloud容器目录相关描述可以访问官方docker库，需要在腾讯云开放对应端口。 使用 浏览器访问ip:端口 安装gitea轻量化代码管理系统 创建文件夹并进入 12mkdir giteacd gitea 下载gitea软件包 12wget -O gitea https://dl.gitea.io/gitea/1.16.8/gitea-1.16.8-linux-amd64chmod +x gitea 测试 1./gitea web 在腾讯云开放3000端口，浏览器访问ip:3000，出现安装页面代表下载成功。然后退出。 使用service启动 1sudo vim /etc/systemd/system/gitea.service 写入一下内容 123456789101112131415[Unit]Description=GiteaAfter=syslog.targetAfter=network.target​[Service]RestartSec=2sType=simpleUser=当前的用户名Group=当前的用户的组ExecStart=/home/当前的用户名/gitea/gitea web --config /home/当前的用户名/gitea/custom/conf/app.iniRestart=always​[Install]WantedBy=multi-user.target 当前的用户名，当前的用户的组替换成你自己的。这个配置里面没有使用数据库，所以安装gitea数据库相关选择sqLite，sqLite数据库会储存为文件。 启动并设置开机自启 12sudo systemctl enable giteasudo systemctl start gitea 安装并配置 浏览器访问ip:3000进入安装页面，注意数据库选择sqLite，域名填写你的ip，端口可以自定义(需要腾讯云开放相应的端口) 修改配置 web管理面板只能查看配置，修改需要手动修改/home/当前的用户名/gitea/custom/conf/app.ini文件，修改后重启服务。完整配置单及说明","link":"/2022/05/22/2022-05-22/"}],"tags":[{"name":"路由器","slug":"路由器","link":"/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"},{"name":"刷机","slug":"刷机","link":"/tags/%E5%88%B7%E6%9C%BA/"},{"name":"百度云","slug":"百度云","link":"/tags/%E7%99%BE%E5%BA%A6%E4%BA%91/"},{"name":"IDM","slug":"IDM","link":"/tags/IDM/"},{"name":"NPM","slug":"NPM","link":"/tags/NPM/"},{"name":"算法","slug":"算法","link":"/tags/%E7%AE%97%E6%B3%95/"},{"name":"服务器","slug":"服务器","link":"/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"name":"SSL","slug":"SSL","link":"/tags/SSL/"},{"name":"WDCP","slug":"WDCP","link":"/tags/WDCP/"},{"name":"域名解析","slug":"域名解析","link":"/tags/%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/"},{"name":"mui","slug":"mui","link":"/tags/mui/"},{"name":"前端","slug":"前端","link":"/tags/%E5%89%8D%E7%AB%AF/"},{"name":"哔哩哔哩","slug":"哔哩哔哩","link":"/tags/%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9/"},{"name":"抓包","slug":"抓包","link":"/tags/%E6%8A%93%E5%8C%85/"},{"name":"MongDB","slug":"MongDB","link":"/tags/MongDB/"},{"name":"Node.js","slug":"Node-js","link":"/tags/Node-js/"},{"name":"验证码","slug":"验证码","link":"/tags/%E9%AA%8C%E8%AF%81%E7%A0%81/"},{"name":"爬虫","slug":"爬虫","link":"/tags/%E7%88%AC%E8%99%AB/"},{"name":"MongoDB","slug":"MongoDB","link":"/tags/MongoDB/"},{"name":"Vue.js","slug":"Vue-js","link":"/tags/Vue-js/"},{"name":"Vuex","slug":"Vuex","link":"/tags/Vuex/"},{"name":"PHP","slug":"PHP","link":"/tags/PHP/"},{"name":"斐波那契数列","slug":"斐波那契数列","link":"/tags/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/"},{"name":"MySQL","slug":"MySQL","link":"/tags/MySQL/"},{"name":"文件上传","slug":"文件上传","link":"/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"},{"name":"ShadowsocksR","slug":"ShadowsocksR","link":"/tags/ShadowsocksR/"},{"name":"科学上网","slug":"科学上网","link":"/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"},{"name":"小程序","slug":"小程序","link":"/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"},{"name":"Express.js","slug":"Express-js","link":"/tags/Express-js/"},{"name":"Sequelize.js","slug":"Sequelize-js","link":"/tags/Sequelize-js/"},{"name":"WebSocket","slug":"WebSocket","link":"/tags/WebSocket/"},{"name":"Git","slug":"Git","link":"/tags/Git/"},{"name":"Flutter","slug":"Flutter","link":"/tags/Flutter/"},{"name":"MacOS","slug":"MacOS","link":"/tags/MacOS/"},{"name":"视频下载","slug":"视频下载","link":"/tags/%E8%A7%86%E9%A2%91%E4%B8%8B%E8%BD%BD/"},{"name":"Bilibili","slug":"Bilibili","link":"/tags/Bilibili/"},{"name":"chart.js","slug":"chart-js","link":"/tags/chart-js/"},{"name":"FFmpeg","slug":"FFmpeg","link":"/tags/FFmpeg/"},{"name":"Charles","slug":"Charles","link":"/tags/Charles/"},{"name":"getUserMedia","slug":"getUserMedia","link":"/tags/getUserMedia/"},{"name":"jsQR","slug":"jsQR","link":"/tags/jsQR/"},{"name":"Quagga","slug":"Quagga","link":"/tags/Quagga/"},{"name":"MediaRecorder","slug":"MediaRecorder","link":"/tags/MediaRecorder/"},{"name":"onShareAppMessage","slug":"onShareAppMessage","link":"/tags/onShareAppMessage/"},{"name":"localStorage","slug":"localStorage","link":"/tags/localStorage/"},{"name":"跨域","slug":"跨域","link":"/tags/%E8%B7%A8%E5%9F%9F/"},{"name":"postMessage","slug":"postMessage","link":"/tags/postMessage/"},{"name":"bilibili","slug":"bilibili","link":"/tags/bilibili/"},{"name":"表单验证","slug":"表单验证","link":"/tags/%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/"},{"name":".gitignore","slug":"gitignore","link":"/tags/gitignore/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"github","slug":"github","link":"/tags/github/"},{"name":"翻墙","slug":"翻墙","link":"/tags/%E7%BF%BB%E5%A2%99/"},{"name":"打印","slug":"打印","link":"/tags/%E6%89%93%E5%8D%B0/"},{"name":"二维码","slug":"二维码","link":"/tags/%E4%BA%8C%E7%BB%B4%E7%A0%81/"},{"name":"条形码","slug":"条形码","link":"/tags/%E6%9D%A1%E5%BD%A2%E7%A0%81/"},{"name":"弹幕","slug":"弹幕","link":"/tags/%E5%BC%B9%E5%B9%95/"},{"name":"vue.js","slug":"vue-js","link":"/tags/vue-js/"},{"name":"electron.js","slug":"electron-js","link":"/tags/electron-js/"},{"name":"cookies","slug":"cookies","link":"/tags/cookies/"},{"name":"electron","slug":"electron","link":"/tags/electron/"},{"name":"flash","slug":"flash","link":"/tags/flash/"},{"name":"ffmpeg","slug":"ffmpeg","link":"/tags/ffmpeg/"},{"name":"fluent-ffmpeg","slug":"fluent-ffmpeg","link":"/tags/fluent-ffmpeg/"},{"name":"@ffprobe-installer","slug":"ffprobe-installer","link":"/tags/ffprobe-installer/"},{"name":"@ffmpeg-installer","slug":"ffmpeg-installer","link":"/tags/ffmpeg-installer/"},{"name":"vue","slug":"vue","link":"/tags/vue/"},{"name":"electron-builder","slug":"electron-builder","link":"/tags/electron-builder/"},{"name":"xterm","slug":"xterm","link":"/tags/xterm/"},{"name":"ssh2","slug":"ssh2","link":"/tags/ssh2/"},{"name":"Awtrix2.0","slug":"Awtrix2-0","link":"/tags/Awtrix2-0/"}],"categories":[{"name":"技术","slug":"技术","link":"/categories/%E6%8A%80%E6%9C%AF/"},{"name":"游戏","slug":"游戏","link":"/categories/%E6%B8%B8%E6%88%8F/"},{"name":"生活","slug":"生活","link":"/categories/%E7%94%9F%E6%B4%BB/"}]}